/** \file
 *  This C header file was generated by $ANTLR version 3.5.1
 *
 *     -  From the grammar source file : C:\\Users\\ap-ip\\OneDrive\\Рабочий стол\\ITMO\\SPO\\SPO1\\include\\labgramm.g
 *     -                            On : 2024-11-05 01:07:52
 *     -                for the parser : labgrammParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
labgrammParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef plabgrammParser, which is returned from a call to labgrammParserNew().
 *
 * The methods in plabgrammParser are  as follows:
 *
 *  - 
 labgrammParser_source_return
      plabgrammParser->source(plabgrammParser)
 *  - 
 labgrammParser_sourceItem_return
      plabgrammParser->sourceItem(plabgrammParser)
 *  - 
 labgrammParser_funcDef_return
      plabgrammParser->funcDef(plabgrammParser)
 *  - 
 labgrammParser_funcDefi_return
      plabgrammParser->funcDefi(plabgrammParser)
 *  - 
 labgrammParser_funcSignature_return
      plabgrammParser->funcSignature(plabgrammParser)
 *  - 
 labgrammParser_init_declarator_list_return
      plabgrammParser->init_declarator_list(plabgrammParser)
 *  - 
 labgrammParser_argDef_return
      plabgrammParser->argDef(plabgrammParser)
 *  - 
 labgrammParser_typeRef_return
      plabgrammParser->typeRef(plabgrammParser)
 *  - 
 labgrammParser_typeRefer_return
      plabgrammParser->typeRefer(plabgrammParser)
 *  - 
 labgrammParser_custom_return
      plabgrammParser->custom(plabgrammParser)
 *  - 
 labgrammParser_identifier_return
      plabgrammParser->identifier(plabgrammParser)
 *  - 
 labgrammParser_arrayList_return
      plabgrammParser->arrayList(plabgrammParser)
 *  - 
 labgrammParser_array_return
      plabgrammParser->array(plabgrammParser)
 *  - 
 labgrammParser_arrayl_return
      plabgrammParser->arrayl(plabgrammParser)
 *  - 
 labgrammParser_statement_return
      plabgrammParser->statement(plabgrammParser)
 *  - 
 labgrammParser_expressionStatement_return
      plabgrammParser->expressionStatement(plabgrammParser)
 *  - 
 labgrammParser_breakStatement_return
      plabgrammParser->breakStatement(plabgrammParser)
 *  - 
 labgrammParser_doStatement_return
      plabgrammParser->doStatement(plabgrammParser)
 *  - 
 labgrammParser_whileStatement_return
      plabgrammParser->whileStatement(plabgrammParser)
 *  - 
 labgrammParser_blockStatement_return
      plabgrammParser->blockStatement(plabgrammParser)
 *  - 
 labgrammParser_conditionStatement_return
      plabgrammParser->conditionStatement(plabgrammParser)
 *  - 
 labgrammParser_elseStatement_return
      plabgrammParser->elseStatement(plabgrammParser)
 *  - 
 labgrammParser_varStatement_return
      plabgrammParser->varStatement(plabgrammParser)
 *  - 
 labgrammParser_returnStatement_return
      plabgrammParser->returnStatement(plabgrammParser)
 *  - 
 labgrammParser_assignmentStatement_return
      plabgrammParser->assignmentStatement(plabgrammParser)
 *  - 
 labgrammParser_listid_return
      plabgrammParser->listid(plabgrammParser)
 *  - 
 labgrammParser_place_return
      plabgrammParser->place(plabgrammParser)
 *  - 
 labgrammParser_indexer_return
      plabgrammParser->indexer(plabgrammParser)
 *  - 
 labgrammParser_indexer_list_return
      plabgrammParser->indexer_list(plabgrammParser)
 *  - 
 labgrammParser_call_return
      plabgrammParser->call(plabgrammParser)
 *  - 
 labgrammParser_call_list_return
      plabgrammParser->call_list(plabgrammParser)
 *  - 
 labgrammParser_braces_return
      plabgrammParser->braces(plabgrammParser)
 *  - 
 labgrammParser_expr_return
      plabgrammParser->expr(plabgrammParser)
 *  - 
 labgrammParser_assignmentExpression_return
      plabgrammParser->assignmentExpression(plabgrammParser)
 *  - 
 labgrammParser_logicalOrExpr_return
      plabgrammParser->logicalOrExpr(plabgrammParser)
 *  - 
 labgrammParser_logicalAndExpr_return
      plabgrammParser->logicalAndExpr(plabgrammParser)
 *  - 
 labgrammParser_inclusiveOrExpr_return
      plabgrammParser->inclusiveOrExpr(plabgrammParser)
 *  - 
 labgrammParser_exclusiveOrExpr_return
      plabgrammParser->exclusiveOrExpr(plabgrammParser)
 *  - 
 labgrammParser_andExpr_return
      plabgrammParser->andExpr(plabgrammParser)
 *  - 
 labgrammParser_equalityExpr_return
      plabgrammParser->equalityExpr(plabgrammParser)
 *  - 
 labgrammParser_relationalExpr_return
      plabgrammParser->relationalExpr(plabgrammParser)
 *  - 
 labgrammParser_shiftExpr_return
      plabgrammParser->shiftExpr(plabgrammParser)
 *  - 
 labgrammParser_additiveExpr_return
      plabgrammParser->additiveExpr(plabgrammParser)
 *  - 
 labgrammParser_multiplicativeExpr_return
      plabgrammParser->multiplicativeExpr(plabgrammParser)
 *  - 
 labgrammParser_unaryExpr_return
      plabgrammParser->unaryExpr(plabgrammParser)
 *  - 
 labgrammParser_primaryExpr_return
      plabgrammParser->primaryExpr(plabgrammParser)
 *  - 
 labgrammParser_initialization_suffix_return
      plabgrammParser->initialization_suffix(plabgrammParser)
 *  - 
 labgrammParser_exprList_return
      plabgrammParser->exprList(plabgrammParser)
 *  - 
 labgrammParser_primitive_return
      plabgrammParser->primitive(plabgrammParser)
 *  - 
 labgrammParser_builtin_return
      plabgrammParser->builtin(plabgrammParser)
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_labgrammParser_H
#define _labgrammParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct labgrammParser_Ctx_struct labgrammParser, * plabgrammParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

typedef struct labgrammParser_source_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_source_return;



typedef struct labgrammParser_sourceItem_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_sourceItem_return;



typedef struct labgrammParser_funcDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_funcDef_return;



typedef struct labgrammParser_funcDefi_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_funcDefi_return;



typedef struct labgrammParser_funcSignature_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_funcSignature_return;



typedef struct labgrammParser_init_declarator_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_init_declarator_list_return;



typedef struct labgrammParser_argDef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_argDef_return;



typedef struct labgrammParser_typeRef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_typeRef_return;



typedef struct labgrammParser_typeRefer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_typeRefer_return;



typedef struct labgrammParser_custom_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_custom_return;



typedef struct labgrammParser_identifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_identifier_return;



typedef struct labgrammParser_arrayList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_arrayList_return;



typedef struct labgrammParser_array_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_array_return;



typedef struct labgrammParser_arrayl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_arrayl_return;



typedef struct labgrammParser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_statement_return;



typedef struct labgrammParser_expressionStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_expressionStatement_return;



typedef struct labgrammParser_breakStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_breakStatement_return;



typedef struct labgrammParser_doStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_doStatement_return;



typedef struct labgrammParser_whileStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_whileStatement_return;



typedef struct labgrammParser_blockStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_blockStatement_return;



typedef struct labgrammParser_conditionStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_conditionStatement_return;



typedef struct labgrammParser_elseStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_elseStatement_return;



typedef struct labgrammParser_varStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_varStatement_return;



typedef struct labgrammParser_returnStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_returnStatement_return;



typedef struct labgrammParser_assignmentStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_assignmentStatement_return;



typedef struct labgrammParser_listid_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_listid_return;



typedef struct labgrammParser_place_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_place_return;



typedef struct labgrammParser_indexer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_indexer_return;



typedef struct labgrammParser_indexer_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_indexer_list_return;



typedef struct labgrammParser_call_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_call_return;



typedef struct labgrammParser_call_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_call_list_return;



typedef struct labgrammParser_braces_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_braces_return;



typedef struct labgrammParser_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_expr_return;



typedef struct labgrammParser_assignmentExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_assignmentExpression_return;



typedef struct labgrammParser_logicalOrExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_logicalOrExpr_return;



typedef struct labgrammParser_logicalAndExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_logicalAndExpr_return;



typedef struct labgrammParser_inclusiveOrExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_inclusiveOrExpr_return;



typedef struct labgrammParser_exclusiveOrExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_exclusiveOrExpr_return;



typedef struct labgrammParser_andExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_andExpr_return;



typedef struct labgrammParser_equalityExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_equalityExpr_return;



typedef struct labgrammParser_relationalExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_relationalExpr_return;



typedef struct labgrammParser_shiftExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_shiftExpr_return;



typedef struct labgrammParser_additiveExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_additiveExpr_return;



typedef struct labgrammParser_multiplicativeExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_multiplicativeExpr_return;



typedef struct labgrammParser_unaryExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_unaryExpr_return;



typedef struct labgrammParser_primaryExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_primaryExpr_return;



typedef struct labgrammParser_initialization_suffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_initialization_suffix_return;



typedef struct labgrammParser_exprList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_exprList_return;



typedef struct labgrammParser_primitive_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_primitive_return;



typedef struct labgrammParser_builtin_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    labgrammParser_builtin_return;




/** Context tracking structure for 
labgrammParser

 */
struct labgrammParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     labgrammParser_source_return
     (*source)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_sourceItem_return
     (*sourceItem)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_funcDef_return
     (*funcDef)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_funcDefi_return
     (*funcDefi)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_funcSignature_return
     (*funcSignature)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_init_declarator_list_return
     (*init_declarator_list)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_argDef_return
     (*argDef)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_typeRef_return
     (*typeRef)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_typeRefer_return
     (*typeRefer)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_custom_return
     (*custom)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_identifier_return
     (*identifier)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_arrayList_return
     (*arrayList)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_array_return
     (*array)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_arrayl_return
     (*arrayl)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_statement_return
     (*statement)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_expressionStatement_return
     (*expressionStatement)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_breakStatement_return
     (*breakStatement)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_doStatement_return
     (*doStatement)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_whileStatement_return
     (*whileStatement)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_blockStatement_return
     (*blockStatement)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_conditionStatement_return
     (*conditionStatement)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_elseStatement_return
     (*elseStatement)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_varStatement_return
     (*varStatement)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_returnStatement_return
     (*returnStatement)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_assignmentStatement_return
     (*assignmentStatement)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_listid_return
     (*listid)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_place_return
     (*place)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_indexer_return
     (*indexer)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_indexer_list_return
     (*indexer_list)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_call_return
     (*call)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_call_list_return
     (*call_list)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_braces_return
     (*braces)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_expr_return
     (*expr)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_assignmentExpression_return
     (*assignmentExpression)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_logicalOrExpr_return
     (*logicalOrExpr)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_logicalAndExpr_return
     (*logicalAndExpr)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_inclusiveOrExpr_return
     (*inclusiveOrExpr)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_exclusiveOrExpr_return
     (*exclusiveOrExpr)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_andExpr_return
     (*andExpr)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_equalityExpr_return
     (*equalityExpr)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_relationalExpr_return
     (*relationalExpr)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_shiftExpr_return
     (*shiftExpr)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_additiveExpr_return
     (*additiveExpr)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_multiplicativeExpr_return
     (*multiplicativeExpr)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_unaryExpr_return
     (*unaryExpr)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_primaryExpr_return
     (*primaryExpr)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_initialization_suffix_return
     (*initialization_suffix)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_exprList_return
     (*exprList)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_primitive_return
     (*primitive)	(struct labgrammParser_Ctx_struct * ctx);

     labgrammParser_builtin_return
     (*builtin)	(struct labgrammParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred6_labgramm)	(struct labgrammParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred8_labgramm)	(struct labgrammParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred9_labgramm)	(struct labgrammParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred10_labgramm)	(struct labgrammParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred17_labgramm)	(struct labgrammParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred22_labgramm)	(struct labgrammParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred33_labgramm)	(struct labgrammParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred38_labgramm)	(struct labgrammParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred39_labgramm)	(struct labgrammParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred41_labgramm)	(struct labgrammParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred62_labgramm)	(struct labgrammParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred65_labgramm)	(struct labgrammParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct labgrammParser_Ctx_struct * ctx);
    void	    (*free)   (struct labgrammParser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API plabgrammParser labgrammParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API plabgrammParser labgrammParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__48      48
#define T__49      49
#define T__50      50
#define T__51      51
#define T__52      52
#define T__53      53
#define T__54      54
#define T__55      55
#define T__56      56
#define T__57      57
#define T__58      58
#define T__59      59
#define T__60      60
#define T__61      61
#define T__62      62
#define T__63      63
#define T__64      64
#define T__65      65
#define T__66      66
#define T__67      67
#define T__68      68
#define T__69      69
#define T__70      70
#define T__71      71
#define T__72      72
#define T__73      73
#define T__74      74
#define T__75      75
#define T__76      76
#define T__77      77
#define T__78      78
#define T__79      79
#define T__80      80
#define T__81      81
#define ADDITIVE_UNARY_OPERATOR      4
#define ASSIGNMENT_OPERATOR      5
#define ArgDef      6
#define Array      7
#define ArrayList      8
#define AssignmentOP      9
#define BITS      10
#define BOOL      11
#define BUILTINTYPE      12
#define Body      13
#define Braces      14
#define CHAR      15
#define COMMENT      16
#define Call      17
#define Condition      18
#define ConditionStatement      19
#define DEC      20
#define ESC_SEQ      21
#define ElseStatement      22
#define Expression      23
#define FuncDef      24
#define FuncSignature      25
#define HEX      26
#define HEX_DIGIT      27
#define ID      28
#define INT      29
#define Identifier      30
#define Indexer      31
#define Init_List      32
#define Init_suffix      33
#define LINE_COMMENT      34
#define LITERAL      35
#define ListID      36
#define LoopStatement      37
#define OCTAL_ESC      38
#define RELATIONAL_OPERATOR      39
#define RepeatStatement      40
#define ReturnStatement      41
#define STRING      42
#define Source      43
#define TypeRef      44
#define UNICODE_ESC      45
#define VarDeclaration      46
#define WS      47
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for labgrammParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
