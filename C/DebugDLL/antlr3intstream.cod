; Listing generated by Microsoft (R) Optimizing Compiler Version 19.42.34436.0 

	TITLE	C:\SPO_labs\C\DebugDLL\antlr3intstream.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_antlr3IntStreamNew
EXTRN	__imp__calloc:PROC
EXTRN	__imp__free:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3intstream.c
;	COMDAT _freeStream
_TEXT	SEGMENT
_stream$ = 8						; size = 4
_freeStream PROC					; COMDAT

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 62   : 	ANTLR3_FREE(stream);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 08	 mov	 eax, DWORD PTR _stream$[ebp]
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00010	83 c4 04	 add	 esp, 4
  00013	3b f4		 cmp	 esi, esp
  00015	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001a	90		 npad	 1

; 63   : }

  0001b	5e		 pop	 esi
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
_freeStream ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3intstream.c
;	COMDAT _antlr3IntStreamNew
_TEXT	SEGMENT
_stream$ = -4						; size = 4
_antlr3IntStreamNew PROC				; COMDAT

; 42   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 43   : 	pANTLR3_INT_STREAM	stream;
; 44   : 
; 45   : 	// Allocate memory
; 46   : 	//
; 47   : 	stream  = (pANTLR3_INT_STREAM) ANTLR3_CALLOC(1, sizeof(ANTLR3_INT_STREAM));

  0000c	8b f4		 mov	 esi, esp
  0000e	6a 40		 push	 64			; 00000040H
  00010	6a 01		 push	 1
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  00018	83 c4 08	 add	 esp, 8
  0001b	3b f4		 cmp	 esi, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	89 45 fc	 mov	 DWORD PTR _stream$[ebp], eax

; 48   : 
; 49   : 	if	(stream == NULL)

  00025	83 7d fc 00	 cmp	 DWORD PTR _stream$[ebp], 0
  00029	75 04		 jne	 SHORT $LN2@antlr3IntS

; 50   : 	{
; 51   : 		return	NULL;

  0002b	33 c0		 xor	 eax, eax
  0002d	eb 0d		 jmp	 SHORT $LN1@antlr3IntS
$LN2@antlr3IntS:

; 52   : 	}
; 53   : 
; 54   : 	stream->free    =  freeStream;

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _stream$[ebp]
  00032	c7 40 3c 00 00
	00 00		 mov	 DWORD PTR [eax+60], OFFSET _freeStream

; 55   : 
; 56   : 	return stream;

  00039	8b 45 fc	 mov	 eax, DWORD PTR _stream$[ebp]
$LN1@antlr3IntS:

; 57   : }

  0003c	5e		 pop	 esi
  0003d	83 c4 04	 add	 esp, 4
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
_antlr3IntStreamNew ENDP
_TEXT	ENDS
END
