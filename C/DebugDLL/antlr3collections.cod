; Listing generated by Microsoft (R) Optimizing Compiler Version 19.42.34436.0 

	TITLE	C:\SPO_labs\C\DebugDLL\antlr3collections.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_antlr3IntTrieNew
PUBLIC	_antlr3HashTableNew
PUBLIC	_antlr3Hash
PUBLIC	_antlr3EnumNew
PUBLIC	_antlr3ListNew
PUBLIC	_antlr3VectorFactoryNew
PUBLIC	_antlr3VectorNew
PUBLIC	_antlr3StackNew
PUBLIC	_antlr3SetVectorApi
PUBLIC	_antlr3TopoNew
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_strcmp:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__strdup:PROC
EXTRN	__imp__calloc:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp__realloc:PROC
EXTRN	_antlr3BitsetNew:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
_DATA	SEGMENT
_bitIndex DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
_bitMask DQ	0000000000000001H
	DQ	0000000000000002H
	DQ	0000000000000004H
	DQ	0000000000000008H
	DQ	0000000000000010H
	DQ	0000000000000020H
	DQ	0000000000000040H
	DQ	0000000000000080H
	DQ	0000000000000100H
	DQ	0000000000000200H
	DQ	0000000000000400H
	DQ	0000000000000800H
	DQ	0000000000001000H
	DQ	0000000000002000H
	DQ	0000000000004000H
	DQ	0000000000008000H
	DQ	0000000000010000H
	DQ	0000000000020000H
	DQ	0000000000040000H
	DQ	0000000000080000H
	DQ	0000000000100000H
	DQ	0000000000200000H
	DQ	0000000000400000H
	DQ	0000000000800000H
	DQ	0000000001000000H
	DQ	0000000002000000H
	DQ	0000000004000000H
	DQ	0000000008000000H
	DQ	0000000010000000H
	DQ	0000000020000000H
	DQ	0000000040000000H
	DQ	0000000080000000H
	DQ	0000000100000000H
	DQ	0000000200000000H
	DQ	0000000400000000H
	DQ	0000000800000000H
	DQ	0000001000000000H
	DQ	0000002000000000H
	DQ	0000004000000000H
	DQ	0000008000000000H
	DQ	0000010000000000H
	DQ	0000020000000000H
	DQ	0000040000000000H
	DQ	0000080000000000H
	DQ	0000100000000000H
	DQ	0000200000000000H
	DQ	0000400000000000H
	DQ	0000800000000000H
	DQ	0001000000000000H
	DQ	0002000000000000H
	DQ	0004000000000000H
	DQ	0008000000000000H
	DQ	0010000000000000H
	DQ	0020000000000000H
	DQ	0040000000000000H
	DQ	0080000000000000H
	DQ	0100000000000000H
	DQ	0200000000000000H
	DQ	0400000000000000H
	DQ	0800000000000000H
	DQ	1000000000000000H
	DQ	2000000000000000H
	DQ	4000000000000000H
	DQ	8000000000000000H
_DATA	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _DFS
_TEXT	SEGMENT
_range$1 = -24						; size = 4
_i$2 = -20						; size = 4
_numBits$3 = -16					; size = 4
_l$4 = -12						; size = 4
_i$5 = -8						; size = 4
_edges$ = -4						; size = 4
_topo$ = 8						; size = 4
_node$ = 12						; size = 4
_DFS	PROC						; COMDAT

; 2456 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00012	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00015	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00018	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001b	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 2457 :     pANTLR3_BITSET edges;
; 2458 : 
; 2459 :     // Guard against a revisit and check for cycles
; 2460 :     //
; 2461 :     if  (topo->hasCycle == ANTLR3_TRUE)

  0001e	8b 45 08	 mov	 eax, DWORD PTR _topo$[ebp]
  00021	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00025	83 f9 01	 cmp	 ecx, 1
  00028	75 05		 jne	 SHORT $LN11@DFS

; 2462 :     {
; 2463 :         return; // We don't do anything else if we found a cycle

  0002a	e9 db 01 00 00	 jmp	 $LN1@DFS
$LN11@DFS:

; 2464 :     }
; 2465 : 
; 2466 :     if  (topo->visited->isMember(topo->visited, node))

  0002f	8b f4		 mov	 esi, esp
  00031	8b 55 0c	 mov	 edx, DWORD PTR _node$[ebp]
  00034	52		 push	 edx
  00035	8b 45 08	 mov	 eax, DWORD PTR _topo$[ebp]
  00038	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0003b	51		 push	 ecx
  0003c	8b 55 08	 mov	 edx, DWORD PTR _topo$[ebp]
  0003f	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00042	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00045	ff d1		 call	 ecx
  00047	83 c4 08	 add	 esp, 8
  0004a	3b f4		 cmp	 esi, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	0f b6 d0	 movzx	 edx, al
  00054	85 d2		 test	 edx, edx
  00056	0f 84 84 00 00
	00		 je	 $LN12@DFS

; 2467 :     {
; 2468 :         // Check to see if we found a cycle. To do this we search the
; 2469 :         // current cycle stack and see if we find this node already in the stack.
; 2470 :         //
; 2471 :         ANTLR3_UINT32   i;
; 2472 : 
; 2473 :         for (i=0; i<topo->cycleMark; i++)

  0005c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$5[ebp], 0
  00063	eb 09		 jmp	 SHORT $LN4@DFS
$LN2@DFS:
  00065	8b 45 f8	 mov	 eax, DWORD PTR _i$5[ebp]
  00068	83 c0 01	 add	 eax, 1
  0006b	89 45 f8	 mov	 DWORD PTR _i$5[ebp], eax
$LN4@DFS:
  0006e	8b 4d 08	 mov	 ecx, DWORD PTR _topo$[ebp]
  00071	8b 55 f8	 mov	 edx, DWORD PTR _i$5[ebp]
  00074	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  00077	73 62		 jae	 SHORT $LN3@DFS

; 2474 :         {
; 2475 :             if  (topo->cycle[i] == node)

  00079	8b 45 08	 mov	 eax, DWORD PTR _topo$[ebp]
  0007c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0007f	8b 55 f8	 mov	 edx, DWORD PTR _i$5[ebp]
  00082	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00085	3b 45 0c	 cmp	 eax, DWORD PTR _node$[ebp]
  00088	75 4f		 jne	 SHORT $LN13@DFS

; 2476 :             {
; 2477 :                 // Stop! We found a cycle in the input, so rejig the cycle
; 2478 :                 // stack so that it only contains the cycle and set the cycle flag
; 2479 :                 // which will tell the caller what happened
; 2480 :                 //
; 2481 :                 ANTLR3_UINT32 l;
; 2482 : 
; 2483 :                 for (l = i; l < topo->cycleMark; l++)

  0008a	8b 4d f8	 mov	 ecx, DWORD PTR _i$5[ebp]
  0008d	89 4d f4	 mov	 DWORD PTR _l$4[ebp], ecx
  00090	eb 09		 jmp	 SHORT $LN7@DFS
$LN5@DFS:
  00092	8b 55 f4	 mov	 edx, DWORD PTR _l$4[ebp]
  00095	83 c2 01	 add	 edx, 1
  00098	89 55 f4	 mov	 DWORD PTR _l$4[ebp], edx
$LN7@DFS:
  0009b	8b 45 08	 mov	 eax, DWORD PTR _topo$[ebp]
  0009e	8b 4d f4	 mov	 ecx, DWORD PTR _l$4[ebp]
  000a1	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  000a4	73 1d		 jae	 SHORT $LN6@DFS

; 2484 :                 {
; 2485 :                     topo->cycle[l - i] = topo->cycle[l];    // Move to zero base in the cycle list

  000a6	8b 55 08	 mov	 edx, DWORD PTR _topo$[ebp]
  000a9	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000ac	8b 4d f4	 mov	 ecx, DWORD PTR _l$4[ebp]
  000af	2b 4d f8	 sub	 ecx, DWORD PTR _i$5[ebp]
  000b2	8b 55 08	 mov	 edx, DWORD PTR _topo$[ebp]
  000b5	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  000b8	8b 75 f4	 mov	 esi, DWORD PTR _l$4[ebp]
  000bb	8b 04 b0	 mov	 eax, DWORD PTR [eax+esi*4]
  000be	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 2486 :                 }

  000c1	eb cf		 jmp	 SHORT $LN5@DFS
$LN6@DFS:

; 2487 : 
; 2488 :                 // Recalculate the limit
; 2489 :                 //
; 2490 :                 topo->cycleMark -= i;

  000c3	8b 4d 08	 mov	 ecx, DWORD PTR _topo$[ebp]
  000c6	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000c9	2b 55 f8	 sub	 edx, DWORD PTR _i$5[ebp]
  000cc	8b 45 08	 mov	 eax, DWORD PTR _topo$[ebp]
  000cf	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 2491 : 
; 2492 :                 // Signal disaster
; 2493 :                 //
; 2494 :                 topo->hasCycle = ANTLR3_TRUE;

  000d2	8b 4d 08	 mov	 ecx, DWORD PTR _topo$[ebp]
  000d5	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
$LN13@DFS:

; 2495 :             }
; 2496 :         }

  000d9	eb 8a		 jmp	 SHORT $LN2@DFS
$LN3@DFS:

; 2497 :         return;

  000db	e9 2a 01 00 00	 jmp	 $LN1@DFS
$LN12@DFS:

; 2498 :     }
; 2499 : 
; 2500 :     // So far, no cycles have been found and we have not visited this node yet,
; 2501 :     // so this node needs to go into the cycle stack before we continue
; 2502 :     // then we will take it out of the stack once we have descended all its
; 2503 :     // dependencies.
; 2504 :     //
; 2505 :     topo->cycle[topo->cycleMark++] = node;

  000e0	8b 55 08	 mov	 edx, DWORD PTR _topo$[ebp]
  000e3	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000e6	8b 4d 08	 mov	 ecx, DWORD PTR _topo$[ebp]
  000e9	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000ec	8b 4d 0c	 mov	 ecx, DWORD PTR _node$[ebp]
  000ef	89 0c 82	 mov	 DWORD PTR [edx+eax*4], ecx
  000f2	8b 55 08	 mov	 edx, DWORD PTR _topo$[ebp]
  000f5	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000f8	83 c0 01	 add	 eax, 1
  000fb	8b 4d 08	 mov	 ecx, DWORD PTR _topo$[ebp]
  000fe	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 2506 : 
; 2507 :     // First flag that we have visited this node
; 2508 :     //
; 2509 :     topo->visited->add(topo->visited, node);

  00101	8b f4		 mov	 esi, esp
  00103	8b 55 0c	 mov	 edx, DWORD PTR _node$[ebp]
  00106	52		 push	 edx
  00107	8b 45 08	 mov	 eax, DWORD PTR _topo$[ebp]
  0010a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0010d	51		 push	 ecx
  0010e	8b 55 08	 mov	 edx, DWORD PTR _topo$[ebp]
  00111	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00114	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00117	ff d1		 call	 ecx
  00119	83 c4 08	 add	 esp, 8
  0011c	3b f4		 cmp	 esi, esp
  0011e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2510 : 
; 2511 :     // Now, if this node has edges, then we want to ensure we visit
; 2512 :     // them all before we drop through and add this node into the sorted
; 2513 :     // list.
; 2514 :     //
; 2515 :     edges = *((topo->edges) + node);

  00123	8b 55 08	 mov	 edx, DWORD PTR _topo$[ebp]
  00126	8b 02		 mov	 eax, DWORD PTR [edx]
  00128	8b 4d 0c	 mov	 ecx, DWORD PTR _node$[ebp]
  0012b	8b 14 88	 mov	 edx, DWORD PTR [eax+ecx*4]
  0012e	89 55 fc	 mov	 DWORD PTR _edges$[ebp], edx

; 2516 :     if  (edges != NULL)

  00131	83 7d fc 00	 cmp	 DWORD PTR _edges$[ebp], 0
  00135	0f 84 94 00 00
	00		 je	 $LN9@DFS

; 2517 :     {
; 2518 :         // We have some edges, so visit each of the edge nodes
; 2519 :         // that have not already been visited.
; 2520 :         //
; 2521 :         ANTLR3_UINT32   numBits;	    // How many bits are in the set
; 2522 :         ANTLR3_UINT32   i;
; 2523 :         ANTLR3_UINT32   range;
; 2524 : 
; 2525 :         numBits = edges->numBits(edges);

  0013b	8b f4		 mov	 esi, esp
  0013d	8b 45 fc	 mov	 eax, DWORD PTR _edges$[ebp]
  00140	50		 push	 eax
  00141	8b 4d fc	 mov	 ecx, DWORD PTR _edges$[ebp]
  00144	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00147	ff d2		 call	 edx
  00149	83 c4 04	 add	 esp, 4
  0014c	3b f4		 cmp	 esi, esp
  0014e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00153	89 45 f0	 mov	 DWORD PTR _numBits$3[ebp], eax

; 2526 :         range   = edges->size(edges);   // Number of set bits

  00156	8b f4		 mov	 esi, esp
  00158	8b 45 fc	 mov	 eax, DWORD PTR _edges$[ebp]
  0015b	50		 push	 eax
  0015c	8b 4d fc	 mov	 ecx, DWORD PTR _edges$[ebp]
  0015f	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00162	ff d2		 call	 edx
  00164	83 c4 04	 add	 esp, 4
  00167	3b f4		 cmp	 esi, esp
  00169	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016e	89 45 e8	 mov	 DWORD PTR _range$1[ebp], eax

; 2527 : 
; 2528 :         // Stop if we exahust the bit list or have checked the
; 2529 :         // number of edges that this node refers to (so we don't
; 2530 :         // check bits at the end that cannot possibly be set).
; 2531 :         //
; 2532 :         for (i=0; i<= numBits && range > 0; i++)

  00171	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  00178	eb 09		 jmp	 SHORT $LN10@DFS
$LN8@DFS:
  0017a	8b 45 ec	 mov	 eax, DWORD PTR _i$2[ebp]
  0017d	83 c0 01	 add	 eax, 1
  00180	89 45 ec	 mov	 DWORD PTR _i$2[ebp], eax
$LN10@DFS:
  00183	8b 4d ec	 mov	 ecx, DWORD PTR _i$2[ebp]
  00186	3b 4d f0	 cmp	 ecx, DWORD PTR _numBits$3[ebp]
  00189	77 44		 ja	 SHORT $LN9@DFS
  0018b	83 7d e8 00	 cmp	 DWORD PTR _range$1[ebp], 0
  0018f	76 3e		 jbe	 SHORT $LN9@DFS

; 2533 :         {
; 2534 :             if  (edges->isMember(edges, i))

  00191	8b f4		 mov	 esi, esp
  00193	8b 55 ec	 mov	 edx, DWORD PTR _i$2[ebp]
  00196	52		 push	 edx
  00197	8b 45 fc	 mov	 eax, DWORD PTR _edges$[ebp]
  0019a	50		 push	 eax
  0019b	8b 4d fc	 mov	 ecx, DWORD PTR _edges$[ebp]
  0019e	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  001a1	ff d2		 call	 edx
  001a3	83 c4 08	 add	 esp, 8
  001a6	3b f4		 cmp	 esi, esp
  001a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001ad	0f b6 c0	 movzx	 eax, al
  001b0	85 c0		 test	 eax, eax
  001b2	74 19		 je	 SHORT $LN15@DFS

; 2535 :             {
; 2536 :                 range--;        // About to check another one

  001b4	8b 4d e8	 mov	 ecx, DWORD PTR _range$1[ebp]
  001b7	83 e9 01	 sub	 ecx, 1
  001ba	89 4d e8	 mov	 DWORD PTR _range$1[ebp], ecx

; 2537 : 
; 2538 :                 // Found an edge, make sure we visit and descend it
; 2539 :                 //
; 2540 :                 DFS(topo, i);

  001bd	8b 55 ec	 mov	 edx, DWORD PTR _i$2[ebp]
  001c0	52		 push	 edx
  001c1	8b 45 08	 mov	 eax, DWORD PTR _topo$[ebp]
  001c4	50		 push	 eax
  001c5	e8 00 00 00 00	 call	 _DFS
  001ca	83 c4 08	 add	 esp, 8
$LN15@DFS:

; 2541 :             }
; 2542 :         }

  001cd	eb ab		 jmp	 SHORT $LN8@DFS
$LN9@DFS:

; 2543 :     }
; 2544 : 
; 2545 :     // At this point we will have visited all the dependencies
; 2546 :     // of this node and they will be ordered (even if there are cycles)
; 2547 :     // So we just add the node into the sorted list at the
; 2548 :     // current index position.
; 2549 :     //
; 2550 :     topo->sorted[topo->limit++] = node;

  001cf	8b 4d 08	 mov	 ecx, DWORD PTR _topo$[ebp]
  001d2	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001d5	8b 45 08	 mov	 eax, DWORD PTR _topo$[ebp]
  001d8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001db	8b 45 0c	 mov	 eax, DWORD PTR _node$[ebp]
  001de	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
  001e1	8b 4d 08	 mov	 ecx, DWORD PTR _topo$[ebp]
  001e4	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  001e7	83 c2 01	 add	 edx, 1
  001ea	8b 45 08	 mov	 eax, DWORD PTR _topo$[ebp]
  001ed	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 2551 : 
; 2552 :     // Remove this node from the cycle list if we have not detected a cycle
; 2553 :     //
; 2554 :     if  (topo->hasCycle == ANTLR3_FALSE)

  001f0	8b 4d 08	 mov	 ecx, DWORD PTR _topo$[ebp]
  001f3	0f b6 51 0c	 movzx	 edx, BYTE PTR [ecx+12]
  001f7	85 d2		 test	 edx, edx
  001f9	75 0f		 jne	 SHORT $LN16@DFS

; 2555 :     {
; 2556 :         topo->cycleMark--;

  001fb	8b 45 08	 mov	 eax, DWORD PTR _topo$[ebp]
  001fe	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00201	83 e9 01	 sub	 ecx, 1
  00204	8b 55 08	 mov	 edx, DWORD PTR _topo$[ebp]
  00207	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
$LN16@DFS:
$LN1@DFS:

; 2557 :     }
; 2558 : 
; 2559 :     return;
; 2560 : }

  0020a	5e		 pop	 esi
  0020b	83 c4 18	 add	 esp, 24			; 00000018H
  0020e	3b ec		 cmp	 ebp, esp
  00210	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00215	8b e5		 mov	 esp, ebp
  00217	5d		 pop	 ebp
  00218	c3		 ret	 0
_DFS	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _freeIntNode
_TEXT	SEGMENT
_nextEntry$ = -8					; size = 4
_thisEntry$ = -4					; size = 4
_node$ = 8						; size = 4
_freeIntNode PROC					; COMDAT

; 2231 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 2232 :     pANTLR3_TRIE_ENTRY	thisEntry;
; 2233 :     pANTLR3_TRIE_ENTRY	nextEntry;
; 2234 : 
; 2235 :     /* If this node has a left pointer that is not a back pointer
; 2236 :      * then recursively call to free this
; 2237 :      */
; 2238 :     if (node->bitNum > node->leftN->bitNum)

  00015	8b 45 08	 mov	 eax, DWORD PTR _node$[ebp]
  00018	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0001b	8b 55 08	 mov	 edx, DWORD PTR _node$[ebp]
  0001e	8b 02		 mov	 eax, DWORD PTR [edx]
  00020	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00022	76 0f		 jbe	 SHORT $LN4@freeIntNod

; 2239 :     {
; 2240 : 	/* We have a left node that needs descending, so do it.
; 2241 : 	 */
; 2242 : 	freeIntNode(node->leftN);

  00024	8b 4d 08	 mov	 ecx, DWORD PTR _node$[ebp]
  00027	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0002a	52		 push	 edx
  0002b	e8 00 00 00 00	 call	 _freeIntNode
  00030	83 c4 04	 add	 esp, 4
$LN4@freeIntNod:

; 2243 :     }
; 2244 : 
; 2245 :     /* The left nodes from here should now be dealt with, so 
; 2246 :      * we need to descend any right nodes that are not back pointers
; 2247 :      */
; 2248 :     if (node->bitNum > node->rightN->bitNum)

  00033	8b 45 08	 mov	 eax, DWORD PTR _node$[ebp]
  00036	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00039	8b 55 08	 mov	 edx, DWORD PTR _node$[ebp]
  0003c	8b 02		 mov	 eax, DWORD PTR [edx]
  0003e	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00040	76 0f		 jbe	 SHORT $LN5@freeIntNod

; 2249 :     {
; 2250 : 	/* There are some right nodes to descend and deal with.
; 2251 : 	 */
; 2252 : 	freeIntNode(node->rightN);

  00042	8b 4d 08	 mov	 ecx, DWORD PTR _node$[ebp]
  00045	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00048	52		 push	 edx
  00049	e8 00 00 00 00	 call	 _freeIntNode
  0004e	83 c4 04	 add	 esp, 4
$LN5@freeIntNod:

; 2253 :     }
; 2254 : 
; 2255 :     /* Now all the children are dealt with, we can destroy
; 2256 :      * this node too
; 2257 :      */
; 2258 :     thisEntry	= node->buckets;

  00051	8b 45 08	 mov	 eax, DWORD PTR _node$[ebp]
  00054	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00057	89 4d fc	 mov	 DWORD PTR _thisEntry$[ebp], ecx
$LN2@freeIntNod:

; 2259 : 
; 2260 :     while (thisEntry != NULL)

  0005a	83 7d fc 00	 cmp	 DWORD PTR _thisEntry$[ebp], 0
  0005e	74 54		 je	 SHORT $LN3@freeIntNod

; 2261 :     {
; 2262 : 	nextEntry   = thisEntry->next;

  00060	8b 55 fc	 mov	 edx, DWORD PTR _thisEntry$[ebp]
  00063	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00066	89 45 f8	 mov	 DWORD PTR _nextEntry$[ebp], eax

; 2263 : 
; 2264 : 	/* Do we need to call a custom free pointer for this string entry?
; 2265 : 	 */
; 2266 : 	if (thisEntry->type == ANTLR3_HASH_TYPE_STR && thisEntry->freeptr != NULL)

  00069	8b 4d fc	 mov	 ecx, DWORD PTR _thisEntry$[ebp]
  0006c	83 39 01	 cmp	 DWORD PTR [ecx], 1
  0006f	75 25		 jne	 SHORT $LN6@freeIntNod
  00071	8b 55 fc	 mov	 edx, DWORD PTR _thisEntry$[ebp]
  00074	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  00078	74 1c		 je	 SHORT $LN6@freeIntNod

; 2267 : 	{
; 2268 : 	    thisEntry->freeptr(thisEntry->data.ptr);

  0007a	8b f4		 mov	 esi, esp
  0007c	8b 45 fc	 mov	 eax, DWORD PTR _thisEntry$[ebp]
  0007f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00082	51		 push	 ecx
  00083	8b 55 fc	 mov	 edx, DWORD PTR _thisEntry$[ebp]
  00086	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00089	ff d0		 call	 eax
  0008b	83 c4 04	 add	 esp, 4
  0008e	3b f4		 cmp	 esi, esp
  00090	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00095	90		 npad	 1
$LN6@freeIntNod:

; 2269 : 	}
; 2270 : 
; 2271 : 	/* Now free the data for this bucket entry
; 2272 : 	 */
; 2273 : 	ANTLR3_FREE(thisEntry);

  00096	8b f4		 mov	 esi, esp
  00098	8b 4d fc	 mov	 ecx, DWORD PTR _thisEntry$[ebp]
  0009b	51		 push	 ecx
  0009c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  000a2	83 c4 04	 add	 esp, 4
  000a5	3b f4		 cmp	 esi, esp
  000a7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2274 : 	thisEntry = nextEntry;	    /* See if there are any more to free    */

  000ac	8b 55 f8	 mov	 edx, DWORD PTR _nextEntry$[ebp]
  000af	89 55 fc	 mov	 DWORD PTR _thisEntry$[ebp], edx

; 2275 :     }

  000b2	eb a6		 jmp	 SHORT $LN2@freeIntNod
$LN3@freeIntNod:

; 2276 : 
; 2277 :     /* The bucket entry is now gone, so we can free the memory for
; 2278 :      * the entry itself.
; 2279 :      */
; 2280 :     ANTLR3_FREE(node);

  000b4	8b f4		 mov	 esi, esp
  000b6	8b 45 08	 mov	 eax, DWORD PTR _node$[ebp]
  000b9	50		 push	 eax
  000ba	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  000c0	83 c4 04	 add	 esp, 4
  000c3	3b f4		 cmp	 esi, esp
  000c5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ca	90		 npad	 1

; 2281 : 
; 2282 :     /* And that should be it for everything under this node and itself
; 2283 :      */
; 2284 : }

  000cb	5e		 pop	 esi
  000cc	83 c4 08	 add	 esp, 8
  000cf	3b ec		 cmp	 ebp, esp
  000d1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c3		 ret	 0
_freeIntNode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3VectorResize
_TEXT	SEGMENT
_newElements$1 = -8					; size = 4
_newSize$ = -4						; size = 4
_vector$ = 8						; size = 4
_hint$ = 12						; size = 4
_antlr3VectorResize PROC				; COMDAT

; 1290 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1291 : 	ANTLR3_UINT32	newSize;
; 1292 : 
; 1293 : 	// Need to resize the element pointers. We double the allocation
; 1294 : 	// we already have unless asked for a specific increase.
; 1295 :     //
; 1296 :     if (hint == 0 || hint < vector->elementsSize)

  00015	83 7d 0c 00	 cmp	 DWORD PTR _hint$[ebp], 0
  00019	74 0e		 je	 SHORT $LN4@antlr3Vect
  0001b	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0001e	8b 4d 0c	 mov	 ecx, DWORD PTR _hint$[ebp]
  00021	3b 88 8c 00 00
	00		 cmp	 ecx, DWORD PTR [eax+140]
  00027	73 10		 jae	 SHORT $LN2@antlr3Vect
$LN4@antlr3Vect:

; 1297 :     {
; 1298 :         newSize = vector->elementsSize * 2;

  00029	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  0002c	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00032	d1 e0		 shl	 eax, 1
  00034	89 45 fc	 mov	 DWORD PTR _newSize$[ebp], eax

; 1299 :     }

  00037	eb 08		 jmp	 SHORT $LN3@antlr3Vect
$LN2@antlr3Vect:

; 1300 :     else
; 1301 :     {
; 1302 :         newSize = hint * 2;

  00039	8b 4d 0c	 mov	 ecx, DWORD PTR _hint$[ebp]
  0003c	d1 e1		 shl	 ecx, 1
  0003e	89 4d fc	 mov	 DWORD PTR _newSize$[ebp], ecx
$LN3@antlr3Vect:

; 1303 :     }
; 1304 : 
; 1305 :     // Now we know how many we need, so we see if we have just expanded
; 1306 :     // past the built in vector elements or were already past that
; 1307 :     //
; 1308 :     if  (vector->elementsSize > ANTLR3_VECTOR_INTERNAL_SIZE)

  00041	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  00044	83 ba 8c 00 00
	00 10		 cmp	 DWORD PTR [edx+140], 16	; 00000010H
  0004b	76 36		 jbe	 SHORT $LN5@antlr3Vect

; 1309 :     {
; 1310 :         // We were already larger than the internal size, so we just
; 1311 :         // use realloc so that the pointers are copied for us
; 1312 :         //
; 1313 : 		pANTLR3_VECTOR_ELEMENT newElements = (pANTLR3_VECTOR_ELEMENT)ANTLR3_REALLOC(vector->elements, (sizeof(ANTLR3_VECTOR_ELEMENT)* newSize));

  0004d	8b 45 fc	 mov	 eax, DWORD PTR _newSize$[ebp]
  00050	c1 e0 03	 shl	 eax, 3
  00053	8b f4		 mov	 esi, esp
  00055	50		 push	 eax
  00056	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00059	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005b	52		 push	 edx
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__realloc
  00062	83 c4 08	 add	 esp, 8
  00065	3b f4		 cmp	 esi, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	89 45 f8	 mov	 DWORD PTR _newElements$1[ebp], eax

; 1314 : 		if (newElements == NULL)

  0006f	83 7d f8 00	 cmp	 DWORD PTR _newElements$1[ebp], 0
  00073	75 04		 jne	 SHORT $LN7@antlr3Vect

; 1315 : 		{
; 1316 : 			// realloc failed, but the old allocation is still there
; 1317 : 			return ANTLR3_FALSE;

  00075	32 c0		 xor	 al, al
  00077	eb 5c		 jmp	 SHORT $LN1@antlr3Vect
$LN7@antlr3Vect:

; 1318 : 		}
; 1319 :         vector->elements = newElements;

  00079	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0007c	8b 4d f8	 mov	 ecx, DWORD PTR _newElements$1[ebp]
  0007f	89 08		 mov	 DWORD PTR [eax], ecx

; 1320 :     }

  00081	eb 44		 jmp	 SHORT $LN6@antlr3Vect
$LN5@antlr3Vect:

; 1321 :     else
; 1322 :     {
; 1323 :         // The current size was less than or equal to the internal array size and as we always start
; 1324 :         // with a size that is at least the maximum internal size, then we must need to allocate new memory
; 1325 :         // for external pointers. We don't want to take the time to calculate if a requested element
; 1326 :         // is part of the internal or external entries, so we copy the internal ones to the new space
; 1327 :         //
; 1328 :         vector->elements	= (pANTLR3_VECTOR_ELEMENT)ANTLR3_MALLOC((sizeof(ANTLR3_VECTOR_ELEMENT)* newSize));

  00083	8b 55 fc	 mov	 edx, DWORD PTR _newSize$[ebp]
  00086	c1 e2 03	 shl	 edx, 3
  00089	8b f4		 mov	 esi, esp
  0008b	52		 push	 edx
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00092	83 c4 04	 add	 esp, 4
  00095	3b f4		 cmp	 esi, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009c	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  0009f	89 01		 mov	 DWORD PTR [ecx], eax

; 1329 : 		if (vector->elements == NULL)

  000a1	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  000a4	83 3a 00	 cmp	 DWORD PTR [edx], 0
  000a7	75 04		 jne	 SHORT $LN8@antlr3Vect

; 1330 : 		{
; 1331 : 			// malloc failed
; 1332 : 			return ANTLR3_FALSE;

  000a9	32 c0		 xor	 al, al
  000ab	eb 28		 jmp	 SHORT $LN1@antlr3Vect
$LN8@antlr3Vect:

; 1333 : 		}
; 1334 :         ANTLR3_MEMCPY(vector->elements, vector->internal, ANTLR3_VECTOR_INTERNAL_SIZE * sizeof(ANTLR3_VECTOR_ELEMENT));

  000ad	68 80 00 00 00	 push	 128			; 00000080H
  000b2	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000b5	83 c0 08	 add	 eax, 8
  000b8	50		 push	 eax
  000b9	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  000bc	8b 11		 mov	 edx, DWORD PTR [ecx]
  000be	52		 push	 edx
  000bf	e8 00 00 00 00	 call	 _memcpy
  000c4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@antlr3Vect:

; 1335 :     }
; 1336 : 
; 1337 : 	vector->elementsSize	= newSize;

  000c7	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000ca	8b 4d fc	 mov	 ecx, DWORD PTR _newSize$[ebp]
  000cd	89 88 8c 00 00
	00		 mov	 DWORD PTR [eax+140], ecx

; 1338 : 	return ANTLR3_TRUE;

  000d3	b0 01		 mov	 al, 1
$LN1@antlr3Vect:

; 1339 : }

  000d5	5e		 pop	 esi
  000d6	83 c4 08	 add	 esp, 8
  000d9	3b ec		 cmp	 ebp, esp
  000db	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
_antlr3VectorResize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3EnumNextEntry
_TEXT	SEGMENT
_bucket$ = -4						; size = 4
_en$ = 8						; size = 4
_antlr3EnumNextEntry PROC				; COMDAT

; 766  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 767  :     pANTLR3_HASH_BUCKET	bucket;
; 768  : 
; 769  :     /* See if the current entry pointer is valid first of all
; 770  :      */
; 771  :     if	(en->entry != NULL)

  00004	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00007	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0000b	74 1d		 je	 SHORT $LN5@antlr3Enum

; 772  :     {
; 773  : 	/* Current entry was a valid point, see if there is another
; 774  : 	 * one in the chain.
; 775  : 	 */
; 776  : 	if  (en->entry->nextEntry != NULL)

  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00010	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00013	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  00017	74 11		 je	 SHORT $LN5@antlr3Enum

; 777  : 	{
; 778  : 	    /* Next entry in the enumeration is just the next entry
; 779  : 	     * in the chain.
; 780  : 	     */
; 781  : 	    en->entry = en->entry->nextEntry;

  00019	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  0001c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001f	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00022	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00025	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 782  : 	    return;

  00028	eb 59		 jmp	 SHORT $LN3@antlr3Enum
$LN5@antlr3Enum:

; 783  : 	}
; 784  :     }
; 785  : 
; 786  :     /* There were no more entries in the current bucket, if there are
; 787  :      * more buckets then chase them until we find an entry.
; 788  :      */
; 789  :     en->bucket++;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0002d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00030	83 c2 01	 add	 edx, 1
  00033	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00036	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@antlr3Enum:

; 790  : 
; 791  :     while   (en->bucket < en->table->modulo)

  00039	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0003c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003e	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00041	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00044	3b 4a 04	 cmp	 ecx, DWORD PTR [edx+4]
  00047	73 3a		 jae	 SHORT $LN3@antlr3Enum

; 792  :     {
; 793  : 	/* There was one more bucket, see if it has any elements in it
; 794  : 	 */
; 795  : 	bucket	= en->table->buckets + en->bucket;

  00049	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0004c	8b 02		 mov	 eax, DWORD PTR [edx]
  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00051	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00054	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00057	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  0005a	89 4d fc	 mov	 DWORD PTR _bucket$[ebp], ecx

; 796  : 
; 797  : 	if  (bucket->entries != NULL)

  0005d	8b 55 fc	 mov	 edx, DWORD PTR _bucket$[ebp]
  00060	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00063	74 0d		 je	 SHORT $LN6@antlr3Enum

; 798  : 	{
; 799  : 	    /* There was an entry in this bucket, so we can use it
; 800  : 	     * for the next entry in the enumeration.
; 801  : 	     */
; 802  : 	    en->entry	= bucket->entries;

  00065	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00068	8b 4d fc	 mov	 ecx, DWORD PTR _bucket$[ebp]
  0006b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0006d	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 803  : 	    return;

  00070	eb 11		 jmp	 SHORT $LN3@antlr3Enum
$LN6@antlr3Enum:

; 804  : 	}
; 805  : 
; 806  : 	/* There was nothing in the bucket we just examined, move to the
; 807  : 	 * next one.
; 808  : 	 */
; 809  : 	en->bucket++;

  00072	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00075	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00078	83 c1 01	 add	 ecx, 1
  0007b	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0007e	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 810  :     }

  00081	eb b6		 jmp	 SHORT $LN2@antlr3Enum
$LN3@antlr3Enum:

; 811  : 
; 812  :     /* Here we have exhausted all buckets and the enumeration pointer will 
; 813  :      * have its bucket count = table->modulo which signifies that we are done.
; 814  :      */
; 815  : }

  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
_antlr3EnumNextEntry ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _freeTopo
_TEXT	SEGMENT
_edgeList$1 = -8					; size = 4
_i$ = -4						; size = 4
_topo$ = 8						; size = 4
_freeTopo PROC						; COMDAT

; 2746 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 2747 :     ANTLR3_UINT32   i;
; 2748 : 
; 2749 :     // Free the result vector
; 2750 :     //
; 2751 :     if  (topo->sorted != NULL)

  00015	8b 45 08	 mov	 eax, DWORD PTR _topo$[ebp]
  00018	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0001c	74 23		 je	 SHORT $LN5@freeTopo

; 2752 :     {
; 2753 :         ANTLR3_FREE(topo->sorted);

  0001e	8b f4		 mov	 esi, esp
  00020	8b 4d 08	 mov	 ecx, DWORD PTR _topo$[ebp]
  00023	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00026	52		 push	 edx
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0002d	83 c4 04	 add	 esp, 4
  00030	3b f4		 cmp	 esi, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2754 :         topo->sorted = NULL;

  00037	8b 45 08	 mov	 eax, DWORD PTR _topo$[ebp]
  0003a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
$LN5@freeTopo:

; 2755 :     }
; 2756 : 
; 2757 :     // Free the visited map
; 2758 :     //
; 2759 :     if  (topo->visited != NULL)

  00041	8b 4d 08	 mov	 ecx, DWORD PTR _topo$[ebp]
  00044	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  00048	74 28		 je	 SHORT $LN6@freeTopo

; 2760 :     {
; 2761 : 
; 2762 :         topo->visited->free(topo->visited);

  0004a	8b f4		 mov	 esi, esp
  0004c	8b 55 08	 mov	 edx, DWORD PTR _topo$[ebp]
  0004f	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00052	50		 push	 eax
  00053	8b 4d 08	 mov	 ecx, DWORD PTR _topo$[ebp]
  00056	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00059	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0005c	ff d0		 call	 eax
  0005e	83 c4 04	 add	 esp, 4
  00061	3b f4		 cmp	 esi, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2763 :         topo->visited = NULL;

  00068	8b 4d 08	 mov	 ecx, DWORD PTR _topo$[ebp]
  0006b	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
$LN6@freeTopo:

; 2764 :     }
; 2765 : 
; 2766 :     // Free any edgemaps
; 2767 :     //
; 2768 :     if  (topo->edges != NULL)

  00072	8b 55 08	 mov	 edx, DWORD PTR _topo$[ebp]
  00075	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00078	74 65		 je	 SHORT $LN7@freeTopo

; 2769 :     {
; 2770 :         pANTLR3_BITSET edgeList;
; 2771 : 
; 2772 :         
; 2773 :         for (i=0; i<topo->limit; i++)

  0007a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00081	eb 09		 jmp	 SHORT $LN4@freeTopo
$LN2@freeTopo:
  00083	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00086	83 c0 01	 add	 eax, 1
  00089	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@freeTopo:
  0008c	8b 4d 08	 mov	 ecx, DWORD PTR _topo$[ebp]
  0008f	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00092	3b 51 14	 cmp	 edx, DWORD PTR [ecx+20]
  00095	73 2f		 jae	 SHORT $LN3@freeTopo

; 2774 :         {
; 2775 :             edgeList = *((topo->edges) + i);

  00097	8b 45 08	 mov	 eax, DWORD PTR _topo$[ebp]
  0009a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009c	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0009f	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  000a2	89 45 f8	 mov	 DWORD PTR _edgeList$1[ebp], eax

; 2776 :             if  (edgeList != NULL)

  000a5	83 7d f8 00	 cmp	 DWORD PTR _edgeList$1[ebp], 0
  000a9	74 19		 je	 SHORT $LN8@freeTopo

; 2777 :             {
; 2778 :                 edgeList->free(edgeList);

  000ab	8b f4		 mov	 esi, esp
  000ad	8b 4d f8	 mov	 ecx, DWORD PTR _edgeList$1[ebp]
  000b0	51		 push	 ecx
  000b1	8b 55 f8	 mov	 edx, DWORD PTR _edgeList$1[ebp]
  000b4	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  000b7	ff d0		 call	 eax
  000b9	83 c4 04	 add	 esp, 4
  000bc	3b f4		 cmp	 esi, esp
  000be	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c3	90		 npad	 1
$LN8@freeTopo:

; 2779 :             }
; 2780 :         }

  000c4	eb bd		 jmp	 SHORT $LN2@freeTopo
$LN3@freeTopo:

; 2781 : 
; 2782 :         ANTLR3_FREE(topo->edges);

  000c6	8b f4		 mov	 esi, esp
  000c8	8b 4d 08	 mov	 ecx, DWORD PTR _topo$[ebp]
  000cb	8b 11		 mov	 edx, DWORD PTR [ecx]
  000cd	52		 push	 edx
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  000d4	83 c4 04	 add	 esp, 4
  000d7	3b f4		 cmp	 esi, esp
  000d9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000de	90		 npad	 1
$LN7@freeTopo:

; 2783 :     }
; 2784 :     topo->edges = NULL;

  000df	8b 45 08	 mov	 eax, DWORD PTR _topo$[ebp]
  000e2	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 2785 :     
; 2786 :     // Free any cycle map
; 2787 :     //
; 2788 :     if  (topo->cycle != NULL)

  000e8	8b 4d 08	 mov	 ecx, DWORD PTR _topo$[ebp]
  000eb	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  000ef	74 1a		 je	 SHORT $LN9@freeTopo

; 2789 :     {
; 2790 :         ANTLR3_FREE(topo->cycle);

  000f1	8b f4		 mov	 esi, esp
  000f3	8b 55 08	 mov	 edx, DWORD PTR _topo$[ebp]
  000f6	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000f9	50		 push	 eax
  000fa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00100	83 c4 04	 add	 esp, 4
  00103	3b f4		 cmp	 esi, esp
  00105	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010a	90		 npad	 1
$LN9@freeTopo:

; 2791 :     }
; 2792 : 
; 2793 :     ANTLR3_FREE(topo);

  0010b	8b f4		 mov	 esi, esp
  0010d	8b 4d 08	 mov	 ecx, DWORD PTR _topo$[ebp]
  00110	51		 push	 ecx
  00111	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00117	83 c4 04	 add	 esp, 4
  0011a	3b f4		 cmp	 esi, esp
  0011c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00121	90		 npad	 1

; 2794 : }

  00122	5e		 pop	 esi
  00123	83 c4 08	 add	 esp, 8
  00126	3b ec		 cmp	 ebp, esp
  00128	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012d	8b e5		 mov	 esp, ebp
  0012f	5d		 pop	 ebp
  00130	c3		 ret	 0
_freeTopo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _sortVector
_TEXT	SEGMENT
_ind$1 = -12						; size = 4
_vIndex$ = -8						; size = 4
_i$ = -4						; size = 4
_topo$ = 8						; size = 4
_v$ = 12						; size = 4
_sortVector PROC					; COMDAT

; 2640 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 2641 :     // To sort a vector, we first perform the
; 2642 :     // sort to an array, then use the results to reorder the vector
; 2643 :     // we are given. This is just a convenience routine that allows you to
; 2644 :     // sort the children of a tree node into topological order before or
; 2645 :     // during an AST walk. This can be useful for optimizations that require
; 2646 :     // dag reorders and also when the input stream defines things that are
; 2647 :     // interdependent and you want to walk the list of the generated trees
; 2648 :     // for those things in topological order so you can ignore the interdependencies
; 2649 :     // at that point.
; 2650 :     //
; 2651 :     ANTLR3_UINT32 i;
; 2652 : 
; 2653 :     // Used as a lookup index to find the current location in the vector of
; 2654 :     // the vector entry that was originally at position [0], [1], [2] etc
; 2655 :     //
; 2656 :     pANTLR3_UINT32  vIndex;
; 2657 : 
; 2658 :     // Sort into an array, then we can use the array that is
; 2659 :     // stored in the topo
; 2660 :     //
; 2661 :     if  (topo->sortToArray(topo) == 0)

  0001c	8b f4		 mov	 esi, esp
  0001e	8b 45 08	 mov	 eax, DWORD PTR _topo$[ebp]
  00021	50		 push	 eax
  00022	8b 4d 08	 mov	 ecx, DWORD PTR _topo$[ebp]
  00025	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00028	ff d2		 call	 edx
  0002a	83 c4 04	 add	 esp, 4
  0002d	3b f4		 cmp	 esi, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	85 c0		 test	 eax, eax
  00036	75 05		 jne	 SHORT $LN8@sortVector

; 2662 :     {
; 2663 :         return;     // There were no edges

  00038	e9 2b 01 00 00	 jmp	 $LN1@sortVector
$LN8@sortVector:

; 2664 :     }
; 2665 : 
; 2666 :     if  (topo->hasCycle == ANTLR3_TRUE)

  0003d	8b 45 08	 mov	 eax, DWORD PTR _topo$[ebp]
  00040	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00044	83 f9 01	 cmp	 ecx, 1
  00047	75 05		 jne	 SHORT $LN9@sortVector

; 2667 :     {
; 2668 :         return;  // Do nothing if we detected a cycle

  00049	e9 1a 01 00 00	 jmp	 $LN1@sortVector
$LN9@sortVector:

; 2669 :     }
; 2670 : 
; 2671 :     // Ensure that the vector we are sorting is at least as big as the
; 2672 :     // the input sequence we were asked to sort. It does not matter if it is
; 2673 :     // bigger as that probably just means that nodes numbered higher than the
; 2674 :     // limit had no dependencies and so can be left alone.
; 2675 :     //
; 2676 :     if  (topo->limit > v->count)

  0004e	8b 55 08	 mov	 edx, DWORD PTR _topo$[ebp]
  00051	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  00054	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  00057	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0005a	76 0c		 jbe	 SHORT $LN10@sortVector

; 2677 :     {
; 2678 :         // We can only sort the entries that we have dude! The caller is
; 2679 :         // responsible for ensuring the vector is the correct one and is the
; 2680 :         // correct size etc.
; 2681 :         //
; 2682 :         topo->limit = v->count;

  0005c	8b 55 08	 mov	 edx, DWORD PTR _topo$[ebp]
  0005f	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  00062	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00065	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
$LN10@sortVector:

; 2683 :     }
; 2684 :     // We need to know the locations of each of the entries
; 2685 :     // in the vector as we don't want to duplicate them in a new vector. We
; 2686 :     // just use an indirection table to get the vector entry for a particular sequence
; 2687 :     // according to where we moved it last. Then we can just swap vector entries until
; 2688 :     // we are done :-)
; 2689 :     //
; 2690 :     vIndex = (pANTLR3_UINT32)ANTLR3_MALLOC(topo->limit * sizeof(ANTLR3_UINT32));

  00068	8b 55 08	 mov	 edx, DWORD PTR _topo$[ebp]
  0006b	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0006e	c1 e0 02	 shl	 eax, 2
  00071	8b f4		 mov	 esi, esp
  00073	50		 push	 eax
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0007a	83 c4 04	 add	 esp, 4
  0007d	3b f4		 cmp	 esi, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	89 45 f8	 mov	 DWORD PTR _vIndex$[ebp], eax

; 2691 : 	if (vIndex == NULL)

  00087	83 7d f8 00	 cmp	 DWORD PTR _vIndex$[ebp], 0
  0008b	75 05		 jne	 SHORT $LN11@sortVector

; 2692 : 	{
; 2693 : 		// malloc failed
; 2694 : 		return;

  0008d	e9 d6 00 00 00	 jmp	 $LN1@sortVector
$LN11@sortVector:

; 2695 : 	}
; 2696 : 
; 2697 :     // Start index, each vector entry is located where you think it is
; 2698 :     //
; 2699 :     for (i = 0; i < topo->limit; i++)

  00092	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00099	eb 09		 jmp	 SHORT $LN4@sortVector
$LN2@sortVector:
  0009b	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0009e	83 c1 01	 add	 ecx, 1
  000a1	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$LN4@sortVector:
  000a4	8b 55 08	 mov	 edx, DWORD PTR _topo$[ebp]
  000a7	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000aa	3b 42 14	 cmp	 eax, DWORD PTR [edx+20]
  000ad	73 0e		 jae	 SHORT $LN3@sortVector

; 2700 :     {
; 2701 :         vIndex[i] = i;

  000af	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000b2	8b 55 f8	 mov	 edx, DWORD PTR _vIndex$[ebp]
  000b5	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000b8	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 2702 :     }

  000bb	eb de		 jmp	 SHORT $LN2@sortVector
$LN3@sortVector:

; 2703 : 
; 2704 :     // Now we traverse the sorted array and moved the entries of
; 2705 :     // the vector around according to the sort order and the indirection
; 2706 :     // table we just created. The index telsl us where in the vector the
; 2707 :     // original element entry n is now located via vIndex[n].
; 2708 :     //
; 2709 :     for (i=0; i < topo->limit; i++)

  000bd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000c4	eb 09		 jmp	 SHORT $LN7@sortVector
$LN5@sortVector:
  000c6	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000c9	83 c1 01	 add	 ecx, 1
  000cc	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
$LN7@sortVector:
  000cf	8b 55 08	 mov	 edx, DWORD PTR _topo$[ebp]
  000d2	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000d5	3b 42 14	 cmp	 eax, DWORD PTR [edx+20]
  000d8	73 77		 jae	 SHORT $LN6@sortVector

; 2710 :     {
; 2711 :         ANTLR3_UINT32   ind;
; 2712 : 
; 2713 :         // If the vector entry at i is already the one that it
; 2714 :         // should be, then we skip moving it of course.
; 2715 :         //
; 2716 :         if  (vIndex[topo->sorted[i]] == i)

  000da	8b 4d 08	 mov	 ecx, DWORD PTR _topo$[ebp]
  000dd	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000e0	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000e3	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  000e6	8b 55 f8	 mov	 edx, DWORD PTR _vIndex$[ebp]
  000e9	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  000ec	3b 45 fc	 cmp	 eax, DWORD PTR _i$[ebp]
  000ef	75 02		 jne	 SHORT $LN12@sortVector

; 2717 :         {
; 2718 :             continue;

  000f1	eb d3		 jmp	 SHORT $LN5@sortVector
$LN12@sortVector:

; 2719 :         }
; 2720 : 
; 2721 :         // The vector entry at i, should be replaced with the
; 2722 :         // vector entry indicated by topo->sorted[i]. The vector entry
; 2723 :         // at topo->sorted[i] may have already been swapped out though, so we
; 2724 :         // find where it is now and move it from there to i.
; 2725 :         //
; 2726 :         ind     = vIndex[topo->sorted[i]];

  000f3	8b 4d 08	 mov	 ecx, DWORD PTR _topo$[ebp]
  000f6	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000f9	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000fc	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  000ff	8b 55 f8	 mov	 edx, DWORD PTR _vIndex$[ebp]
  00102	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00105	89 45 f4	 mov	 DWORD PTR _ind$1[ebp], eax

; 2727 :         v->swap(v, i, ind);

  00108	8b f4		 mov	 esi, esp
  0010a	8b 4d f4	 mov	 ecx, DWORD PTR _ind$1[ebp]
  0010d	51		 push	 ecx
  0010e	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00111	52		 push	 edx
  00112	8b 45 0c	 mov	 eax, DWORD PTR _v$[ebp]
  00115	50		 push	 eax
  00116	8b 4d 0c	 mov	 ecx, DWORD PTR _v$[ebp]
  00119	8b 91 a4 00 00
	00		 mov	 edx, DWORD PTR [ecx+164]
  0011f	ff d2		 call	 edx
  00121	83 c4 0c	 add	 esp, 12			; 0000000cH
  00124	3b f4		 cmp	 esi, esp
  00126	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2728 : 
; 2729 :         // Update our index. The element at i is now the one we wanted
; 2730 :         // to be sorted here and the element we swapped out is now the
; 2731 :         // element that was at i just before we swapped it. If you are lost now
; 2732 :         // don't worry about it, we are just reindexing on the fly is all.
; 2733 :         //
; 2734 :         vIndex[topo->sorted[i]] = i;

  0012b	8b 45 08	 mov	 eax, DWORD PTR _topo$[ebp]
  0012e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00131	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00134	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00137	8b 4d f8	 mov	 ecx, DWORD PTR _vIndex$[ebp]
  0013a	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0013d	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 2735 :         vIndex[i] = ind;

  00140	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00143	8b 4d f8	 mov	 ecx, DWORD PTR _vIndex$[ebp]
  00146	8b 55 f4	 mov	 edx, DWORD PTR _ind$1[ebp]
  00149	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 2736 :     }

  0014c	e9 75 ff ff ff	 jmp	 $LN5@sortVector
$LN6@sortVector:

; 2737 : 
; 2738 :     // Having traversed all the entries, we have sorted the vector in place.
; 2739 :     //
; 2740 :     ANTLR3_FREE(vIndex);

  00151	8b f4		 mov	 esi, esp
  00153	8b 45 f8	 mov	 eax, DWORD PTR _vIndex$[ebp]
  00156	50		 push	 eax
  00157	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0015d	83 c4 04	 add	 esp, 4
  00160	3b f4		 cmp	 esi, esp
  00162	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00167	90		 npad	 1
$LN1@sortVector:

; 2741 :     return;
; 2742 : }

  00168	5e		 pop	 esi
  00169	83 c4 0c	 add	 esp, 12			; 0000000cH
  0016c	3b ec		 cmp	 ebp, esp
  0016e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00173	8b e5		 mov	 esp, ebp
  00175	5d		 pop	 ebp
  00176	c3		 ret	 0
_sortVector ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _sortToArray
_TEXT	SEGMENT
_oldLimit$ = -8						; size = 4
_v$ = -4						; size = 4
_topo$ = 8						; size = 4
_sortToArray PROC					; COMDAT

; 2564 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 2565 :     ANTLR3_UINT32 v;
; 2566 :     ANTLR3_UINT32 oldLimit;
; 2567 : 
; 2568 :     // Guard against being called with no edges defined
; 2569 :     //
; 2570 :     if  (topo->edges == NULL)

  00015	8b 45 08	 mov	 eax, DWORD PTR _topo$[ebp]
  00018	83 38 00	 cmp	 DWORD PTR [eax], 0
  0001b	75 07		 jne	 SHORT $LN5@sortToArra

; 2571 :     {
; 2572 :         return NULL;

  0001d	33 c0		 xor	 eax, eax
  0001f	e9 f9 00 00 00	 jmp	 $LN1@sortToArra
$LN5@sortToArra:

; 2573 :     }
; 2574 :     // First we need a vector to populate with enough
; 2575 :     // entries to accommodate the sorted list and another to accommodate
; 2576 :     // the maximum cycle we could detect which is all nodes such as 0->1->2->3->0
; 2577 :     //
; 2578 :     topo->sorted    = (pANTLR3_UINT32)ANTLR3_MALLOC(topo->limit * sizeof(ANTLR3_UINT32));

  00024	8b 4d 08	 mov	 ecx, DWORD PTR _topo$[ebp]
  00027	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0002a	c1 e2 02	 shl	 edx, 2
  0002d	8b f4		 mov	 esi, esp
  0002f	52		 push	 edx
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00036	83 c4 04	 add	 esp, 4
  00039	3b f4		 cmp	 esi, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _topo$[ebp]
  00043	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 2579 : 	if (topo->sorted == NULL)

  00046	8b 55 08	 mov	 edx, DWORD PTR _topo$[ebp]
  00049	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  0004d	75 07		 jne	 SHORT $LN6@sortToArra

; 2580 : 	{
; 2581 : 		return NULL;

  0004f	33 c0		 xor	 eax, eax
  00051	e9 c7 00 00 00	 jmp	 $LN1@sortToArra
$LN6@sortToArra:

; 2582 : 	}
; 2583 :     topo->cycle     = (pANTLR3_UINT32)ANTLR3_MALLOC(topo->limit * sizeof(ANTLR3_UINT32));

  00056	8b 45 08	 mov	 eax, DWORD PTR _topo$[ebp]
  00059	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0005c	c1 e1 02	 shl	 ecx, 2
  0005f	8b f4		 mov	 esi, esp
  00061	51		 push	 ecx
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00068	83 c4 04	 add	 esp, 4
  0006b	3b f4		 cmp	 esi, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b 55 08	 mov	 edx, DWORD PTR _topo$[ebp]
  00075	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 2584 : 	if (topo->cycle == NULL)

  00078	8b 45 08	 mov	 eax, DWORD PTR _topo$[ebp]
  0007b	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0007f	75 07		 jne	 SHORT $LN7@sortToArra

; 2585 : 	{
; 2586 : 		return NULL;

  00081	33 c0		 xor	 eax, eax
  00083	e9 95 00 00 00	 jmp	 $LN1@sortToArra
$LN7@sortToArra:

; 2587 : 	}
; 2588 : 
; 2589 :     // Next we need an empty bitset to show whether we have visited a node
; 2590 :     // or not. This is the bit that gives us linear time of course as we are essentially
; 2591 :     // dropping through the nodes in depth first order and when we get to a node that
; 2592 :     // has no edges, we pop back up the stack adding the nodes we traversed in reverse
; 2593 :     // order.
; 2594 :     //
; 2595 :     topo->visited   = antlr3BitsetNew(0);

  00088	6a 00		 push	 0
  0008a	e8 00 00 00 00	 call	 _antlr3BitsetNew
  0008f	83 c4 04	 add	 esp, 4
  00092	8b 4d 08	 mov	 ecx, DWORD PTR _topo$[ebp]
  00095	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 2596 : 
; 2597 :     // Now traverse the nodes as if we were just going left to right, but
; 2598 :     // then descend each node unless it has already been visited.
; 2599 :     //
; 2600 :     oldLimit    = topo->limit;     // Number of nodes to traverse linearly

  00098	8b 55 08	 mov	 edx, DWORD PTR _topo$[ebp]
  0009b	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0009e	89 45 f8	 mov	 DWORD PTR _oldLimit$[ebp], eax

; 2601 :     topo->limit = 0;               // Next entry in the sorted table

  000a1	8b 4d 08	 mov	 ecx, DWORD PTR _topo$[ebp]
  000a4	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 2602 : 
; 2603 :     for (v = 0; v < oldLimit; v++)

  000ab	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _v$[ebp], 0
  000b2	eb 09		 jmp	 SHORT $LN4@sortToArra
$LN2@sortToArra:
  000b4	8b 55 fc	 mov	 edx, DWORD PTR _v$[ebp]
  000b7	83 c2 01	 add	 edx, 1
  000ba	89 55 fc	 mov	 DWORD PTR _v$[ebp], edx
$LN4@sortToArra:
  000bd	8b 45 fc	 mov	 eax, DWORD PTR _v$[ebp]
  000c0	3b 45 f8	 cmp	 eax, DWORD PTR _oldLimit$[ebp]
  000c3	73 49		 jae	 SHORT $LN3@sortToArra

; 2604 :     {
; 2605 :         // If we did not already visit this node, then descend it until we
; 2606 :         // get a node without edges or arrive at a node we have already visited.
; 2607 :         //
; 2608 :         if  (topo->visited->isMember(topo->visited, v) == ANTLR3_FALSE)

  000c5	8b f4		 mov	 esi, esp
  000c7	8b 4d fc	 mov	 ecx, DWORD PTR _v$[ebp]
  000ca	51		 push	 ecx
  000cb	8b 55 08	 mov	 edx, DWORD PTR _topo$[ebp]
  000ce	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  000d1	50		 push	 eax
  000d2	8b 4d 08	 mov	 ecx, DWORD PTR _topo$[ebp]
  000d5	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  000d8	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000db	ff d0		 call	 eax
  000dd	83 c4 08	 add	 esp, 8
  000e0	3b f4		 cmp	 esi, esp
  000e2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e7	0f b6 c8	 movzx	 ecx, al
  000ea	85 c9		 test	 ecx, ecx
  000ec	75 10		 jne	 SHORT $LN8@sortToArra

; 2609 :         {
; 2610 :             // We have not visited this one so descend it
; 2611 :             //
; 2612 :             DFS(topo, v);

  000ee	8b 55 fc	 mov	 edx, DWORD PTR _v$[ebp]
  000f1	52		 push	 edx
  000f2	8b 45 08	 mov	 eax, DWORD PTR _topo$[ebp]
  000f5	50		 push	 eax
  000f6	e8 00 00 00 00	 call	 _DFS
  000fb	83 c4 08	 add	 esp, 8
$LN8@sortToArra:

; 2613 :         }
; 2614 : 
; 2615 :         // Break the loop if we detect a cycle as we have no need to go any
; 2616 :         // further
; 2617 :         //
; 2618 :         if  (topo->hasCycle == ANTLR3_TRUE)

  000fe	8b 4d 08	 mov	 ecx, DWORD PTR _topo$[ebp]
  00101	0f b6 51 0c	 movzx	 edx, BYTE PTR [ecx+12]
  00105	83 fa 01	 cmp	 edx, 1
  00108	75 02		 jne	 SHORT $LN9@sortToArra

; 2619 :         {
; 2620 :             break;

  0010a	eb 02		 jmp	 SHORT $LN3@sortToArra
$LN9@sortToArra:

; 2621 :         }
; 2622 :     }

  0010c	eb a6		 jmp	 SHORT $LN2@sortToArra
$LN3@sortToArra:

; 2623 : 
; 2624 :     // Reset the limit to the number we recorded as if we hit a
; 2625 :     // cycle, then limit will have stopped at the node where we
; 2626 :     // discovered the cycle, but in order to free the edge bitmaps
; 2627 :     // we need to know how many we may have allocated and traverse them all.
; 2628 :     //
; 2629 :     topo->limit = oldLimit;

  0010e	8b 45 08	 mov	 eax, DWORD PTR _topo$[ebp]
  00111	8b 4d f8	 mov	 ecx, DWORD PTR _oldLimit$[ebp]
  00114	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 2630 : 
; 2631 :     // Having traversed all the nodes we were given, we
; 2632 :     // are guaranteed to have ordered all the nodes or detected a
; 2633 :     // cycle.
; 2634 :     //
; 2635 :     return topo->sorted;

  00117	8b 55 08	 mov	 edx, DWORD PTR _topo$[ebp]
  0011a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
$LN1@sortToArra:

; 2636 : }

  0011d	5e		 pop	 esi
  0011e	83 c4 08	 add	 esp, 8
  00121	3b ec		 cmp	 ebp, esp
  00123	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00128	8b e5		 mov	 esp, ebp
  0012a	5d		 pop	 ebp
  0012b	c3		 ret	 0
_sortToArray ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _addEdge
_TEXT	SEGMENT
_edgeDeps$ = -12					; size = 4
_maxEdge$ = -8						; size = 4
_i$ = -4						; size = 4
_topo$ = 8						; size = 4
_edge$ = 12						; size = 4
_dependency$ = 16					; size = 4
_addEdge PROC						; COMDAT

; 2357 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 2358 :     ANTLR3_UINT32   i;
; 2359 :     ANTLR3_UINT32   maxEdge;
; 2360 :     pANTLR3_BITSET  edgeDeps;
; 2361 : 
; 2362 :     if (edge>dependency)

  0001c	8b 45 0c	 mov	 eax, DWORD PTR _edge$[ebp]
  0001f	3b 45 10	 cmp	 eax, DWORD PTR _dependency$[ebp]
  00022	76 08		 jbe	 SHORT $LN5@addEdge

; 2363 :     {
; 2364 :         maxEdge = edge;

  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _edge$[ebp]
  00027	89 4d f8	 mov	 DWORD PTR _maxEdge$[ebp], ecx

; 2365 :     }

  0002a	eb 06		 jmp	 SHORT $LN6@addEdge
$LN5@addEdge:

; 2366 :     else
; 2367 :     {
; 2368 :         maxEdge = dependency;

  0002c	8b 55 10	 mov	 edx, DWORD PTR _dependency$[ebp]
  0002f	89 55 f8	 mov	 DWORD PTR _maxEdge$[ebp], edx
$LN6@addEdge:

; 2369 :     }
; 2370 :     // We need to add an edge to says that the node indexed by 'edge' is
; 2371 :     // dependent on the node indexed by 'dependency'
; 2372 :     //
; 2373 : 
; 2374 :     // First see if we have enough room in the edges array to add the edge?
; 2375 :     //
; 2376 :     if (topo->edges == NULL)

  00032	8b 45 08	 mov	 eax, DWORD PTR _topo$[ebp]
  00035	83 38 00	 cmp	 DWORD PTR [eax], 0
  00038	75 3f		 jne	 SHORT $LN7@addEdge

; 2377 :     {
; 2378 :         // We don't have any edges yet, so create an array to hold them
; 2379 :         //
; 2380 :         topo->edges = (pANTLR3_BITSET*)ANTLR3_CALLOC(sizeof(pANTLR3_BITSET) * (maxEdge + 1), 1);

  0003a	8b f4		 mov	 esi, esp
  0003c	6a 01		 push	 1
  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _maxEdge$[ebp]
  00041	8d 14 8d 04 00
	00 00		 lea	 edx, DWORD PTR [ecx*4+4]
  00048	52		 push	 edx
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  0004f	83 c4 08	 add	 esp, 8
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b 4d 08	 mov	 ecx, DWORD PTR _topo$[ebp]
  0005c	89 01		 mov	 DWORD PTR [ecx], eax

; 2381 :         if (topo->edges == NULL)

  0005e	8b 55 08	 mov	 edx, DWORD PTR _topo$[ebp]
  00061	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00064	75 05		 jne	 SHORT $LN9@addEdge

; 2382 :         {
; 2383 :             return;

  00066	e9 e5 00 00 00	 jmp	 $LN1@addEdge
$LN9@addEdge:

; 2384 :         }
; 2385 : 
; 2386 :         // Set the limit to what we have now
; 2387 :         //
; 2388 :         topo->limit = maxEdge + 1;

  0006b	8b 45 f8	 mov	 eax, DWORD PTR _maxEdge$[ebp]
  0006e	83 c0 01	 add	 eax, 1
  00071	8b 4d 08	 mov	 ecx, DWORD PTR _topo$[ebp]
  00074	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 2389 :     }

  00077	eb 79		 jmp	 SHORT $LN10@addEdge
$LN7@addEdge:

; 2390 :     else if (topo->limit <= maxEdge)

  00079	8b 55 08	 mov	 edx, DWORD PTR _topo$[ebp]
  0007c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0007f	3b 45 f8	 cmp	 eax, DWORD PTR _maxEdge$[ebp]
  00082	77 6e		 ja	 SHORT $LN10@addEdge

; 2391 :     {
; 2392 :         // WE have some edges but not enough
; 2393 :         //
; 2394 :         topo->edges = (pANTLR3_BITSET*)ANTLR3_REALLOC(topo->edges, sizeof(pANTLR3_BITSET) * (maxEdge + 1));

  00084	8b 4d f8	 mov	 ecx, DWORD PTR _maxEdge$[ebp]
  00087	8d 14 8d 04 00
	00 00		 lea	 edx, DWORD PTR [ecx*4+4]
  0008e	8b f4		 mov	 esi, esp
  00090	52		 push	 edx
  00091	8b 45 08	 mov	 eax, DWORD PTR _topo$[ebp]
  00094	8b 08		 mov	 ecx, DWORD PTR [eax]
  00096	51		 push	 ecx
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__realloc
  0009d	83 c4 08	 add	 esp, 8
  000a0	3b f4		 cmp	 esi, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a7	8b 55 08	 mov	 edx, DWORD PTR _topo$[ebp]
  000aa	89 02		 mov	 DWORD PTR [edx], eax

; 2395 :         if (topo->edges == NULL)

  000ac	8b 45 08	 mov	 eax, DWORD PTR _topo$[ebp]
  000af	83 38 00	 cmp	 DWORD PTR [eax], 0
  000b2	75 05		 jne	 SHORT $LN11@addEdge

; 2396 :         {
; 2397 :             return;

  000b4	e9 97 00 00 00	 jmp	 $LN1@addEdge
$LN11@addEdge:

; 2398 :         }
; 2399 : 
; 2400 :         // Initialize the new bitmaps to ;indicate we have no edges defined yet
; 2401 :         //
; 2402 :         for (i = topo->limit; i <= maxEdge; i++)

  000b9	8b 4d 08	 mov	 ecx, DWORD PTR _topo$[ebp]
  000bc	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000bf	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
  000c2	eb 09		 jmp	 SHORT $LN4@addEdge
$LN2@addEdge:
  000c4	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000c7	83 c0 01	 add	 eax, 1
  000ca	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@addEdge:
  000cd	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000d0	3b 4d f8	 cmp	 ecx, DWORD PTR _maxEdge$[ebp]
  000d3	77 11		 ja	 SHORT $LN3@addEdge

; 2403 :         {
; 2404 :             *((topo->edges) + i) = NULL;

  000d5	8b 55 08	 mov	 edx, DWORD PTR _topo$[ebp]
  000d8	8b 02		 mov	 eax, DWORD PTR [edx]
  000da	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000dd	c7 04 88 00 00
	00 00		 mov	 DWORD PTR [eax+ecx*4], 0

; 2405 :         }

  000e4	eb de		 jmp	 SHORT $LN2@addEdge
$LN3@addEdge:

; 2406 : 
; 2407 :         // Set the limit to what we have now
; 2408 :         //
; 2409 :         topo->limit = maxEdge + 1;

  000e6	8b 55 f8	 mov	 edx, DWORD PTR _maxEdge$[ebp]
  000e9	83 c2 01	 add	 edx, 1
  000ec	8b 45 08	 mov	 eax, DWORD PTR _topo$[ebp]
  000ef	89 50 14	 mov	 DWORD PTR [eax+20], edx
$LN10@addEdge:

; 2410 :     }
; 2411 : 
; 2412 :     // If the edge was flagged as depending on itself, then we just
; 2413 :     // do nothing as it means this routine was just called to add it
; 2414 :     // in to the list of nodes.
; 2415 :     //
; 2416 :     if  (edge == dependency)

  000f2	8b 4d 0c	 mov	 ecx, DWORD PTR _edge$[ebp]
  000f5	3b 4d 10	 cmp	 ecx, DWORD PTR _dependency$[ebp]
  000f8	75 02		 jne	 SHORT $LN12@addEdge

; 2417 :     {
; 2418 :         return;

  000fa	eb 54		 jmp	 SHORT $LN1@addEdge
$LN12@addEdge:

; 2419 :     }
; 2420 : 
; 2421 :     // Pick up the bit map for the requested edge
; 2422 :     //
; 2423 :     edgeDeps = *((topo->edges) + edge);

  000fc	8b 55 08	 mov	 edx, DWORD PTR _topo$[ebp]
  000ff	8b 02		 mov	 eax, DWORD PTR [edx]
  00101	8b 4d 0c	 mov	 ecx, DWORD PTR _edge$[ebp]
  00104	8b 14 88	 mov	 edx, DWORD PTR [eax+ecx*4]
  00107	89 55 f4	 mov	 DWORD PTR _edgeDeps$[ebp], edx

; 2424 : 
; 2425 :     if  (edgeDeps == NULL)

  0010a	83 7d f4 00	 cmp	 DWORD PTR _edgeDeps$[ebp], 0
  0010e	75 23		 jne	 SHORT $LN14@addEdge

; 2426 :     {
; 2427 :         // No edges are defined yet for this node
; 2428 :         //
; 2429 :         edgeDeps                = antlr3BitsetNew(0);

  00110	6a 00		 push	 0
  00112	e8 00 00 00 00	 call	 _antlr3BitsetNew
  00117	83 c4 04	 add	 esp, 4
  0011a	89 45 f4	 mov	 DWORD PTR _edgeDeps$[ebp], eax

; 2430 :         *((topo->edges) + edge) = edgeDeps;

  0011d	8b 45 08	 mov	 eax, DWORD PTR _topo$[ebp]
  00120	8b 08		 mov	 ecx, DWORD PTR [eax]
  00122	8b 55 0c	 mov	 edx, DWORD PTR _edge$[ebp]
  00125	8b 45 f4	 mov	 eax, DWORD PTR _edgeDeps$[ebp]
  00128	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 2431 :         if (edgeDeps == NULL )

  0012b	83 7d f4 00	 cmp	 DWORD PTR _edgeDeps$[ebp], 0
  0012f	75 02		 jne	 SHORT $LN14@addEdge

; 2432 :         {
; 2433 :             return;  // Out of memory

  00131	eb 1d		 jmp	 SHORT $LN1@addEdge
$LN14@addEdge:

; 2434 :         }
; 2435 :     }
; 2436 : 
; 2437 :     // Set the bit in the bitmap that corresponds to the requested
; 2438 :     // dependency.
; 2439 :     //
; 2440 :     edgeDeps->add(edgeDeps, dependency);

  00133	8b f4		 mov	 esi, esp
  00135	8b 4d 10	 mov	 ecx, DWORD PTR _dependency$[ebp]
  00138	51		 push	 ecx
  00139	8b 55 f4	 mov	 edx, DWORD PTR _edgeDeps$[ebp]
  0013c	52		 push	 edx
  0013d	8b 45 f4	 mov	 eax, DWORD PTR _edgeDeps$[ebp]
  00140	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00143	ff d1		 call	 ecx
  00145	83 c4 08	 add	 esp, 8
  00148	3b f4		 cmp	 esi, esp
  0014a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0014f	90		 npad	 1
$LN1@addEdge:

; 2441 : 
; 2442 :     // And we are all set
; 2443 :     //
; 2444 :     return;
; 2445 : }

  00150	5e		 pop	 esi
  00151	83 c4 0c	 add	 esp, 12			; 0000000cH
  00154	3b ec		 cmp	 ebp, esp
  00156	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015b	8b e5		 mov	 esp, ebp
  0015d	5d		 pop	 ebp
  0015e	c3		 ret	 0
_addEdge ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _intTrieFree
_TEXT	SEGMENT
_trie$ = 8						; size = 4
_intTrieFree PROC					; COMDAT

; 2290 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2291 :     /* Descend from the root and free all the nodes
; 2292 :      */
; 2293 :     freeIntNode(trie->root);

  00004	8b 45 08	 mov	 eax, DWORD PTR _trie$[ebp]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	51		 push	 ecx
  0000a	e8 00 00 00 00	 call	 _freeIntNode
  0000f	83 c4 04	 add	 esp, 4

; 2294 : 
; 2295 :     /* the nodes are all gone now, so we need only free the memory
; 2296 :      * for the structure itself
; 2297 :      */
; 2298 :     ANTLR3_FREE(trie);

  00012	8b f4		 mov	 esi, esp
  00014	8b 55 08	 mov	 edx, DWORD PTR _trie$[ebp]
  00017	52		 push	 edx
  00018	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0001e	83 c4 04	 add	 esp, 4
  00021	3b f4		 cmp	 esi, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	90		 npad	 1

; 2299 : }

  00029	5e		 pop	 esi
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
_intTrieFree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _intTrieAdd
_TEXT	SEGMENT
tv370 = -60						; size = 8
tv350 = -52						; size = 8
tv312 = -44						; size = 8
tv251 = -36						; size = 8
_xorKey$ = -28						; size = 4
_nextEnt$ = -24						; size = 4
_newEnt$ = -20						; size = 4
_depth$ = -16						; size = 4
_entNode$ = -12						; size = 4
_nextNode$ = -8						; size = 4
_thisNode$ = -4						; size = 4
_trie$ = 8						; size = 4
_key$ = 12						; size = 4
_type$ = 16						; size = 4
_intVal$ = 20						; size = 4
_data$ = 24						; size = 4
_freeptr$ = 28						; size = 4
_intTrieAdd PROC					; COMDAT

; 1954 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  0000b	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd

; 1955 : 	pANTLR3_INT_TRIE_NODE   thisNode;
; 1956 : 	pANTLR3_INT_TRIE_NODE   nextNode;
; 1957 : 	pANTLR3_INT_TRIE_NODE   entNode;
; 1958 : 	ANTLR3_UINT32			depth;
; 1959 : 	pANTLR3_TRIE_ENTRY	    newEnt;
; 1960 : 	pANTLR3_TRIE_ENTRY	    nextEnt;
; 1961 : 	ANTLR3_INTKEY		    xorKey;
; 1962 : 
; 1963 : 	/* Cache the bit depth of this trie, which is always the highest index, 
; 1964 : 	 * which is in the root node
; 1965 : 	 */
; 1966 : 	depth   = trie->root->bitNum;

  00017	8b 45 08	 mov	 eax, DWORD PTR _trie$[ebp]
  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001e	89 55 f0	 mov	 DWORD PTR _depth$[ebp], edx

; 1967 : 
; 1968 : 	thisNode	= trie->root;		/* Start with the root node	    */

  00021	8b 45 08	 mov	 eax, DWORD PTR _trie$[ebp]
  00024	8b 08		 mov	 ecx, DWORD PTR [eax]
  00026	89 4d fc	 mov	 DWORD PTR _thisNode$[ebp], ecx

; 1969 : 	nextNode	= trie->root->leftN;	/* And assume we start to the left  */

  00029	8b 55 08	 mov	 edx, DWORD PTR _trie$[ebp]
  0002c	8b 02		 mov	 eax, DWORD PTR [edx]
  0002e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00031	89 4d f8	 mov	 DWORD PTR _nextNode$[ebp], ecx
$LN2@intTrieAdd:

; 1970 : 
; 1971 : 	/* Now find the only node that can be currently reached by the bits in the
; 1972 : 	 * key we are being asked to insert.
; 1973 : 	 */
; 1974 : 	while (thisNode->bitNum  > nextNode->bitNum)

  00034	8b 55 fc	 mov	 edx, DWORD PTR _thisNode$[ebp]
  00037	8b 45 f8	 mov	 eax, DWORD PTR _nextNode$[ebp]
  0003a	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0003c	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0003e	76 42		 jbe	 SHORT $LN3@intTrieAdd

; 1975 : 	{
; 1976 : 		/* Still descending the structure, next node becomes current.
; 1977 : 		 */
; 1978 : 		thisNode = nextNode;

  00040	8b 55 f8	 mov	 edx, DWORD PTR _nextNode$[ebp]
  00043	89 55 fc	 mov	 DWORD PTR _thisNode$[ebp], edx

; 1979 : 
; 1980 : 		if (key & bitMask[nextNode->bitNum])

  00046	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  00049	33 c9		 xor	 ecx, ecx
  0004b	8b 55 f8	 mov	 edx, DWORD PTR _nextNode$[ebp]
  0004e	8b 12		 mov	 edx, DWORD PTR [edx]
  00050	23 04 d5 00 00
	00 00		 and	 eax, DWORD PTR _bitMask[edx*8]
  00057	23 0c d5 04 00
	00 00		 and	 ecx, DWORD PTR _bitMask[edx*8+4]
  0005e	89 45 dc	 mov	 DWORD PTR tv251[ebp], eax
  00061	89 4d e0	 mov	 DWORD PTR tv251[ebp+4], ecx
  00064	8b 45 dc	 mov	 eax, DWORD PTR tv251[ebp]
  00067	0b 45 e0	 or	 eax, DWORD PTR tv251[ebp+4]
  0006a	74 0b		 je	 SHORT $LN8@intTrieAdd

; 1981 : 		{
; 1982 : 			/* Bit at the required index was 1, so travers the right node from here
; 1983 : 			 */
; 1984 : 			nextNode = nextNode->rightN;

  0006c	8b 4d f8	 mov	 ecx, DWORD PTR _nextNode$[ebp]
  0006f	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00072	89 55 f8	 mov	 DWORD PTR _nextNode$[ebp], edx

; 1985 : 		}

  00075	eb 09		 jmp	 SHORT $LN9@intTrieAdd
$LN8@intTrieAdd:

; 1986 : 		else
; 1987 : 		{
; 1988 : 			/* Bit at the required index was 0, so we traverse to the left
; 1989 : 			 */
; 1990 : 			nextNode = nextNode->leftN;

  00077	8b 45 f8	 mov	 eax, DWORD PTR _nextNode$[ebp]
  0007a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0007d	89 4d f8	 mov	 DWORD PTR _nextNode$[ebp], ecx
$LN9@intTrieAdd:

; 1991 : 		}
; 1992 : 	}

  00080	eb b2		 jmp	 SHORT $LN2@intTrieAdd
$LN3@intTrieAdd:

; 1993 : 	/* Here we have located the only node that can be reached by the
; 1994 : 	 * bits in the requested key. It could in fact be that key or the node
; 1995 : 	 * we need to use to insert the new key.
; 1996 : 	 */
; 1997 : 	if (nextNode->key == key)

  00082	8b 55 f8	 mov	 edx, DWORD PTR _nextNode$[ebp]
  00085	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00088	3b 45 0c	 cmp	 eax, DWORD PTR _key$[ebp]
  0008b	0f 85 a6 00 00
	00		 jne	 $LN12@intTrieAdd

; 1998 : 	{
; 1999 : 		/* We have located an exact match, but we will only append to the bucket chain
; 2000 : 		 * if this trie accepts duplicate keys.
; 2001 : 		 */
; 2002 : 		if (trie->allowDups ==ANTLR3_TRUE)

  00091	8b 4d 08	 mov	 ecx, DWORD PTR _trie$[ebp]
  00094	0f b6 51 0c	 movzx	 edx, BYTE PTR [ecx+12]
  00098	83 fa 01	 cmp	 edx, 1
  0009b	0f 85 8f 00 00
	00		 jne	 $LN11@intTrieAdd

; 2003 : 		{
; 2004 : 			/* Yes, we are accepting duplicates
; 2005 : 			 */
; 2006 : 			newEnt = (pANTLR3_TRIE_ENTRY)ANTLR3_CALLOC(1, sizeof(ANTLR3_TRIE_ENTRY));

  000a1	8b f4		 mov	 esi, esp
  000a3	6a 10		 push	 16			; 00000010H
  000a5	6a 01		 push	 1
  000a7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  000ad	83 c4 08	 add	 esp, 8
  000b0	3b f4		 cmp	 esi, esp
  000b2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b7	89 45 ec	 mov	 DWORD PTR _newEnt$[ebp], eax

; 2007 : 
; 2008 : 			if (newEnt == NULL)

  000ba	83 7d ec 00	 cmp	 DWORD PTR _newEnt$[ebp], 0
  000be	75 07		 jne	 SHORT $LN13@intTrieAdd

; 2009 : 			{
; 2010 : 				/* Out of memory, all we can do is return the fact that the insert failed.
; 2011 : 				 */
; 2012 : 				return	ANTLR3_FALSE;

  000c0	32 c0		 xor	 al, al
  000c2	e9 8f 02 00 00	 jmp	 $LN1@intTrieAdd
$LN13@intTrieAdd:

; 2013 : 			}
; 2014 : 
; 2015 : 			/* Otherwise insert this in the chain
; 2016 : 			*/
; 2017 : 			newEnt->type	= type;

  000c7	8b 45 ec	 mov	 eax, DWORD PTR _newEnt$[ebp]
  000ca	8b 4d 10	 mov	 ecx, DWORD PTR _type$[ebp]
  000cd	89 08		 mov	 DWORD PTR [eax], ecx

; 2018 : 			newEnt->freeptr	= freeptr;

  000cf	8b 55 ec	 mov	 edx, DWORD PTR _newEnt$[ebp]
  000d2	8b 45 1c	 mov	 eax, DWORD PTR _freeptr$[ebp]
  000d5	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 2019 : 			if (type == ANTLR3_HASH_TYPE_STR)

  000d8	83 7d 10 01	 cmp	 DWORD PTR _type$[ebp], 1
  000dc	75 0b		 jne	 SHORT $LN14@intTrieAdd

; 2020 : 			{
; 2021 : 				newEnt->data.ptr = data;

  000de	8b 4d ec	 mov	 ecx, DWORD PTR _newEnt$[ebp]
  000e1	8b 55 18	 mov	 edx, DWORD PTR _data$[ebp]
  000e4	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 2022 : 			}

  000e7	eb 09		 jmp	 SHORT $LN15@intTrieAdd
$LN14@intTrieAdd:

; 2023 : 			else
; 2024 : 			{
; 2025 : 				newEnt->data.intVal = intVal;

  000e9	8b 45 ec	 mov	 eax, DWORD PTR _newEnt$[ebp]
  000ec	8b 4d 14	 mov	 ecx, DWORD PTR _intVal$[ebp]
  000ef	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN15@intTrieAdd:

; 2026 : 			}
; 2027 : 
; 2028 : 			/* We want to be able to traverse the stored elements in the order that they were
; 2029 : 			 * added as duplicate keys. We might need to revise this opinion if we end up having many duplicate keys
; 2030 : 			 * as perhaps reverse order is just as good, so long as it is ordered.
; 2031 : 			 */
; 2032 : 			nextEnt = nextNode->buckets;

  000f2	8b 55 f8	 mov	 edx, DWORD PTR _nextNode$[ebp]
  000f5	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000f8	89 45 e8	 mov	 DWORD PTR _nextEnt$[ebp], eax
$LN4@intTrieAdd:

; 2033 : 			while (nextEnt->next != NULL)

  000fb	8b 4d e8	 mov	 ecx, DWORD PTR _nextEnt$[ebp]
  000fe	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00102	74 0b		 je	 SHORT $LN5@intTrieAdd

; 2034 : 			{
; 2035 : 				nextEnt = nextEnt->next;    

  00104	8b 55 e8	 mov	 edx, DWORD PTR _nextEnt$[ebp]
  00107	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0010a	89 45 e8	 mov	 DWORD PTR _nextEnt$[ebp], eax

; 2036 : 			}

  0010d	eb ec		 jmp	 SHORT $LN4@intTrieAdd
$LN5@intTrieAdd:

; 2037 : 			nextEnt->next = newEnt;

  0010f	8b 4d e8	 mov	 ecx, DWORD PTR _nextEnt$[ebp]
  00112	8b 55 ec	 mov	 edx, DWORD PTR _newEnt$[ebp]
  00115	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 2038 : 
; 2039 : 			trie->count++;

  00118	8b 45 08	 mov	 eax, DWORD PTR _trie$[ebp]
  0011b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0011e	83 c1 01	 add	 ecx, 1
  00121	8b 55 08	 mov	 edx, DWORD PTR _trie$[ebp]
  00124	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 2040 : 			return  ANTLR3_TRUE;

  00127	b0 01		 mov	 al, 1
  00129	e9 28 02 00 00	 jmp	 $LN1@intTrieAdd

; 2041 : 		}

  0012e	eb 07		 jmp	 SHORT $LN12@intTrieAdd
$LN11@intTrieAdd:

; 2042 : 		else
; 2043 : 		{
; 2044 : 			/* We found the key is already there and we are not allowed duplicates in this
; 2045 : 			 * trie.
; 2046 : 			 */
; 2047 : 			return  ANTLR3_FALSE;

  00130	32 c0		 xor	 al, al
  00132	e9 1f 02 00 00	 jmp	 $LN1@intTrieAdd
$LN12@intTrieAdd:

; 2048 : 		}
; 2049 : 	}
; 2050 : 
; 2051 : 	/* Here we have discovered the only node that can be reached by the bits in the key
; 2052 : 	 * but we have found that this node is not the key we need to insert. We must find the
; 2053 : 	 * the leftmost bit by which the current key for that node and the new key we are going 
; 2054 : 	 * to insert, differ. While this nested series of ifs may look a bit strange, experimentation
; 2055 : 	 * showed that it allows a machine code path that works well with predicated execution
; 2056 : 	 */
; 2057 : 	xorKey = (key ^ nextNode->key);   /* Gives 1 bits only where they differ then we find the left most 1 bit*/

  00137	8b 45 f8	 mov	 eax, DWORD PTR _nextNode$[ebp]
  0013a	8b 4d 0c	 mov	 ecx, DWORD PTR _key$[ebp]
  0013d	33 48 04	 xor	 ecx, DWORD PTR [eax+4]
  00140	89 4d e4	 mov	 DWORD PTR _xorKey$[ebp], ecx

; 2058 : 
; 2059 : 	/* Most common case is a 32 bit key really
; 2060 : 	 */
; 2061 : #ifdef	ANTLR3_USE_64BIT
; 2062 : 	if	(xorKey & 0xFFFFFFFF00000000)
; 2063 : 	{
; 2064 : 		if  (xorKey & 0xFFFF000000000000)
; 2065 : 		{
; 2066 : 			if	(xorKey & 0xFF00000000000000)
; 2067 : 			{
; 2068 : 				depth = 56 + bitIndex[((xorKey & 0xFF00000000000000)>>56)];
; 2069 : 			}
; 2070 : 			else
; 2071 : 			{
; 2072 : 				depth = 48 + bitIndex[((xorKey & 0x00FF000000000000)>>48)];
; 2073 : 			}
; 2074 : 		}
; 2075 : 		else
; 2076 : 		{
; 2077 : 			if	(xorKey & 0x0000FF0000000000)
; 2078 : 			{
; 2079 : 				depth = 40 + bitIndex[((xorKey & 0x0000FF0000000000)>>40)];
; 2080 : 			}
; 2081 : 			else
; 2082 : 			{
; 2083 : 				depth = 32 + bitIndex[((xorKey & 0x000000FF00000000)>>32)];
; 2084 : 			}
; 2085 : 		}
; 2086 : 	}
; 2087 : 	else
; 2088 : #endif
; 2089 : 	{
; 2090 : 		if  (xorKey & 0x00000000FFFF0000)

  00143	8b 55 e4	 mov	 edx, DWORD PTR _xorKey$[ebp]
  00146	81 e2 00 00 ff
	ff		 and	 edx, -65536		; ffff0000H
  0014c	74 3f		 je	 SHORT $LN16@intTrieAdd

; 2091 : 		{
; 2092 : 			if	(xorKey & 0x00000000FF000000)

  0014e	8b 45 e4	 mov	 eax, DWORD PTR _xorKey$[ebp]
  00151	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  00156	74 1b		 je	 SHORT $LN18@intTrieAdd

; 2093 : 			{
; 2094 : 				depth = 24 + bitIndex[((xorKey & 0x00000000FF000000)>>24)];

  00158	8b 4d e4	 mov	 ecx, DWORD PTR _xorKey$[ebp]
  0015b	81 e1 00 00 00
	ff		 and	 ecx, -16777216		; ff000000H
  00161	c1 e9 18	 shr	 ecx, 24			; 00000018H
  00164	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _bitIndex[ecx]
  0016b	83 c2 18	 add	 edx, 24			; 00000018H
  0016e	89 55 f0	 mov	 DWORD PTR _depth$[ebp], edx

; 2095 : 			}

  00171	eb 18		 jmp	 SHORT $LN19@intTrieAdd
$LN18@intTrieAdd:

; 2096 : 			else
; 2097 : 			{
; 2098 : 				depth = 16 + bitIndex[((xorKey & 0x0000000000FF0000)>>16)];

  00173	8b 45 e4	 mov	 eax, DWORD PTR _xorKey$[ebp]
  00176	25 00 00 ff 00	 and	 eax, 16711680		; 00ff0000H
  0017b	c1 e8 10	 shr	 eax, 16			; 00000010H
  0017e	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _bitIndex[eax]
  00185	83 c1 10	 add	 ecx, 16			; 00000010H
  00188	89 4d f0	 mov	 DWORD PTR _depth$[ebp], ecx
$LN19@intTrieAdd:

; 2099 : 			}
; 2100 : 		}

  0018b	eb 38		 jmp	 SHORT $LN21@intTrieAdd
$LN16@intTrieAdd:

; 2101 : 		else
; 2102 : 		{
; 2103 : 			if	(xorKey & 0x000000000000FF00)

  0018d	8b 55 e4	 mov	 edx, DWORD PTR _xorKey$[ebp]
  00190	81 e2 00 ff 00
	00		 and	 edx, 65280		; 0000ff00H
  00196	74 1a		 je	 SHORT $LN20@intTrieAdd

; 2104 : 			{
; 2105 : 				depth = 8 + bitIndex[((xorKey & 0x0000000000000FF00)>>8)];

  00198	8b 45 e4	 mov	 eax, DWORD PTR _xorKey$[ebp]
  0019b	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  001a0	c1 e8 08	 shr	 eax, 8
  001a3	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _bitIndex[eax]
  001aa	83 c1 08	 add	 ecx, 8
  001ad	89 4d f0	 mov	 DWORD PTR _depth$[ebp], ecx

; 2106 : 			}

  001b0	eb 13		 jmp	 SHORT $LN21@intTrieAdd
$LN20@intTrieAdd:

; 2107 : 			else
; 2108 : 			{
; 2109 : 				depth = bitIndex[xorKey & 0x00000000000000FF];

  001b2	8b 55 e4	 mov	 edx, DWORD PTR _xorKey$[ebp]
  001b5	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  001bb	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _bitIndex[edx]
  001c2	89 45 f0	 mov	 DWORD PTR _depth$[ebp], eax
$LN21@intTrieAdd:

; 2110 : 			}
; 2111 : 		}
; 2112 : 	}
; 2113 : 
; 2114 :     /* We have located the leftmost differing bit, indicated by the depth variable. So, we know what
; 2115 :      * bit index we are to insert the new entry at. There are two cases, being where the two keys
; 2116 :      * differ at a bit position that is not currently part of the bit testing, where they differ on a bit
; 2117 :      * that is currently being skipped in the indexed comparisons, and where they differ on a bit
; 2118 :      * that is merely lower down in the current bit search. If the bit index went bit 4, bit 2 and they differ
; 2119 :      * at bit 3, then we have the "skipped" bit case. But if that chain was Bit 4, Bit 2 and they differ at bit 1
; 2120 :      * then we have the easy bit <pun>.
; 2121 :      *
; 2122 :      * So, set up to descend the tree again, but this time looking for the insert point
; 2123 :      * according to whether we skip the bit that differs or not.
; 2124 :      */
; 2125 :     thisNode	= trie->root;

  001c5	8b 4d 08	 mov	 ecx, DWORD PTR _trie$[ebp]
  001c8	8b 11		 mov	 edx, DWORD PTR [ecx]
  001ca	89 55 fc	 mov	 DWORD PTR _thisNode$[ebp], edx

; 2126 :     entNode	= trie->root->leftN;

  001cd	8b 45 08	 mov	 eax, DWORD PTR _trie$[ebp]
  001d0	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d2	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  001d5	89 55 f4	 mov	 DWORD PTR _entNode$[ebp], edx
$LN6@intTrieAdd:

; 2127 : 
; 2128 :     /* Note the slight difference in the checks here to cover both cases
; 2129 :      */
; 2130 :     while (thisNode->bitNum > entNode->bitNum && entNode->bitNum > depth)

  001d8	8b 45 fc	 mov	 eax, DWORD PTR _thisNode$[ebp]
  001db	8b 4d f4	 mov	 ecx, DWORD PTR _entNode$[ebp]
  001de	8b 10		 mov	 edx, DWORD PTR [eax]
  001e0	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001e2	76 4c		 jbe	 SHORT $LN7@intTrieAdd
  001e4	8b 45 f4	 mov	 eax, DWORD PTR _entNode$[ebp]
  001e7	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e9	3b 4d f0	 cmp	 ecx, DWORD PTR _depth$[ebp]
  001ec	76 42		 jbe	 SHORT $LN7@intTrieAdd

; 2131 :     {
; 2132 : 	/* Still descending the structure, next node becomes current.
; 2133 : 	 */
; 2134 : 	thisNode = entNode;

  001ee	8b 55 f4	 mov	 edx, DWORD PTR _entNode$[ebp]
  001f1	89 55 fc	 mov	 DWORD PTR _thisNode$[ebp], edx

; 2135 : 
; 2136 : 	if (key & bitMask[entNode->bitNum])

  001f4	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  001f7	33 c9		 xor	 ecx, ecx
  001f9	8b 55 f4	 mov	 edx, DWORD PTR _entNode$[ebp]
  001fc	8b 12		 mov	 edx, DWORD PTR [edx]
  001fe	23 04 d5 00 00
	00 00		 and	 eax, DWORD PTR _bitMask[edx*8]
  00205	23 0c d5 04 00
	00 00		 and	 ecx, DWORD PTR _bitMask[edx*8+4]
  0020c	89 45 d4	 mov	 DWORD PTR tv312[ebp], eax
  0020f	89 4d d8	 mov	 DWORD PTR tv312[ebp+4], ecx
  00212	8b 45 d4	 mov	 eax, DWORD PTR tv312[ebp]
  00215	0b 45 d8	 or	 eax, DWORD PTR tv312[ebp+4]
  00218	74 0b		 je	 SHORT $LN22@intTrieAdd

; 2137 : 	{
; 2138 : 	    /* Bit at the required index was 1, so traverse the right node from here
; 2139 : 	     */
; 2140 : 	    entNode = entNode->rightN;

  0021a	8b 4d f4	 mov	 ecx, DWORD PTR _entNode$[ebp]
  0021d	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00220	89 55 f4	 mov	 DWORD PTR _entNode$[ebp], edx

; 2141 : 	}

  00223	eb 09		 jmp	 SHORT $LN23@intTrieAdd
$LN22@intTrieAdd:

; 2142 : 	else
; 2143 : 	{
; 2144 : 	    /* Bit at the required index was 0, so we traverse to the left
; 2145 : 	     */
; 2146 : 	    entNode = entNode->leftN;

  00225	8b 45 f4	 mov	 eax, DWORD PTR _entNode$[ebp]
  00228	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0022b	89 4d f4	 mov	 DWORD PTR _entNode$[ebp], ecx
$LN23@intTrieAdd:

; 2147 : 	}
; 2148 :     }

  0022e	eb a8		 jmp	 SHORT $LN6@intTrieAdd
$LN7@intTrieAdd:

; 2149 : 
; 2150 :     /* We have located the correct insert point for this new key, so we need
; 2151 :      * to allocate our entry and insert it etc.
; 2152 :      */
; 2153 :     nextNode	= (pANTLR3_INT_TRIE_NODE)ANTLR3_CALLOC(1, sizeof(ANTLR3_INT_TRIE_NODE));

  00230	8b f4		 mov	 esi, esp
  00232	6a 14		 push	 20			; 00000014H
  00234	6a 01		 push	 1
  00236	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  0023c	83 c4 08	 add	 esp, 8
  0023f	3b f4		 cmp	 esi, esp
  00241	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00246	89 45 f8	 mov	 DWORD PTR _nextNode$[ebp], eax

; 2154 :     if (nextNode == NULL)

  00249	83 7d f8 00	 cmp	 DWORD PTR _nextNode$[ebp], 0
  0024d	75 07		 jne	 SHORT $LN24@intTrieAdd

; 2155 :     {
; 2156 : 	/* All that work and no memory - bummer.
; 2157 : 	 */
; 2158 : 	return	ANTLR3_FALSE;

  0024f	32 c0		 xor	 al, al
  00251	e9 00 01 00 00	 jmp	 $LN1@intTrieAdd
$LN24@intTrieAdd:

; 2159 :     }
; 2160 : 
; 2161 :     /* Build a new entry block for the new node
; 2162 :      */
; 2163 :     newEnt = (pANTLR3_TRIE_ENTRY)ANTLR3_CALLOC(1, sizeof(ANTLR3_TRIE_ENTRY));

  00256	8b f4		 mov	 esi, esp
  00258	6a 10		 push	 16			; 00000010H
  0025a	6a 01		 push	 1
  0025c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  00262	83 c4 08	 add	 esp, 8
  00265	3b f4		 cmp	 esi, esp
  00267	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0026c	89 45 ec	 mov	 DWORD PTR _newEnt$[ebp], eax

; 2164 : 
; 2165 :     if (newEnt == NULL)

  0026f	83 7d ec 00	 cmp	 DWORD PTR _newEnt$[ebp], 0
  00273	75 07		 jne	 SHORT $LN25@intTrieAdd

; 2166 :     {
; 2167 : 	/* Out of memory, all we can do is return the fact that the insert failed.
; 2168 : 	 */
; 2169 : 	return	ANTLR3_FALSE;

  00275	32 c0		 xor	 al, al
  00277	e9 da 00 00 00	 jmp	 $LN1@intTrieAdd
$LN25@intTrieAdd:

; 2170 :     }
; 2171 : 
; 2172 :     /* Otherwise enter this in our new node
; 2173 :     */
; 2174 :     newEnt->type	= type;

  0027c	8b 55 ec	 mov	 edx, DWORD PTR _newEnt$[ebp]
  0027f	8b 45 10	 mov	 eax, DWORD PTR _type$[ebp]
  00282	89 02		 mov	 DWORD PTR [edx], eax

; 2175 :     newEnt->freeptr	= freeptr;

  00284	8b 4d ec	 mov	 ecx, DWORD PTR _newEnt$[ebp]
  00287	8b 55 1c	 mov	 edx, DWORD PTR _freeptr$[ebp]
  0028a	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 2176 :     if (type == ANTLR3_HASH_TYPE_STR)

  0028d	83 7d 10 01	 cmp	 DWORD PTR _type$[ebp], 1
  00291	75 0b		 jne	 SHORT $LN26@intTrieAdd

; 2177 :     {
; 2178 : 	newEnt->data.ptr = data;

  00293	8b 45 ec	 mov	 eax, DWORD PTR _newEnt$[ebp]
  00296	8b 4d 18	 mov	 ecx, DWORD PTR _data$[ebp]
  00299	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 2179 :     }

  0029c	eb 09		 jmp	 SHORT $LN27@intTrieAdd
$LN26@intTrieAdd:

; 2180 :     else
; 2181 :     {
; 2182 : 	newEnt->data.intVal = intVal;

  0029e	8b 55 ec	 mov	 edx, DWORD PTR _newEnt$[ebp]
  002a1	8b 45 14	 mov	 eax, DWORD PTR _intVal$[ebp]
  002a4	89 42 08	 mov	 DWORD PTR [edx+8], eax
$LN27@intTrieAdd:

; 2183 :     }
; 2184 :     /* Install it
; 2185 :      */
; 2186 :     nextNode->buckets	= newEnt;

  002a7	8b 4d f8	 mov	 ecx, DWORD PTR _nextNode$[ebp]
  002aa	8b 55 ec	 mov	 edx, DWORD PTR _newEnt$[ebp]
  002ad	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 2187 :     nextNode->key	= key;

  002b0	8b 45 f8	 mov	 eax, DWORD PTR _nextNode$[ebp]
  002b3	8b 4d 0c	 mov	 ecx, DWORD PTR _key$[ebp]
  002b6	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 2188 :     nextNode->bitNum	= depth;

  002b9	8b 55 f8	 mov	 edx, DWORD PTR _nextNode$[ebp]
  002bc	8b 45 f0	 mov	 eax, DWORD PTR _depth$[ebp]
  002bf	89 02		 mov	 DWORD PTR [edx], eax

; 2189 : 
; 2190 :     /* Work out the right and left pointers for this new node, which involve
; 2191 :      * terminating with the current found node either right or left according
; 2192 :      * to whether the current index bit is 1 or 0
; 2193 :      */
; 2194 :     if (key & bitMask[depth])

  002c1	8b 4d 0c	 mov	 ecx, DWORD PTR _key$[ebp]
  002c4	33 d2		 xor	 edx, edx
  002c6	8b 45 f0	 mov	 eax, DWORD PTR _depth$[ebp]
  002c9	23 0c c5 00 00
	00 00		 and	 ecx, DWORD PTR _bitMask[eax*8]
  002d0	23 14 c5 04 00
	00 00		 and	 edx, DWORD PTR _bitMask[eax*8+4]
  002d7	89 4d cc	 mov	 DWORD PTR tv350[ebp], ecx
  002da	89 55 d0	 mov	 DWORD PTR tv350[ebp+4], edx
  002dd	8b 4d cc	 mov	 ecx, DWORD PTR tv350[ebp]
  002e0	0b 4d d0	 or	 ecx, DWORD PTR tv350[ebp+4]
  002e3	74 14		 je	 SHORT $LN28@intTrieAdd

; 2195 :     {
; 2196 : 	nextNode->leftN	    = entNode;	    /* Terminates at previous position	*/

  002e5	8b 55 f8	 mov	 edx, DWORD PTR _nextNode$[ebp]
  002e8	8b 45 f4	 mov	 eax, DWORD PTR _entNode$[ebp]
  002eb	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 2197 : 	nextNode->rightN    = nextNode;	    /* Terminates with itself		*/

  002ee	8b 4d f8	 mov	 ecx, DWORD PTR _nextNode$[ebp]
  002f1	8b 55 f8	 mov	 edx, DWORD PTR _nextNode$[ebp]
  002f4	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 2198 :     }

  002f7	eb 12		 jmp	 SHORT $LN29@intTrieAdd
$LN28@intTrieAdd:

; 2199 :     else
; 2200 :     {
; 2201 : 	nextNode->rightN   = entNode;	    /* Terminates at previous position	*/

  002f9	8b 45 f8	 mov	 eax, DWORD PTR _nextNode$[ebp]
  002fc	8b 4d f4	 mov	 ecx, DWORD PTR _entNode$[ebp]
  002ff	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 2202 : 	nextNode->leftN    = nextNode;	    /* Terminates with itself		*/		

  00302	8b 55 f8	 mov	 edx, DWORD PTR _nextNode$[ebp]
  00305	8b 45 f8	 mov	 eax, DWORD PTR _nextNode$[ebp]
  00308	89 42 0c	 mov	 DWORD PTR [edx+12], eax
$LN29@intTrieAdd:

; 2203 :     }
; 2204 : 
; 2205 :     /* Finally, we need to change the pointers at the node we located
; 2206 :      * for inserting. If the key bit at its index is set then the right
; 2207 :      * pointer for that node becomes the newly created node, otherwise the left 
; 2208 :      * pointer does.
; 2209 :      */
; 2210 :     if (key & bitMask[thisNode->bitNum] )

  0030b	8b 4d 0c	 mov	 ecx, DWORD PTR _key$[ebp]
  0030e	33 d2		 xor	 edx, edx
  00310	8b 45 fc	 mov	 eax, DWORD PTR _thisNode$[ebp]
  00313	8b 00		 mov	 eax, DWORD PTR [eax]
  00315	23 0c c5 00 00
	00 00		 and	 ecx, DWORD PTR _bitMask[eax*8]
  0031c	23 14 c5 04 00
	00 00		 and	 edx, DWORD PTR _bitMask[eax*8+4]
  00323	89 4d c4	 mov	 DWORD PTR tv370[ebp], ecx
  00326	89 55 c8	 mov	 DWORD PTR tv370[ebp+4], edx
  00329	8b 4d c4	 mov	 ecx, DWORD PTR tv370[ebp]
  0032c	0b 4d c8	 or	 ecx, DWORD PTR tv370[ebp+4]
  0032f	74 0b		 je	 SHORT $LN30@intTrieAdd

; 2211 :     {
; 2212 : 	thisNode->rightN    = nextNode;

  00331	8b 55 fc	 mov	 edx, DWORD PTR _thisNode$[ebp]
  00334	8b 45 f8	 mov	 eax, DWORD PTR _nextNode$[ebp]
  00337	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 2213 :     }

  0033a	eb 09		 jmp	 SHORT $LN31@intTrieAdd
$LN30@intTrieAdd:

; 2214 :     else
; 2215 :     {
; 2216 : 	thisNode->leftN	    = nextNode;

  0033c	8b 4d fc	 mov	 ecx, DWORD PTR _thisNode$[ebp]
  0033f	8b 55 f8	 mov	 edx, DWORD PTR _nextNode$[ebp]
  00342	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
$LN31@intTrieAdd:

; 2217 :     }
; 2218 : 
; 2219 :     /* Et voila
; 2220 :      */
; 2221 :     trie->count++;

  00345	8b 45 08	 mov	 eax, DWORD PTR _trie$[ebp]
  00348	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0034b	83 c1 01	 add	 ecx, 1
  0034e	8b 55 08	 mov	 edx, DWORD PTR _trie$[ebp]
  00351	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 2222 :     return  ANTLR3_TRUE;

  00354	b0 01		 mov	 al, 1
$LN1@intTrieAdd:

; 2223 : 
; 2224 : }

  00356	5f		 pop	 edi
  00357	5e		 pop	 esi
  00358	83 c4 3c	 add	 esp, 60			; 0000003cH
  0035b	3b ec		 cmp	 ebp, esp
  0035d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00362	8b e5		 mov	 esp, ebp
  00364	5d		 pop	 ebp
  00365	c3		 ret	 0
_intTrieAdd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _intTrieDel
_TEXT	SEGMENT
_p$ = -4						; size = 4
_trie$ = 8						; size = 4
_key$ = 12						; size = 4
_intTrieDel PROC					; COMDAT

; 1933 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1934 :     pANTLR3_INT_TRIE_NODE   p;
; 1935 : 
; 1936 :     p=trie->root;

  00004	8b 45 08	 mov	 eax, DWORD PTR _trie$[ebp]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	89 4d fc	 mov	 DWORD PTR _p$[ebp], ecx

; 1937 : 
; 1938 :     return ANTLR3_FALSE;

  0000c	32 c0		 xor	 al, al

; 1939 : }

  0000e	8b e5		 mov	 esp, ebp
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
_intTrieDel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _intTrieGet
_TEXT	SEGMENT
tv131 = -16						; size = 8
_nextNode$ = -8						; size = 4
_thisNode$ = -4						; size = 4
_trie$ = 8						; size = 4
_key$ = 12						; size = 4
_intTrieGet PROC					; COMDAT

; 1863 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 1864 : 	pANTLR3_INT_TRIE_NODE    thisNode; 
; 1865 : 	pANTLR3_INT_TRIE_NODE    nextNode; 
; 1866 : 
; 1867 : 	if (trie->count == 0)

  00006	8b 45 08	 mov	 eax, DWORD PTR _trie$[ebp]
  00009	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0000d	75 04		 jne	 SHORT $LN4@intTrieGet

; 1868 : 	{
; 1869 : 		return NULL;	    /* Nothing in this trie yet	*/

  0000f	33 c0		 xor	 eax, eax
  00011	eb 76		 jmp	 SHORT $LN8@intTrieGet
$LN4@intTrieGet:

; 1870 : 	}
; 1871 : 	/* Starting at the root node in the trie, compare the bit index
; 1872 : 	 * of the current node with its next child node (starts left from root).
; 1873 : 	 * When the bit index of the child node is greater than the bit index of the current node
; 1874 : 	 * then by definition (as the bit index decreases as we descent the trie)
; 1875 : 	 * we have reached a 'backward' pointer. A backward pointer means we
; 1876 : 	 * have reached the only node that can be reached by the bits given us so far
; 1877 : 	 * and it must either be the key we are looking for, or if not then it
; 1878 : 	 * means the entry was not in the trie, and we return NULL. A backward pointer
; 1879 : 	 * points back in to the tree structure rather than down (deeper) within the
; 1880 : 	 * tree branches.
; 1881 : 	 */
; 1882 : 	thisNode	= trie->root;		/* Start at the root node		*/

  00013	8b 4d 08	 mov	 ecx, DWORD PTR _trie$[ebp]
  00016	8b 11		 mov	 edx, DWORD PTR [ecx]
  00018	89 55 fc	 mov	 DWORD PTR _thisNode$[ebp], edx

; 1883 : 	nextNode	= thisNode->leftN;	/* Examine the left node from the root	*/

  0001b	8b 45 fc	 mov	 eax, DWORD PTR _thisNode$[ebp]
  0001e	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00021	89 4d f8	 mov	 DWORD PTR _nextNode$[ebp], ecx
$LN2@intTrieGet:

; 1884 : 
; 1885 : 	/* While we are descending the tree nodes...
; 1886 : 	 */
; 1887 : 	while (thisNode->bitNum > nextNode->bitNum)

  00024	8b 55 fc	 mov	 edx, DWORD PTR _thisNode$[ebp]
  00027	8b 45 f8	 mov	 eax, DWORD PTR _nextNode$[ebp]
  0002a	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0002c	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0002e	76 42		 jbe	 SHORT $LN3@intTrieGet

; 1888 : 	{
; 1889 : 		/* Next node now becomes the new 'current' node
; 1890 : 		 */
; 1891 : 		thisNode    = nextNode;

  00030	8b 55 f8	 mov	 edx, DWORD PTR _nextNode$[ebp]
  00033	89 55 fc	 mov	 DWORD PTR _thisNode$[ebp], edx

; 1892 : 
; 1893 : 		/* We now test the bit indicated by the bitmap in the next node
; 1894 : 		 * in the key we are searching for. The new next node is the
; 1895 : 		 * right node if that bit is set and the left node it is not.
; 1896 : 		 */
; 1897 : 		if (key & bitMask[nextNode->bitNum])

  00036	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  00039	33 c9		 xor	 ecx, ecx
  0003b	8b 55 f8	 mov	 edx, DWORD PTR _nextNode$[ebp]
  0003e	8b 12		 mov	 edx, DWORD PTR [edx]
  00040	23 04 d5 00 00
	00 00		 and	 eax, DWORD PTR _bitMask[edx*8]
  00047	23 0c d5 04 00
	00 00		 and	 ecx, DWORD PTR _bitMask[edx*8+4]
  0004e	89 45 f0	 mov	 DWORD PTR tv131[ebp], eax
  00051	89 4d f4	 mov	 DWORD PTR tv131[ebp+4], ecx
  00054	8b 45 f0	 mov	 eax, DWORD PTR tv131[ebp]
  00057	0b 45 f4	 or	 eax, DWORD PTR tv131[ebp+4]
  0005a	74 0b		 je	 SHORT $LN5@intTrieGet

; 1898 : 		{
; 1899 : 			nextNode = nextNode->rightN;	/* 1 is right	*/

  0005c	8b 4d f8	 mov	 ecx, DWORD PTR _nextNode$[ebp]
  0005f	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00062	89 55 f8	 mov	 DWORD PTR _nextNode$[ebp], edx

; 1900 : 		}

  00065	eb 09		 jmp	 SHORT $LN6@intTrieGet
$LN5@intTrieGet:

; 1901 : 		else
; 1902 : 		{
; 1903 : 			nextNode = nextNode->leftN;		/* 0 is left	*/

  00067	8b 45 f8	 mov	 eax, DWORD PTR _nextNode$[ebp]
  0006a	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0006d	89 4d f8	 mov	 DWORD PTR _nextNode$[ebp], ecx
$LN6@intTrieGet:

; 1904 : 		}
; 1905 : 	}

  00070	eb b2		 jmp	 SHORT $LN2@intTrieGet
$LN3@intTrieGet:

; 1906 : 
; 1907 : 	/* Here we have reached a node where the bitMap index is lower than
; 1908 : 	 * its parent. This means it is pointing backward in the tree and
; 1909 : 	 * must therefore be a terminal node, being the only point than can
; 1910 : 	 * be reached with the bits seen so far. It is either the actual key
; 1911 : 	 * we wanted, or if that key is not in the trie it is another key
; 1912 : 	 * that is currently the only one that can be reached by those bits.
; 1913 : 	 * That situation would obviously change if the key was to be added
; 1914 : 	 * to the trie.
; 1915 : 	 *
; 1916 : 	 * Hence it only remains to test whether this is actually the key or not.
; 1917 : 	 */
; 1918 : 	if (nextNode->key == key)

  00072	8b 55 f8	 mov	 edx, DWORD PTR _nextNode$[ebp]
  00075	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00078	3b 45 0c	 cmp	 eax, DWORD PTR _key$[ebp]
  0007b	75 0a		 jne	 SHORT $LN7@intTrieGet

; 1919 : 	{
; 1920 : 		/* This was the key, so return the entry pointer
; 1921 : 		 */
; 1922 : 		return	nextNode->buckets;

  0007d	8b 4d f8	 mov	 ecx, DWORD PTR _nextNode$[ebp]
  00080	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00083	eb 04		 jmp	 SHORT $LN8@intTrieGet

; 1923 : 	}

  00085	eb 02		 jmp	 SHORT $LN8@intTrieGet
$LN7@intTrieGet:

; 1924 : 	else
; 1925 : 	{
; 1926 : 		return	NULL;	/* That key is not in the trie (note that we set the pointer to -1 if no payload) */

  00087	33 c0		 xor	 eax, eax
$LN8@intTrieGet:

; 1927 : 	}
; 1928 : }

  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
_intTrieGet ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _returnVector
_TEXT	SEGMENT
_factory$ = 8						; size = 4
_vector$ = 12						; size = 4
_returnVector PROC					; COMDAT

; 1501 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1502 : 	// First we need to clear out anything that is still in the vector
; 1503 : 	//
; 1504 : 	vector->clear(vector);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 0c	 mov	 eax, DWORD PTR _vector$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _vector$[ebp]
  0000d	8b 91 a0 00 00
	00		 mov	 edx, DWORD PTR [ecx+160]
  00013	ff d2		 call	 edx
  00015	83 c4 04	 add	 esp, 4
  00018	3b f4		 cmp	 esi, esp
  0001a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1505 : 
; 1506 : 	// We have a free stack available so we can add the vector we were
; 1507 : 	// given into the free chain. The vector has to have come from this
; 1508 : 	// factory, so we already know how to release its memory when it
; 1509 : 	// dies by virtue of the factory being closed.
; 1510 : 	//
; 1511 : 	factory->freeStack->push(factory->freeStack, vector, NULL);

  0001f	8b f4		 mov	 esi, esp
  00021	6a 00		 push	 0
  00023	8b 45 0c	 mov	 eax, DWORD PTR _vector$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR _factory$[ebp]
  0002a	8b 91 c0 00 00
	00		 mov	 edx, DWORD PTR [ecx+192]
  00030	52		 push	 edx
  00031	8b 45 08	 mov	 eax, DWORD PTR _factory$[ebp]
  00034	8b 88 c0 00 00
	00		 mov	 ecx, DWORD PTR [eax+192]
  0003a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0003d	ff d2		 call	 edx
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	90		 npad	 1

; 1512 : 
; 1513 : 	// TODO: remove this line once happy printf("Returned vector %08X to the pool, stack size is %d\n", vector, factory->freeStack->size(factory->freeStack));
; 1514 : }

  0004a	5e		 pop	 esi
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_returnVector ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _newVector
_TEXT	SEGMENT
_vector$ = -4						; size = 4
_factory$ = 8						; size = 4
_newVector PROC						; COMDAT

; 1676 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1677 :     pANTLR3_VECTOR vector;
; 1678 : 
; 1679 : 	// If we have anything on the re claim stack, reuse it
; 1680 : 	//
; 1681 : 	vector = (pANTLR3_VECTOR)factory->freeStack->peek(factory->freeStack);

  0000c	8b f4		 mov	 esi, esp
  0000e	8b 45 08	 mov	 eax, DWORD PTR _factory$[ebp]
  00011	8b 88 c0 00 00
	00		 mov	 ecx, DWORD PTR [eax+192]
  00017	51		 push	 ecx
  00018	8b 55 08	 mov	 edx, DWORD PTR _factory$[ebp]
  0001b	8b 82 c0 00 00
	00		 mov	 eax, DWORD PTR [edx+192]
  00021	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00024	ff d1		 call	 ecx
  00026	83 c4 04	 add	 esp, 4
  00029	3b f4		 cmp	 esi, esp
  0002b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00030	89 45 fc	 mov	 DWORD PTR _vector$[ebp], eax

; 1682 : 
; 1683 : 	if  (vector != NULL)

  00033	83 7d fc 00	 cmp	 DWORD PTR _vector$[ebp], 0
  00037	74 29		 je	 SHORT $LN2@newVector

; 1684 : 	{
; 1685 : 		// Cool we got something we could reuse
; 1686 : 		//
; 1687 : 		factory->freeStack->pop(factory->freeStack);

  00039	8b f4		 mov	 esi, esp
  0003b	8b 55 08	 mov	 edx, DWORD PTR _factory$[ebp]
  0003e	8b 82 c0 00 00
	00		 mov	 eax, DWORD PTR [edx+192]
  00044	50		 push	 eax
  00045	8b 4d 08	 mov	 ecx, DWORD PTR _factory$[ebp]
  00048	8b 91 c0 00 00
	00		 mov	 edx, DWORD PTR [ecx+192]
  0004e	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00051	ff d0		 call	 eax
  00053	83 c4 04	 add	 esp, 4
  00056	3b f4		 cmp	 esi, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1688 : 
; 1689 : 		// TODO: remove this line once happy printf("Reused vector %08X from stack, size is now %d\n", vector, factory->freeStack->size(factory->freeStack));
; 1690 : 		return vector;

  0005d	8b 45 fc	 mov	 eax, DWORD PTR _vector$[ebp]
  00060	eb 73		 jmp	 SHORT $LN1@newVector
$LN2@newVector:

; 1691 : 
; 1692 : 	}
; 1693 : 
; 1694 : 	// See if we need a new vector pool before allocating a new
; 1695 :     // one
; 1696 :     //
; 1697 :     if (factory->nextVector >= ANTLR3_FACTORY_VPOOL_SIZE)

  00062	8b 4d 08	 mov	 ecx, DWORD PTR _factory$[ebp]
  00065	81 79 08 00 01
	00 00		 cmp	 DWORD PTR [ecx+8], 256	; 00000100H
  0006c	72 17		 jb	 SHORT $LN4@newVector

; 1698 :     {
; 1699 :         // We ran out of vectors in the current pool, so we need a new pool
; 1700 :         //
; 1701 :         if (!newPool(factory))

  0006e	8b 55 08	 mov	 edx, DWORD PTR _factory$[ebp]
  00071	52		 push	 edx
  00072	e8 00 00 00 00	 call	 _newPool
  00077	83 c4 04	 add	 esp, 4
  0007a	0f b6 c0	 movzx	 eax, al
  0007d	85 c0		 test	 eax, eax
  0007f	75 04		 jne	 SHORT $LN4@newVector

; 1702 : 		{
; 1703 : 			// new pool creation failed
; 1704 : 			return NULL;

  00081	33 c0		 xor	 eax, eax
  00083	eb 50		 jmp	 SHORT $LN1@newVector
$LN4@newVector:

; 1705 : 		}
; 1706 :     }
; 1707 : 
; 1708 :     // Assuming everything went well (we are trying for performance here so doing minimal
; 1709 :     // error checking. Then we can work out what the pointer is to the next vector.
; 1710 :     //
; 1711 :     vector = factory->pools[factory->thisPool] + factory->nextVector;

  00085	8b 4d 08	 mov	 ecx, DWORD PTR _factory$[ebp]
  00088	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0008b	8b 45 08	 mov	 eax, DWORD PTR _factory$[ebp]
  0008e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00090	8b 45 08	 mov	 eax, DWORD PTR _factory$[ebp]
  00093	69 40 08 b4 00
	00 00		 imul	 eax, DWORD PTR [eax+8], 180
  0009a	03 04 91	 add	 eax, DWORD PTR [ecx+edx*4]
  0009d	89 45 fc	 mov	 DWORD PTR _vector$[ebp], eax

; 1712 :     factory->nextVector++;

  000a0	8b 4d 08	 mov	 ecx, DWORD PTR _factory$[ebp]
  000a3	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000a6	83 c2 01	 add	 edx, 1
  000a9	8b 45 08	 mov	 eax, DWORD PTR _factory$[ebp]
  000ac	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1713 : 
; 1714 :     // We have our token pointer now, so we can initialize it to the predefined model.
; 1715 :     //
; 1716 :     antlr3SetVectorApi(vector, ANTLR3_VECTOR_INTERNAL_SIZE);

  000af	6a 10		 push	 16			; 00000010H
  000b1	8b 4d fc	 mov	 ecx, DWORD PTR _vector$[ebp]
  000b4	51		 push	 ecx
  000b5	e8 00 00 00 00	 call	 _antlr3SetVectorApi
  000ba	83 c4 08	 add	 esp, 8

; 1717 :     vector->factoryMade = ANTLR3_TRUE;

  000bd	8b 55 fc	 mov	 edx, DWORD PTR _vector$[ebp]
  000c0	c6 82 88 00 00
	00 01		 mov	 BYTE PTR [edx+136], 1

; 1718 : 
; 1719 :     // We know that the pool vectors are created at the default size, which means they
; 1720 :     // will start off using their internal entry pointers. We must initialize our pool vector
; 1721 :     // to point to its own internal entry table and not the pre-made one.
; 1722 :     //
; 1723 :     vector->elements = vector->internal;

  000c7	8b 45 fc	 mov	 eax, DWORD PTR _vector$[ebp]
  000ca	83 c0 08	 add	 eax, 8
  000cd	8b 4d fc	 mov	 ecx, DWORD PTR _vector$[ebp]
  000d0	89 01		 mov	 DWORD PTR [ecx], eax

; 1724 : 
; 1725 : 		// TODO: remove this line once happy printf("Used a new vector at %08X from the pools as nothing on the reusue stack\n", vector);
; 1726 : 
; 1727 :     // And we are done
; 1728 :     //
; 1729 :     return vector;

  000d2	8b 45 fc	 mov	 eax, DWORD PTR _vector$[ebp]
$LN1@newVector:

; 1730 : }

  000d5	5e		 pop	 esi
  000d6	83 c4 04	 add	 esp, 4
  000d9	3b ec		 cmp	 ebp, esp
  000db	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
_newVector ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _closeVectorFactory
_TEXT	SEGMENT
tv128 = -28						; size = 4
tv79 = -24						; size = 4
_check$ = -20						; size = 4
_vector$ = -16						; size = 4
_limit$ = -12						; size = 4
_poolCount$ = -8					; size = 4
_pool$ = -4						; size = 4
_factory$ = 8						; size = 4
_closeVectorFactory PROC				; COMDAT

; 1563 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00012	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00015	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00018	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001b	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001e	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 1564 :     pANTLR3_VECTOR      pool;
; 1565 :     ANTLR3_INT32        poolCount;
; 1566 :     ANTLR3_UINT32       limit;
; 1567 :     ANTLR3_UINT32       vector;
; 1568 :     pANTLR3_VECTOR      check;
; 1569 : 
; 1570 : 	// First see if we have a free chain stack to release?
; 1571 : 	//
; 1572 : 	if	(factory->freeStack != NULL)

  00021	8b 45 08	 mov	 eax, DWORD PTR _factory$[ebp]
  00024	83 b8 c0 00 00
	00 00		 cmp	 DWORD PTR [eax+192], 0
  0002b	74 25		 je	 SHORT $LN14@closeVecto

; 1573 : 	{
; 1574 : 		factory->freeStack->free(factory->freeStack);

  0002d	8b f4		 mov	 esi, esp
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _factory$[ebp]
  00032	8b 91 c0 00 00
	00		 mov	 edx, DWORD PTR [ecx+192]
  00038	52		 push	 edx
  00039	8b 45 08	 mov	 eax, DWORD PTR _factory$[ebp]
  0003c	8b 88 c0 00 00
	00		 mov	 ecx, DWORD PTR [eax+192]
  00042	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00045	ff d2		 call	 edx
  00047	83 c4 04	 add	 esp, 4
  0004a	3b f4		 cmp	 esi, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	90		 npad	 1
$LN14@closeVecto:

; 1575 : 	}
; 1576 : 
; 1577 :     /* We iterate the vector pools one at a time
; 1578 :      */
; 1579 :     for (poolCount = 0; poolCount <= factory->thisPool; poolCount++)

  00052	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _poolCount$[ebp], 0
  00059	eb 09		 jmp	 SHORT $LN4@closeVecto
$LN2@closeVecto:
  0005b	8b 45 f8	 mov	 eax, DWORD PTR _poolCount$[ebp]
  0005e	83 c0 01	 add	 eax, 1
  00061	89 45 f8	 mov	 DWORD PTR _poolCount$[ebp], eax
$LN4@closeVecto:
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _factory$[ebp]
  00067	8b 55 f8	 mov	 edx, DWORD PTR _poolCount$[ebp]
  0006a	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0006d	0f 8f 81 00 00
	00		 jg	 $LN3@closeVecto

; 1580 :     {
; 1581 :         /* Pointer to current pool
; 1582 :          */
; 1583 :         pool = factory->pools[poolCount];

  00073	8b 45 08	 mov	 eax, DWORD PTR _factory$[ebp]
  00076	8b 08		 mov	 ecx, DWORD PTR [eax]
  00078	8b 55 f8	 mov	 edx, DWORD PTR _poolCount$[ebp]
  0007b	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  0007e	89 45 fc	 mov	 DWORD PTR _pool$[ebp], eax

; 1584 : 
; 1585 :         /* Work out how many tokens we need to check in this pool.
; 1586 :          */
; 1587 :         limit = (poolCount == factory->thisPool ? factory->nextVector : ANTLR3_FACTORY_VPOOL_SIZE);

  00081	8b 4d 08	 mov	 ecx, DWORD PTR _factory$[ebp]
  00084	8b 55 f8	 mov	 edx, DWORD PTR _poolCount$[ebp]
  00087	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0008a	75 0b		 jne	 SHORT $LN19@closeVecto
  0008c	8b 45 08	 mov	 eax, DWORD PTR _factory$[ebp]
  0008f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00092	89 4d e8	 mov	 DWORD PTR tv79[ebp], ecx
  00095	eb 07		 jmp	 SHORT $LN20@closeVecto
$LN19@closeVecto:
  00097	c7 45 e8 00 01
	00 00		 mov	 DWORD PTR tv79[ebp], 256 ; 00000100H
$LN20@closeVecto:
  0009e	8b 55 e8	 mov	 edx, DWORD PTR tv79[ebp]
  000a1	89 55 f4	 mov	 DWORD PTR _limit$[ebp], edx

; 1588 : 
; 1589 :         /* Marginal condition, we might be at the start of a brand new pool
; 1590 :          * where the nextToken is 0 and nothing has been allocated.
; 1591 :          */
; 1592 :         if (limit > 0)

  000a4	83 7d f4 00	 cmp	 DWORD PTR _limit$[ebp], 0
  000a8	76 45		 jbe	 SHORT $LN6@closeVecto

; 1593 :         {
; 1594 :             /* We have some vectors allocated from this pool
; 1595 :              */
; 1596 :             for (vector = 0; vector < limit; vector++)

  000aa	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _vector$[ebp], 0
  000b1	eb 09		 jmp	 SHORT $LN7@closeVecto
$LN5@closeVecto:
  000b3	8b 45 f0	 mov	 eax, DWORD PTR _vector$[ebp]
  000b6	83 c0 01	 add	 eax, 1
  000b9	89 45 f0	 mov	 DWORD PTR _vector$[ebp], eax
$LN7@closeVecto:
  000bc	8b 4d f0	 mov	 ecx, DWORD PTR _vector$[ebp]
  000bf	3b 4d f4	 cmp	 ecx, DWORD PTR _limit$[ebp]
  000c2	73 2b		 jae	 SHORT $LN6@closeVecto

; 1597 :             {
; 1598 :                 /* Next one in the chain
; 1599 :                  */
; 1600 :                 check = pool + vector;

  000c4	69 55 f0 b4 00
	00 00		 imul	 edx, DWORD PTR _vector$[ebp], 180
  000cb	03 55 fc	 add	 edx, DWORD PTR _pool$[ebp]
  000ce	89 55 ec	 mov	 DWORD PTR _check$[ebp], edx

; 1601 : 
; 1602 :                 // Call the free function on each of the vectors in the pool,
; 1603 :                 // which in turn will cause any elements it holds that also have a free
; 1604 :                 // pointer to be freed. However, because any vector may be in any other
; 1605 :                 // vector, we don't free the element allocations yet. We do that in a
; 1606 :                 // a specific pass, coming up next. The vector free function knows that
; 1607 :                 // this is a factory allocated pool vector and so it won't free things it
; 1608 :                 // should not.
; 1609 :                 //
; 1610 :                 check->free(check);

  000d1	8b f4		 mov	 esi, esp
  000d3	8b 45 ec	 mov	 eax, DWORD PTR _check$[ebp]
  000d6	50		 push	 eax
  000d7	8b 4d ec	 mov	 ecx, DWORD PTR _check$[ebp]
  000da	8b 91 90 00 00
	00		 mov	 edx, DWORD PTR [ecx+144]
  000e0	ff d2		 call	 edx
  000e2	83 c4 04	 add	 esp, 4
  000e5	3b f4		 cmp	 esi, esp
  000e7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ec	90		 npad	 1

; 1611 :             }

  000ed	eb c4		 jmp	 SHORT $LN5@closeVecto
$LN6@closeVecto:

; 1612 :         }
; 1613 :     }

  000ef	e9 67 ff ff ff	 jmp	 $LN2@closeVecto
$LN3@closeVecto:

; 1614 : 
; 1615 :     /* We iterate the vector pools one at a time once again, but this time
; 1616 :      * we are going to free up any allocated element pointers. Note that we are doing this
; 1617 :      * so that we do not try to release vectors twice. When building ASTs we just copy
; 1618 :      * the vectors all over the place and they may be embedded in this vector pool
; 1619 :      * numerous times.
; 1620 :      */
; 1621 :     for (poolCount = 0; poolCount <= factory->thisPool; poolCount++)

  000f4	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _poolCount$[ebp], 0
  000fb	eb 09		 jmp	 SHORT $LN10@closeVecto
$LN8@closeVecto:
  000fd	8b 45 f8	 mov	 eax, DWORD PTR _poolCount$[ebp]
  00100	83 c0 01	 add	 eax, 1
  00103	89 45 f8	 mov	 DWORD PTR _poolCount$[ebp], eax
$LN10@closeVecto:
  00106	8b 4d 08	 mov	 ecx, DWORD PTR _factory$[ebp]
  00109	8b 55 f8	 mov	 edx, DWORD PTR _poolCount$[ebp]
  0010c	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0010f	0f 8f ce 00 00
	00		 jg	 $LN9@closeVecto

; 1622 :     {
; 1623 :         /* Pointer to current pool
; 1624 :          */
; 1625 :         pool = factory->pools[poolCount];

  00115	8b 45 08	 mov	 eax, DWORD PTR _factory$[ebp]
  00118	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011a	8b 55 f8	 mov	 edx, DWORD PTR _poolCount$[ebp]
  0011d	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00120	89 45 fc	 mov	 DWORD PTR _pool$[ebp], eax

; 1626 : 
; 1627 :         /* Work out how many tokens we need to check in this pool.
; 1628 :          */
; 1629 :         limit = (poolCount == factory->thisPool ? factory->nextVector : ANTLR3_FACTORY_VPOOL_SIZE);

  00123	8b 4d 08	 mov	 ecx, DWORD PTR _factory$[ebp]
  00126	8b 55 f8	 mov	 edx, DWORD PTR _poolCount$[ebp]
  00129	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0012c	75 0b		 jne	 SHORT $LN21@closeVecto
  0012e	8b 45 08	 mov	 eax, DWORD PTR _factory$[ebp]
  00131	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00134	89 4d e4	 mov	 DWORD PTR tv128[ebp], ecx
  00137	eb 07		 jmp	 SHORT $LN22@closeVecto
$LN21@closeVecto:
  00139	c7 45 e4 00 01
	00 00		 mov	 DWORD PTR tv128[ebp], 256 ; 00000100H
$LN22@closeVecto:
  00140	8b 55 e4	 mov	 edx, DWORD PTR tv128[ebp]
  00143	89 55 f4	 mov	 DWORD PTR _limit$[ebp], edx

; 1630 : 
; 1631 :         /* Marginal condition, we might be at the start of a brand new pool
; 1632 :          * where the nextToken is 0 and nothing has been allocated.
; 1633 :          */
; 1634 :         if (limit > 0)

  00146	83 7d f4 00	 cmp	 DWORD PTR _limit$[ebp], 0
  0014a	76 65		 jbe	 SHORT $LN12@closeVecto

; 1635 :         {
; 1636 :             /* We have some vectors allocated from this pool
; 1637 :              */
; 1638 :             for (vector = 0; vector < limit; vector++)

  0014c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _vector$[ebp], 0
  00153	eb 09		 jmp	 SHORT $LN13@closeVecto
$LN11@closeVecto:
  00155	8b 45 f0	 mov	 eax, DWORD PTR _vector$[ebp]
  00158	83 c0 01	 add	 eax, 1
  0015b	89 45 f0	 mov	 DWORD PTR _vector$[ebp], eax
$LN13@closeVecto:
  0015e	8b 4d f0	 mov	 ecx, DWORD PTR _vector$[ebp]
  00161	3b 4d f4	 cmp	 ecx, DWORD PTR _limit$[ebp]
  00164	73 4b		 jae	 SHORT $LN12@closeVecto

; 1639 :             {
; 1640 :                 /* Next one in the chain
; 1641 :                  */
; 1642 :                 check = pool + vector;

  00166	69 55 f0 b4 00
	00 00		 imul	 edx, DWORD PTR _vector$[ebp], 180
  0016d	03 55 fc	 add	 edx, DWORD PTR _pool$[ebp]
  00170	89 55 ec	 mov	 DWORD PTR _check$[ebp], edx

; 1643 : 
; 1644 :                 // Anything in here should be factory made, but we do this just
; 1645 :                 // to triple check. We just free up the elements if they were
; 1646 :                 // allocated beyond the internal size.
; 1647 :                 //
; 1648 :                 if (check->factoryMade == ANTLR3_TRUE && check->elementsSize > ANTLR3_VECTOR_INTERNAL_SIZE)

  00173	8b 45 ec	 mov	 eax, DWORD PTR _check$[ebp]
  00176	0f b6 88 88 00
	00 00		 movzx	 ecx, BYTE PTR [eax+136]
  0017d	83 f9 01	 cmp	 ecx, 1
  00180	75 2d		 jne	 SHORT $LN17@closeVecto
  00182	8b 55 ec	 mov	 edx, DWORD PTR _check$[ebp]
  00185	83 ba 8c 00 00
	00 10		 cmp	 DWORD PTR [edx+140], 16	; 00000010H
  0018c	76 21		 jbe	 SHORT $LN17@closeVecto

; 1649 :                 {
; 1650 :                     ANTLR3_FREE(check->elements);

  0018e	8b f4		 mov	 esi, esp
  00190	8b 45 ec	 mov	 eax, DWORD PTR _check$[ebp]
  00193	8b 08		 mov	 ecx, DWORD PTR [eax]
  00195	51		 push	 ecx
  00196	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0019c	83 c4 04	 add	 esp, 4
  0019f	3b f4		 cmp	 esi, esp
  001a1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1651 :                     check->elements = NULL;

  001a6	8b 55 ec	 mov	 edx, DWORD PTR _check$[ebp]
  001a9	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
$LN17@closeVecto:

; 1652 :                 }
; 1653 :             }

  001af	eb a4		 jmp	 SHORT $LN11@closeVecto
$LN12@closeVecto:

; 1654 :         }
; 1655 : 
; 1656 :         // We can now free this pool allocation as we have called free on every element in every vector
; 1657 :         // and freed any memory for pointers the grew beyond the internal size limit.
; 1658 :         //
; 1659 :         ANTLR3_FREE(factory->pools[poolCount]);

  001b1	8b 45 08	 mov	 eax, DWORD PTR _factory$[ebp]
  001b4	8b 08		 mov	 ecx, DWORD PTR [eax]
  001b6	8b f4		 mov	 esi, esp
  001b8	8b 55 f8	 mov	 edx, DWORD PTR _poolCount$[ebp]
  001bb	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  001be	50		 push	 eax
  001bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  001c5	83 c4 04	 add	 esp, 4
  001c8	3b f4		 cmp	 esi, esp
  001ca	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1660 :         factory->pools[poolCount] = NULL;

  001cf	8b 4d 08	 mov	 ecx, DWORD PTR _factory$[ebp]
  001d2	8b 11		 mov	 edx, DWORD PTR [ecx]
  001d4	8b 45 f8	 mov	 eax, DWORD PTR _poolCount$[ebp]
  001d7	c7 04 82 00 00
	00 00		 mov	 DWORD PTR [edx+eax*4], 0

; 1661 :     }

  001de	e9 1a ff ff ff	 jmp	 $LN8@closeVecto
$LN9@closeVecto:

; 1662 : 
; 1663 :     /* All the pools are deallocated we can free the pointers to the pools
; 1664 :      * now.
; 1665 :      */
; 1666 :     ANTLR3_FREE(factory->pools);

  001e3	8b f4		 mov	 esi, esp
  001e5	8b 4d 08	 mov	 ecx, DWORD PTR _factory$[ebp]
  001e8	8b 11		 mov	 edx, DWORD PTR [ecx]
  001ea	52		 push	 edx
  001eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  001f1	83 c4 04	 add	 esp, 4
  001f4	3b f4		 cmp	 esi, esp
  001f6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1667 : 
; 1668 :     /* Finally, we can free the space for the factory itself
; 1669 :      */
; 1670 :     ANTLR3_FREE(factory);

  001fb	8b f4		 mov	 esi, esp
  001fd	8b 45 08	 mov	 eax, DWORD PTR _factory$[ebp]
  00200	50		 push	 eax
  00201	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00207	83 c4 04	 add	 esp, 4
  0020a	3b f4		 cmp	 esi, esp
  0020c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00211	90		 npad	 1

; 1671 : 
; 1672 : }

  00212	5e		 pop	 esi
  00213	83 c4 1c	 add	 esp, 28			; 0000001cH
  00216	3b ec		 cmp	 ebp, esp
  00218	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0021d	8b e5		 mov	 esp, ebp
  0021f	5d		 pop	 ebp
  00220	c3		 ret	 0
_closeVectorFactory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _newPool
_TEXT	SEGMENT
_newPools$ = -4						; size = 4
_factory$ = 8						; size = 4
_newPool PROC						; COMDAT

; 1518 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1519 : 	pANTLR3_VECTOR *newPools;
; 1520 : 
; 1521 :     /* Increment factory count
; 1522 :      */
; 1523 :     ++factory->thisPool;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _factory$[ebp]
  0000f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00012	83 c1 01	 add	 ecx, 1
  00015	8b 55 08	 mov	 edx, DWORD PTR _factory$[ebp]
  00018	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 1524 : 
; 1525 :     /* Ensure we have enough pointers allocated
; 1526 :      */
; 1527 : 	newPools = (pANTLR3_VECTOR *)

  0001b	8b 45 08	 mov	 eax, DWORD PTR _factory$[ebp]
  0001e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00021	8d 14 8d 04 00
	00 00		 lea	 edx, DWORD PTR [ecx*4+4]
  00028	8b f4		 mov	 esi, esp
  0002a	52		 push	 edx
  0002b	8b 45 08	 mov	 eax, DWORD PTR _factory$[ebp]
  0002e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00030	51		 push	 ecx
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__realloc
  00037	83 c4 08	 add	 esp, 8
  0003a	3b f4		 cmp	 esi, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	89 45 fc	 mov	 DWORD PTR _newPools$[ebp], eax

; 1528 : 		ANTLR3_REALLOC(	(void *)factory->pools,	    /* Current pools pointer (starts at NULL)	*/
; 1529 : 					(ANTLR3_UINT32)((factory->thisPool + 1) * sizeof(pANTLR3_VECTOR *))	/* Memory for new pool pointers */
; 1530 : 					);
; 1531 : 	if (newPools == NULL)

  00044	83 7d fc 00	 cmp	 DWORD PTR _newPools$[ebp], 0
  00048	75 13		 jne	 SHORT $LN2@newPool

; 1532 : 	{
; 1533 : 		// realloc failed, but we still have the old allocation
; 1534 : 		--factory->thisPool;

  0004a	8b 55 08	 mov	 edx, DWORD PTR _factory$[ebp]
  0004d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00050	83 e8 01	 sub	 eax, 1
  00053	8b 4d 08	 mov	 ecx, DWORD PTR _factory$[ebp]
  00056	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1535 : 		return ANTLR3_FALSE;

  00059	32 c0		 xor	 al, al
  0005b	eb 5d		 jmp	 SHORT $LN1@newPool
$LN2@newPool:

; 1536 : 	}
; 1537 : 	factory->pools = newPools;

  0005d	8b 55 08	 mov	 edx, DWORD PTR _factory$[ebp]
  00060	8b 45 fc	 mov	 eax, DWORD PTR _newPools$[ebp]
  00063	89 02		 mov	 DWORD PTR [edx], eax

; 1538 : 
; 1539 :     /* Allocate a new pool for the factory
; 1540 :      */
; 1541 :     factory->pools[factory->thisPool]	=

  00065	8b f4		 mov	 esi, esp
  00067	68 00 b4 00 00	 push	 46080			; 0000b400H
  0006c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00072	83 c4 04	 add	 esp, 4
  00075	3b f4		 cmp	 esi, esp
  00077	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR _factory$[ebp]
  0007f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00082	8b 4d 08	 mov	 ecx, DWORD PTR _factory$[ebp]
  00085	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00087	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 1542 : 			    (pANTLR3_VECTOR)
; 1543 : 				ANTLR3_MALLOC((size_t)(sizeof(ANTLR3_VECTOR) * ANTLR3_FACTORY_VPOOL_SIZE));
; 1544 : 	if (factory->pools[factory->thisPool] == NULL)

  0008a	8b 55 08	 mov	 edx, DWORD PTR _factory$[ebp]
  0008d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00090	8b 4d 08	 mov	 ecx, DWORD PTR _factory$[ebp]
  00093	8b 11		 mov	 edx, DWORD PTR [ecx]
  00095	83 3c 82 00	 cmp	 DWORD PTR [edx+eax*4], 0
  00099	75 13		 jne	 SHORT $LN3@newPool

; 1545 : 	{
; 1546 : 		// malloc failed
; 1547 : 		--factory->thisPool;

  0009b	8b 45 08	 mov	 eax, DWORD PTR _factory$[ebp]
  0009e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a1	83 e9 01	 sub	 ecx, 1
  000a4	8b 55 08	 mov	 edx, DWORD PTR _factory$[ebp]
  000a7	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 1548 : 		return ANTLR3_FALSE;

  000aa	32 c0		 xor	 al, al
  000ac	eb 0c		 jmp	 SHORT $LN1@newPool
$LN3@newPool:

; 1549 : 	}
; 1550 : 
; 1551 : 
; 1552 :     /* Reset the counters
; 1553 :      */
; 1554 :     factory->nextVector	= 0;

  000ae	8b 45 08	 mov	 eax, DWORD PTR _factory$[ebp]
  000b1	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 1555 : 
; 1556 :     /* Done
; 1557 :      */
; 1558 :     return ANTLR3_TRUE;

  000b8	b0 01		 mov	 al, 1
$LN1@newPool:

; 1559 : }

  000ba	5e		 pop	 esi
  000bb	83 c4 04	 add	 esp, 4
  000be	3b ec		 cmp	 ebp, esp
  000c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
_newPool ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3VectorSwap
_TEXT	SEGMENT
_freeptr$ = -8						; size = 4
_tempEntry$ = -4					; size = 4
_vector$ = 8						; size = 4
_entry1$ = 12						; size = 4
_entry2$ = 16						; size = 4
_antlr3VectorSwap PROC					; COMDAT

; 1416 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 1417 : 
; 1418 :     void               * tempEntry;
; 1419 :     void (ANTLR3_CDECL *freeptr)(void *);
; 1420 : 
; 1421 : 	// If the vector is currently not big enough, then we do nothing
; 1422 : 	//
; 1423 : 	if (entry1 >= vector->elementsSize || entry2 >= vector->elementsSize)

  00007	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _entry1$[ebp]
  0000d	3b 88 8c 00 00
	00		 cmp	 ecx, DWORD PTR [eax+140]
  00013	73 0e		 jae	 SHORT $LN3@antlr3Vect
  00015	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  00018	8b 45 10	 mov	 eax, DWORD PTR _entry2$[ebp]
  0001b	3b 82 8c 00 00
	00		 cmp	 eax, DWORD PTR [edx+140]
  00021	72 04		 jb	 SHORT $LN2@antlr3Vect
$LN3@antlr3Vect:

; 1424 : 	{
; 1425 :         return ANTLR3_FALSE;

  00023	32 c0		 xor	 al, al
  00025	eb 6a		 jmp	 SHORT $LN1@antlr3Vect
$LN2@antlr3Vect:

; 1426 : 	}
; 1427 : 
; 1428 : 	// Valid request, swap them
; 1429 : 	//
; 1430 :     tempEntry   = vector->elements[entry1].element;

  00027	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  0002a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002c	8b 45 0c	 mov	 eax, DWORD PTR _entry1$[ebp]
  0002f	8b 0c c2	 mov	 ecx, DWORD PTR [edx+eax*8]
  00032	89 4d fc	 mov	 DWORD PTR _tempEntry$[ebp], ecx

; 1431 :     freeptr     = vector->elements[entry1].freeptr;

  00035	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  00038	8b 02		 mov	 eax, DWORD PTR [edx]
  0003a	8b 4d 0c	 mov	 ecx, DWORD PTR _entry1$[ebp]
  0003d	8b 54 c8 04	 mov	 edx, DWORD PTR [eax+ecx*8+4]
  00041	89 55 f8	 mov	 DWORD PTR _freeptr$[ebp], edx

; 1432 : 
; 1433 : 	// Install the new pointers
; 1434 : 	//
; 1435 :     vector->elements[entry1].freeptr	= vector->elements[entry2].freeptr;

  00044	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00047	8b 08		 mov	 ecx, DWORD PTR [eax]
  00049	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  0004c	8b 02		 mov	 eax, DWORD PTR [edx]
  0004e	8b 55 0c	 mov	 edx, DWORD PTR _entry1$[ebp]
  00051	8b 75 10	 mov	 esi, DWORD PTR _entry2$[ebp]
  00054	8b 4c f1 04	 mov	 ecx, DWORD PTR [ecx+esi*8+4]
  00058	89 4c d0 04	 mov	 DWORD PTR [eax+edx*8+4], ecx

; 1436 : 	vector->elements[entry1].element	= vector->elements[entry2].element;

  0005c	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  0005f	8b 02		 mov	 eax, DWORD PTR [edx]
  00061	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00064	8b 11		 mov	 edx, DWORD PTR [ecx]
  00066	8b 4d 0c	 mov	 ecx, DWORD PTR _entry1$[ebp]
  00069	8b 75 10	 mov	 esi, DWORD PTR _entry2$[ebp]
  0006c	8b 04 f0	 mov	 eax, DWORD PTR [eax+esi*8]
  0006f	89 04 ca	 mov	 DWORD PTR [edx+ecx*8], eax

; 1437 : 
; 1438 : 	vector->elements[entry2].freeptr	= freeptr;

  00072	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00075	8b 11		 mov	 edx, DWORD PTR [ecx]
  00077	8b 45 10	 mov	 eax, DWORD PTR _entry2$[ebp]
  0007a	8b 4d f8	 mov	 ecx, DWORD PTR _freeptr$[ebp]
  0007d	89 4c c2 04	 mov	 DWORD PTR [edx+eax*8+4], ecx

; 1439 : 	vector->elements[entry2].element	= tempEntry;

  00081	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  00084	8b 02		 mov	 eax, DWORD PTR [edx]
  00086	8b 4d 10	 mov	 ecx, DWORD PTR _entry2$[ebp]
  00089	8b 55 fc	 mov	 edx, DWORD PTR _tempEntry$[ebp]
  0008c	89 14 c8	 mov	 DWORD PTR [eax+ecx*8], edx

; 1440 : 
; 1441 : 	return  ANTLR3_TRUE;

  0008f	b0 01		 mov	 al, 1
$LN1@antlr3Vect:

; 1442 : 
; 1443 : }

  00091	5e		 pop	 esi
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
_antlr3VectorSwap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3VectorSize
_TEXT	SEGMENT
_vector$ = 8						; size = 4
_antlr3VectorSize PROC					; COMDAT

; 1446 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1447 :     return  vector->count;

  00003	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00006	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1448 : }

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
_antlr3VectorSize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3VectorSet
_TEXT	SEGMENT
_vector$ = 8						; size = 4
_entry$ = 12						; size = 4
_element$ = 16						; size = 4
_freeptr$ = 20						; size = 4
_freeExisting$ = 24					; size = 1
_antlr3VectorSet PROC					; COMDAT

; 1374 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1375 : 
; 1376 : 	// If the vector is currently not big enough, then we expand it
; 1377 : 	//
; 1378 : 	if (entry >= vector->elementsSize)

  00004	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _entry$[ebp]
  0000a	3b 88 8c 00 00
	00		 cmp	 ecx, DWORD PTR [eax+140]
  00010	72 1e		 jb	 SHORT $LN3@antlr3Vect

; 1379 : 	{
; 1380 : 		// We will get at least this many
; 1381 : 		if (!antlr3VectorResize(vector, entry))

  00012	8b 55 0c	 mov	 edx, DWORD PTR _entry$[ebp]
  00015	52		 push	 edx
  00016	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 _antlr3VectorResize
  0001f	83 c4 08	 add	 esp, 8
  00022	0f b6 c8	 movzx	 ecx, al
  00025	85 c9		 test	 ecx, ecx
  00027	75 07		 jne	 SHORT $LN3@antlr3Vect

; 1382 : 		{
; 1383 : 			// Resize failed
; 1384 : 			return 0;

  00029	33 c0		 xor	 eax, eax
  0002b	e9 80 00 00 00	 jmp	 $LN1@antlr3Vect
$LN3@antlr3Vect:

; 1385 : 		}
; 1386 : 	}
; 1387 : 
; 1388 : 	// Valid request, replace the current one, freeing any prior entry if told to
; 1389 : 	//
; 1390 : 	if	(		entry < vector->count						// If actually replacing an element
; 1391 : 			&&	freeExisting								// And told to free any existing element
; 1392 : 			&&	vector->elements[entry].freeptr != NULL		// And the existing element has a free pointer

  00030	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  00033	8b 45 0c	 mov	 eax, DWORD PTR _entry$[ebp]
  00036	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  00039	73 3e		 jae	 SHORT $LN4@antlr3Vect
  0003b	0f b6 4d 18	 movzx	 ecx, BYTE PTR _freeExisting$[ebp]
  0003f	85 c9		 test	 ecx, ecx
  00041	74 36		 je	 SHORT $LN4@antlr3Vect
  00043	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  00046	8b 02		 mov	 eax, DWORD PTR [edx]
  00048	8b 4d 0c	 mov	 ecx, DWORD PTR _entry$[ebp]
  0004b	83 7c c8 04 00	 cmp	 DWORD PTR [eax+ecx*8+4], 0
  00050	74 27		 je	 SHORT $LN4@antlr3Vect

; 1393 : 		)
; 1394 : 	{
; 1395 : 		vector->elements[entry].freeptr(vector->elements[entry].element);

  00052	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  00055	8b 02		 mov	 eax, DWORD PTR [edx]
  00057	8b f4		 mov	 esi, esp
  00059	8b 4d 0c	 mov	 ecx, DWORD PTR _entry$[ebp]
  0005c	8b 14 c8	 mov	 edx, DWORD PTR [eax+ecx*8]
  0005f	52		 push	 edx
  00060	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00063	8b 08		 mov	 ecx, DWORD PTR [eax]
  00065	8b 55 0c	 mov	 edx, DWORD PTR _entry$[ebp]
  00068	8b 44 d1 04	 mov	 eax, DWORD PTR [ecx+edx*8+4]
  0006c	ff d0		 call	 eax
  0006e	83 c4 04	 add	 esp, 4
  00071	3b f4		 cmp	 esi, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	90		 npad	 1
$LN4@antlr3Vect:

; 1396 : 	}
; 1397 : 
; 1398 : 	// Install the new pointers
; 1399 : 	//
; 1400 : 	vector->elements[entry].freeptr	= freeptr;

  00079	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  0007c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007e	8b 45 0c	 mov	 eax, DWORD PTR _entry$[ebp]
  00081	8b 4d 14	 mov	 ecx, DWORD PTR _freeptr$[ebp]
  00084	89 4c c2 04	 mov	 DWORD PTR [edx+eax*8+4], ecx

; 1401 : 	vector->elements[entry].element	= element;

  00088	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  0008b	8b 02		 mov	 eax, DWORD PTR [edx]
  0008d	8b 4d 0c	 mov	 ecx, DWORD PTR _entry$[ebp]
  00090	8b 55 10	 mov	 edx, DWORD PTR _element$[ebp]
  00093	89 14 c8	 mov	 DWORD PTR [eax+ecx*8], edx

; 1402 : 
; 1403 : 	if (entry >= vector->count)

  00096	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00099	8b 4d 0c	 mov	 ecx, DWORD PTR _entry$[ebp]
  0009c	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0009f	72 0c		 jb	 SHORT $LN5@antlr3Vect

; 1404 : 	{
; 1405 : 		vector->count = entry + 1;

  000a1	8b 55 0c	 mov	 edx, DWORD PTR _entry$[ebp]
  000a4	83 c2 01	 add	 edx, 1
  000a7	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000aa	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN5@antlr3Vect:

; 1406 : 	}
; 1407 : 	return  (ANTLR3_UINT32)(entry);	    // Indicates the replacement was successful

  000ad	8b 45 0c	 mov	 eax, DWORD PTR _entry$[ebp]
$LN1@antlr3Vect:

; 1408 : 
; 1409 : }

  000b0	5e		 pop	 esi
  000b1	3b ec		 cmp	 ebp, esp
  000b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b8	5d		 pop	 ebp
  000b9	c3		 ret	 0
_antlr3VectorSet ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3VectorAdd
_TEXT	SEGMENT
_vector$ = 8						; size = 4
_element$ = 12						; size = 4
_freeptr$ = 16						; size = 4
_antlr3VectorAdd PROC					; COMDAT

; 1345 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1346 : 	// Do we need to resize the vector table?
; 1347 : 	//
; 1348 : 	if	(vector->count == vector->elementsSize)

  00003	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00009	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0000c	3b 91 8c 00 00
	00		 cmp	 edx, DWORD PTR [ecx+140]
  00012	75 19		 jne	 SHORT $LN3@antlr3Vect

; 1349 : 	{
; 1350 : 		// Give no hint, we let it add 1024 or double it
; 1351 : 		if (!antlr3VectorResize(vector, 0))

  00014	6a 00		 push	 0
  00016	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 _antlr3VectorResize
  0001f	83 c4 08	 add	 esp, 8
  00022	0f b6 c8	 movzx	 ecx, al
  00025	85 c9		 test	 ecx, ecx
  00027	75 04		 jne	 SHORT $LN3@antlr3Vect

; 1352 : 		{
; 1353 : 			// Resize failed
; 1354 : 			return 0;

  00029	33 c0		 xor	 eax, eax
  0002b	eb 38		 jmp	 SHORT $LN1@antlr3Vect
$LN3@antlr3Vect:

; 1355 : 		}
; 1356 : 	}
; 1357 : 
; 1358 : 	// Insert the new entry
; 1359 : 	//
; 1360 : 	vector->elements[vector->count].element	= element;

  0002d	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  00030	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00033	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00036	8b 11		 mov	 edx, DWORD PTR [ecx]
  00038	8b 4d 0c	 mov	 ecx, DWORD PTR _element$[ebp]
  0003b	89 0c c2	 mov	 DWORD PTR [edx+eax*8], ecx

; 1361 : 	vector->elements[vector->count].freeptr	= freeptr;

  0003e	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  00041	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00044	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00047	8b 11		 mov	 edx, DWORD PTR [ecx]
  00049	8b 4d 10	 mov	 ecx, DWORD PTR _freeptr$[ebp]
  0004c	89 4c c2 04	 mov	 DWORD PTR [edx+eax*8+4], ecx

; 1362 : 
; 1363 : 	vector->count++;	    // One more element counted

  00050	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  00053	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00056	83 c0 01	 add	 eax, 1
  00059	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  0005c	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1364 : 
; 1365 : 	return  (ANTLR3_UINT32)(vector->count);

  0005f	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  00062	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
$LN1@antlr3Vect:

; 1366 : 
; 1367 : }

  00065	3b ec		 cmp	 ebp, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
_antlr3VectorAdd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3VectorClear
_TEXT	SEGMENT
_entry$ = -4						; size = 4
_vector$ = 8						; size = 4
_antlr3VectorClear PROC					; COMDAT

; 1137 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1138 : 	ANTLR3_UINT32   entry;
; 1139 : 
; 1140 : 	// We must traverse every entry in the vector and if it has
; 1141 : 	// a pointer to a free function then we call it with the
; 1142 : 	// the entry pointer
; 1143 : 	//
; 1144 : 	for	(entry = 0; entry < vector->count; entry++)

  0000c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _entry$[ebp], 0
  00013	eb 09		 jmp	 SHORT $LN4@antlr3Vect
$LN2@antlr3Vect:
  00015	8b 45 fc	 mov	 eax, DWORD PTR _entry$[ebp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 45 fc	 mov	 DWORD PTR _entry$[ebp], eax
$LN4@antlr3Vect:
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00021	8b 55 fc	 mov	 edx, DWORD PTR _entry$[ebp]
  00024	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00027	73 57		 jae	 SHORT $LN3@antlr3Vect

; 1145 : 	{
; 1146 : 		if  (vector->elements[entry].freeptr != NULL)

  00029	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	8b 55 fc	 mov	 edx, DWORD PTR _entry$[ebp]
  00031	83 7c d1 04 00	 cmp	 DWORD PTR [ecx+edx*8+4], 0
  00036	74 27		 je	 SHORT $LN5@antlr3Vect

; 1147 : 		{
; 1148 : 			vector->elements[entry].freeptr(vector->elements[entry].element);

  00038	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0003b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003d	8b f4		 mov	 esi, esp
  0003f	8b 55 fc	 mov	 edx, DWORD PTR _entry$[ebp]
  00042	8b 04 d1	 mov	 eax, DWORD PTR [ecx+edx*8]
  00045	50		 push	 eax
  00046	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00049	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004b	8b 45 fc	 mov	 eax, DWORD PTR _entry$[ebp]
  0004e	8b 4c c2 04	 mov	 ecx, DWORD PTR [edx+eax*8+4]
  00052	ff d1		 call	 ecx
  00054	83 c4 04	 add	 esp, 4
  00057	3b f4		 cmp	 esi, esp
  00059	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005e	90		 npad	 1
$LN5@antlr3Vect:

; 1149 : 		}
; 1150 : 		vector->elements[entry].freeptr    = NULL;

  0005f	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  00062	8b 02		 mov	 eax, DWORD PTR [edx]
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _entry$[ebp]
  00067	c7 44 c8 04 00
	00 00 00	 mov	 DWORD PTR [eax+ecx*8+4], 0

; 1151 : 		vector->elements[entry].element    = NULL;

  0006f	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  00072	8b 02		 mov	 eax, DWORD PTR [edx]
  00074	8b 4d fc	 mov	 ecx, DWORD PTR _entry$[ebp]
  00077	c7 04 c8 00 00
	00 00		 mov	 DWORD PTR [eax+ecx*8], 0

; 1152 : 	}

  0007e	eb 95		 jmp	 SHORT $LN2@antlr3Vect
$LN3@antlr3Vect:

; 1153 : 
; 1154 : 	// Having called any free pointers, we just reset the entry count
; 1155 : 	// back to zero.
; 1156 : 	//
; 1157 : 	vector->count	= 0;

  00080	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  00083	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 1158 : }

  0008a	5e		 pop	 esi
  0008b	83 c4 04	 add	 esp, 4
  0008e	3b ec		 cmp	 ebp, esp
  00090	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
_antlr3VectorClear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antrl3VectorRemove
_TEXT	SEGMENT
_element$ = -4						; size = 4
_vector$ = 8						; size = 4
_entry$ = 12						; size = 4
_antrl3VectorRemove PROC				; COMDAT

; 1251 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1252 : 	void * element;
; 1253 : 
; 1254 : 	// Check this is a valid request first 
; 1255 : 	//
; 1256 : 	if	(entry >= vector->count)

  0000b	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR _entry$[ebp]
  00011	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00014	72 07		 jb	 SHORT $LN2@antrl3Vect

; 1257 : 	{
; 1258 : 		return NULL;

  00016	33 c0		 xor	 eax, eax
  00018	e9 81 00 00 00	 jmp	 $LN1@antrl3Vect
$LN2@antrl3Vect:

; 1259 : 	}
; 1260 : 
; 1261 : 	// Valid request, return the sorted pointer
; 1262 : 	//
; 1263 : 
; 1264 : 	element				    = vector->elements[entry].element;

  0001d	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  00020	8b 02		 mov	 eax, DWORD PTR [edx]
  00022	8b 4d 0c	 mov	 ecx, DWORD PTR _entry$[ebp]
  00025	8b 14 c8	 mov	 edx, DWORD PTR [eax+ecx*8]
  00028	89 55 fc	 mov	 DWORD PTR _element$[ebp], edx

; 1265 : 
; 1266 : 	if	(entry == vector->count - 1)

  0002b	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0002e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00031	83 e9 01	 sub	 ecx, 1
  00034	39 4d 0c	 cmp	 DWORD PTR _entry$[ebp], ecx
  00037	75 21		 jne	 SHORT $LN3@antrl3Vect

; 1267 : 	{
; 1268 : 		// Ensure the pointer is never reused by accident, but otherwise just 
; 1269 : 		// decrement the pointer.
; 1270 : 		///
; 1271 : 		vector->elements[entry].element    = NULL;

  00039	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  0003c	8b 02		 mov	 eax, DWORD PTR [edx]
  0003e	8b 4d 0c	 mov	 ecx, DWORD PTR _entry$[ebp]
  00041	c7 04 c8 00 00
	00 00		 mov	 DWORD PTR [eax+ecx*8], 0

; 1272 : 		vector->elements[entry].freeptr    = NULL;

  00048	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  0004b	8b 02		 mov	 eax, DWORD PTR [edx]
  0004d	8b 4d 0c	 mov	 ecx, DWORD PTR _entry$[ebp]
  00050	c7 44 c8 04 00
	00 00 00	 mov	 DWORD PTR [eax+ecx*8+4], 0

; 1273 : 	}

  00058	eb 32		 jmp	 SHORT $LN4@antrl3Vect
$LN3@antrl3Vect:

; 1274 : 	else
; 1275 : 	{
; 1276 : 		// Need to shuffle trailing pointers back over the deleted entry
; 1277 : 		//
; 1278 : 		ANTLR3_MEMMOVE(vector->elements + entry, vector->elements + entry + 1, sizeof(ANTLR3_VECTOR_ELEMENT) * (vector->count - entry - 1));

  0005a	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  0005d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00060	2b 45 0c	 sub	 eax, DWORD PTR _entry$[ebp]
  00063	8d 0c c5 f8 ff
	ff ff		 lea	 ecx, DWORD PTR [eax*8-8]
  0006a	51		 push	 ecx
  0006b	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  0006e	8b 02		 mov	 eax, DWORD PTR [edx]
  00070	8b 4d 0c	 mov	 ecx, DWORD PTR _entry$[ebp]
  00073	8d 54 c8 08	 lea	 edx, DWORD PTR [eax+ecx*8+8]
  00077	52		 push	 edx
  00078	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0007b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007d	8b 55 0c	 mov	 edx, DWORD PTR _entry$[ebp]
  00080	8d 04 d1	 lea	 eax, DWORD PTR [ecx+edx*8]
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _memmove
  00089	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@antrl3Vect:

; 1279 : 	}
; 1280 : 
; 1281 : 	// One less entry in the vector now
; 1282 : 	//
; 1283 : 	vector->count--;

  0008c	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  0008f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00092	83 ea 01	 sub	 edx, 1
  00095	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00098	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1284 : 
; 1285 : 	return  element;

  0009b	8b 45 fc	 mov	 eax, DWORD PTR _element$[ebp]
$LN1@antrl3Vect:

; 1286 : }

  0009e	83 c4 04	 add	 esp, 4
  000a1	3b ec		 cmp	 ebp, esp
  000a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
_antrl3VectorRemove ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3VectorGet
_TEXT	SEGMENT
_vector$ = 8						; size = 4
_entry$ = 12						; size = 4
_antlr3VectorGet PROC					; COMDAT

; 1232 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1233 : 	// Ensure this is a valid request
; 1234 : 	//
; 1235 : 	if	(entry < vector->count)

  00003	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _entry$[ebp]
  00009	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0000c	73 0f		 jae	 SHORT $LN2@antlr3Vect

; 1236 : 	{
; 1237 : 		return	vector->elements[entry].element;

  0000e	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  00011	8b 02		 mov	 eax, DWORD PTR [edx]
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR _entry$[ebp]
  00016	8b 04 c8	 mov	 eax, DWORD PTR [eax+ecx*8]
  00019	eb 04		 jmp	 SHORT $LN3@antlr3Vect

; 1238 : 	}

  0001b	eb 02		 jmp	 SHORT $LN3@antlr3Vect
$LN2@antlr3Vect:

; 1239 : 	else
; 1240 : 	{
; 1241 : 		// I know nothing, Mr. Fawlty!
; 1242 : 		//
; 1243 : 		return	NULL;

  0001d	33 c0		 xor	 eax, eax
$LN3@antlr3Vect:

; 1244 : 	}
; 1245 : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
_antlr3VectorGet ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3VectorDel
_TEXT	SEGMENT
_vector$ = 8						; size = 4
_entry$ = 12						; size = 4
_antlr3VectorDel PROC					; COMDAT

; 1196 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1197 : 	// Check this is a valid request first
; 1198 : 	//
; 1199 : 	if	(entry >= vector->count)

  00004	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _entry$[ebp]
  0000a	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0000d	72 05		 jb	 SHORT $LN2@antlr3Vect

; 1200 : 	{
; 1201 : 		return;

  0000f	e9 a5 00 00 00	 jmp	 $LN1@antlr3Vect
$LN2@antlr3Vect:

; 1202 : 	}
; 1203 : 
; 1204 : 	// Valid request, check for free pointer and call it if present
; 1205 : 	//
; 1206 : 	if	(vector->elements[entry].freeptr != NULL)

  00014	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  00017	8b 02		 mov	 eax, DWORD PTR [edx]
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR _entry$[ebp]
  0001c	83 7c c8 04 00	 cmp	 DWORD PTR [eax+ecx*8+4], 0
  00021	74 36		 je	 SHORT $LN3@antlr3Vect

; 1207 : 	{
; 1208 : 		vector->elements[entry].freeptr(vector->elements[entry].element);

  00023	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  00026	8b 02		 mov	 eax, DWORD PTR [edx]
  00028	8b f4		 mov	 esi, esp
  0002a	8b 4d 0c	 mov	 ecx, DWORD PTR _entry$[ebp]
  0002d	8b 14 c8	 mov	 edx, DWORD PTR [eax+ecx*8]
  00030	52		 push	 edx
  00031	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  00034	8b 08		 mov	 ecx, DWORD PTR [eax]
  00036	8b 55 0c	 mov	 edx, DWORD PTR _entry$[ebp]
  00039	8b 44 d1 04	 mov	 eax, DWORD PTR [ecx+edx*8+4]
  0003d	ff d0		 call	 eax
  0003f	83 c4 04	 add	 esp, 4
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1209 : 		vector->elements[entry].freeptr    = NULL;

  00049	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  0004c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004e	8b 45 0c	 mov	 eax, DWORD PTR _entry$[ebp]
  00051	c7 44 c2 04 00
	00 00 00	 mov	 DWORD PTR [edx+eax*8+4], 0
$LN3@antlr3Vect:

; 1210 : 	}
; 1211 : 
; 1212 : 	if	(entry == vector->count - 1)

  00059	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  0005c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0005f	83 ea 01	 sub	 edx, 1
  00062	39 55 0c	 cmp	 DWORD PTR _entry$[ebp], edx
  00065	75 11		 jne	 SHORT $LN4@antlr3Vect

; 1213 : 	{
; 1214 : 		// Ensure the pointer is never reused by accident, but otherwise just 
; 1215 : 		// decrement the pointer.
; 1216 : 		//
; 1217 : 		vector->elements[entry].element    = NULL;

  00067	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0006a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006c	8b 55 0c	 mov	 edx, DWORD PTR _entry$[ebp]
  0006f	c7 04 d1 00 00
	00 00		 mov	 DWORD PTR [ecx+edx*8], 0

; 1218 : 	}

  00076	eb 32		 jmp	 SHORT $LN5@antlr3Vect
$LN4@antlr3Vect:

; 1219 : 	else
; 1220 : 	{
; 1221 : 		// Need to shuffle trailing pointers back over the deleted entry
; 1222 : 		//
; 1223 : 		ANTLR3_MEMMOVE(vector->elements + entry, vector->elements + entry + 1, sizeof(ANTLR3_VECTOR_ELEMENT) * (vector->count - entry - 1));

  00078	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0007b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0007e	2b 4d 0c	 sub	 ecx, DWORD PTR _entry$[ebp]
  00081	8d 14 cd f8 ff
	ff ff		 lea	 edx, DWORD PTR [ecx*8-8]
  00088	52		 push	 edx
  00089	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0008c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008e	8b 55 0c	 mov	 edx, DWORD PTR _entry$[ebp]
  00091	8d 44 d1 08	 lea	 eax, DWORD PTR [ecx+edx*8+8]
  00095	50		 push	 eax
  00096	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00099	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009b	8b 45 0c	 mov	 eax, DWORD PTR _entry$[ebp]
  0009e	8d 0c c2	 lea	 ecx, DWORD PTR [edx+eax*8]
  000a1	51		 push	 ecx
  000a2	e8 00 00 00 00	 call	 _memmove
  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@antlr3Vect:

; 1224 : 	}
; 1225 : 
; 1226 : 	// One less entry in the vector now
; 1227 : 	//
; 1228 : 	vector->count--;

  000aa	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  000ad	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000b0	83 e8 01	 sub	 eax, 1
  000b3	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  000b6	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN1@antlr3Vect:

; 1229 : }

  000b9	5e		 pop	 esi
  000ba	3b ec		 cmp	 ebp, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c1	5d		 pop	 ebp
  000c2	c3		 ret	 0
_antlr3VectorDel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3VectorFree
_TEXT	SEGMENT
_entry$ = -4						; size = 4
_vector$ = 8						; size = 4
_antlr3VectorFree PROC					; COMDAT

; 1162 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1163 : 	ANTLR3_UINT32   entry;
; 1164 : 
; 1165 : 	// We must traverse every entry in the vector and if it has
; 1166 : 	// a pointer to a free function then we call it with the
; 1167 : 	// the entry pointer
; 1168 : 	//
; 1169 : 	for	(entry = 0; entry < vector->count; entry++)

  0000c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _entry$[ebp], 0
  00013	eb 09		 jmp	 SHORT $LN4@antlr3Vect
$LN2@antlr3Vect:
  00015	8b 45 fc	 mov	 eax, DWORD PTR _entry$[ebp]
  00018	83 c0 01	 add	 eax, 1
  0001b	89 45 fc	 mov	 DWORD PTR _entry$[ebp], eax
$LN4@antlr3Vect:
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00021	8b 55 fc	 mov	 edx, DWORD PTR _entry$[ebp]
  00024	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00027	73 57		 jae	 SHORT $LN3@antlr3Vect

; 1170 : 	{
; 1171 : 		if  (vector->elements[entry].freeptr != NULL)

  00029	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	8b 55 fc	 mov	 edx, DWORD PTR _entry$[ebp]
  00031	83 7c d1 04 00	 cmp	 DWORD PTR [ecx+edx*8+4], 0
  00036	74 27		 je	 SHORT $LN5@antlr3Vect

; 1172 : 		{
; 1173 : 			vector->elements[entry].freeptr(vector->elements[entry].element);

  00038	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0003b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003d	8b f4		 mov	 esi, esp
  0003f	8b 55 fc	 mov	 edx, DWORD PTR _entry$[ebp]
  00042	8b 04 d1	 mov	 eax, DWORD PTR [ecx+edx*8]
  00045	50		 push	 eax
  00046	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00049	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004b	8b 45 fc	 mov	 eax, DWORD PTR _entry$[ebp]
  0004e	8b 4c c2 04	 mov	 ecx, DWORD PTR [edx+eax*8+4]
  00052	ff d1		 call	 ecx
  00054	83 c4 04	 add	 esp, 4
  00057	3b f4		 cmp	 esi, esp
  00059	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005e	90		 npad	 1
$LN5@antlr3Vect:

; 1174 : 		}
; 1175 : 		vector->elements[entry].freeptr    = NULL;

  0005f	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  00062	8b 02		 mov	 eax, DWORD PTR [edx]
  00064	8b 4d fc	 mov	 ecx, DWORD PTR _entry$[ebp]
  00067	c7 44 c8 04 00
	00 00 00	 mov	 DWORD PTR [eax+ecx*8+4], 0

; 1176 : 		vector->elements[entry].element    = NULL;

  0006f	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  00072	8b 02		 mov	 eax, DWORD PTR [edx]
  00074	8b 4d fc	 mov	 ecx, DWORD PTR _entry$[ebp]
  00077	c7 04 c8 00 00
	00 00		 mov	 DWORD PTR [eax+ecx*8], 0

; 1177 : 	}

  0007e	eb 95		 jmp	 SHORT $LN2@antlr3Vect
$LN3@antlr3Vect:

; 1178 : 
; 1179 : 	if	(vector->factoryMade == ANTLR3_FALSE)

  00080	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  00083	0f b6 82 88 00
	00 00		 movzx	 eax, BYTE PTR [edx+136]
  0008a	85 c0		 test	 eax, eax
  0008c	75 45		 jne	 SHORT $LN6@antlr3Vect

; 1180 : 	{
; 1181 : 		// The entries are freed, so free the element allocation
; 1182 : 		//
; 1183 :         if  (vector->elementsSize > ANTLR3_VECTOR_INTERNAL_SIZE)

  0008e	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00091	83 b9 8c 00 00
	00 10		 cmp	 DWORD PTR [ecx+140], 16	; 00000010H
  00098	76 19		 jbe	 SHORT $LN7@antlr3Vect

; 1184 :         {
; 1185 :             ANTLR3_FREE(vector->elements);

  0009a	8b f4		 mov	 esi, esp
  0009c	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  0009f	8b 02		 mov	 eax, DWORD PTR [edx]
  000a1	50		 push	 eax
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  000a8	83 c4 04	 add	 esp, 4
  000ab	3b f4		 cmp	 esi, esp
  000ad	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b2	90		 npad	 1
$LN7@antlr3Vect:

; 1186 :         }
; 1187 : 		vector->elements = NULL;

  000b3	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  000b6	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 1188 : 
; 1189 : 		// Finally, free the allocation for the vector itself
; 1190 : 		//
; 1191 : 		ANTLR3_FREE(vector);

  000bc	8b f4		 mov	 esi, esp
  000be	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  000c1	52		 push	 edx
  000c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  000c8	83 c4 04	 add	 esp, 4
  000cb	3b f4		 cmp	 esi, esp
  000cd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d2	90		 npad	 1
$LN6@antlr3Vect:

; 1192 : 	}
; 1193 : }

  000d3	5e		 pop	 esi
  000d4	83 c4 04	 add	 esp, 4
  000d7	3b ec		 cmp	 ebp, esp
  000d9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c3		 ret	 0
_antlr3VectorFree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3StackPeek
_TEXT	SEGMENT
_stack$ = 8						; size = 4
_antlr3StackPeek PROC					; COMDAT

; 1042 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1043 :     return  stack->top;

  00003	8b 45 08	 mov	 eax, DWORD PTR _stack$[ebp]
  00006	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1044 : }

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
_antlr3StackPeek ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3StackSize
_TEXT	SEGMENT
_stack$ = 8						; size = 4
_antlr3StackSize PROC					; COMDAT

; 1000 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1001 :     return  stack->vector->count;

  00003	8b 45 08	 mov	 eax, DWORD PTR _stack$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1002 : }

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
_antlr3StackSize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3StackPush
_TEXT	SEGMENT
_stack$ = 8						; size = 4
_element$ = 12						; size = 4
_freeptr$ = 16						; size = 4
_antlr3StackPush PROC					; COMDAT

; 1048 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1049 :     stack->top	= element;

  00004	8b 45 08	 mov	 eax, DWORD PTR _stack$[ebp]
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _element$[ebp]
  0000a	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1050 :     return (ANTLR3_BOOLEAN)(stack->vector->add(stack->vector, element, freeptr));

  0000d	8b f4		 mov	 esi, esp
  0000f	8b 55 10	 mov	 edx, DWORD PTR _freeptr$[ebp]
  00012	52		 push	 edx
  00013	8b 45 0c	 mov	 eax, DWORD PTR _element$[ebp]
  00016	50		 push	 eax
  00017	8b 4d 08	 mov	 ecx, DWORD PTR _stack$[ebp]
  0001a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001c	52		 push	 edx
  0001d	8b 45 08	 mov	 eax, DWORD PTR _stack$[ebp]
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	8b 91 a8 00 00
	00		 mov	 edx, DWORD PTR [ecx+168]
  00028	ff d2		 call	 edx
  0002a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002d	3b f4		 cmp	 esi, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1051 : }

  00034	5e		 pop	 esi
  00035	3b ec		 cmp	 ebp, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
_antlr3StackPush ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3StackGet
_TEXT	SEGMENT
_stack$ = 8						; size = 4
_key$ = 12						; size = 4
_antlr3StackGet PROC					; COMDAT

; 1036 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1037 :     return  stack->vector->get(stack->vector, (ANTLR3_UINT32)key);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _stack$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	52		 push	 edx
  00010	8b 45 08	 mov	 eax, DWORD PTR _stack$[ebp]
  00013	8b 08		 mov	 ecx, DWORD PTR [eax]
  00015	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [ecx+152]
  0001b	ff d2		 call	 edx
  0001d	83 c4 08	 add	 esp, 8
  00020	3b f4		 cmp	 esi, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1038 : }

  00027	5e		 pop	 esi
  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_antlr3StackGet ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3StackPop
_TEXT	SEGMENT
_stack$ = 8						; size = 4
_antlr3StackPop PROC					; COMDAT

; 1019 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1020 :     // Delete the element that is currently at the top of the stack
; 1021 :     //
; 1022 :     stack->vector->del(stack->vector, stack->vector->count - 1);

  00004	8b 45 08	 mov	 eax, DWORD PTR _stack$[ebp]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0000c	83 ea 01	 sub	 edx, 1
  0000f	8b f4		 mov	 esi, esp
  00011	52		 push	 edx
  00012	8b 45 08	 mov	 eax, DWORD PTR _stack$[ebp]
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	51		 push	 ecx
  00018	8b 55 08	 mov	 edx, DWORD PTR _stack$[ebp]
  0001b	8b 02		 mov	 eax, DWORD PTR [edx]
  0001d	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [eax+148]
  00023	ff d1		 call	 ecx
  00025	83 c4 08	 add	 esp, 8
  00028	3b f4		 cmp	 esi, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1023 : 
; 1024 :     // And get the element that is the now the top of the stack (if anything)
; 1025 :     // NOTE! This is not quite like a 'real' stack, which would normally return you
; 1026 :     // the current top of the stack, then remove it from the stack.
; 1027 :     // TODO: Review this, it is correct for follow sets which is what this was done for
; 1028 :     //       but is not as obvious when using it as a 'real'stack.
; 1029 :     //
; 1030 :     stack->top = stack->vector->get(stack->vector, stack->vector->count - 1);

  0002f	8b 55 08	 mov	 edx, DWORD PTR _stack$[ebp]
  00032	8b 02		 mov	 eax, DWORD PTR [edx]
  00034	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00037	83 e9 01	 sub	 ecx, 1
  0003a	8b f4		 mov	 esi, esp
  0003c	51		 push	 ecx
  0003d	8b 55 08	 mov	 edx, DWORD PTR _stack$[ebp]
  00040	8b 02		 mov	 eax, DWORD PTR [edx]
  00042	50		 push	 eax
  00043	8b 4d 08	 mov	 ecx, DWORD PTR _stack$[ebp]
  00046	8b 11		 mov	 edx, DWORD PTR [ecx]
  00048	8b 82 98 00 00
	00		 mov	 eax, DWORD PTR [edx+152]
  0004e	ff d0		 call	 eax
  00050	83 c4 08	 add	 esp, 8
  00053	3b f4		 cmp	 esi, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	8b 4d 08	 mov	 ecx, DWORD PTR _stack$[ebp]
  0005d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1031 :     return stack->top;

  00060	8b 55 08	 mov	 edx, DWORD PTR _stack$[ebp]
  00063	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 1032 : }

  00066	5e		 pop	 esi
  00067	3b ec		 cmp	 ebp, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
_antlr3StackPop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3StackFree
_TEXT	SEGMENT
_stack$ = 8						; size = 4
_antlr3StackFree PROC					; COMDAT

; 1007 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1008 :     /* Free the list that supports the stack
; 1009 :      */
; 1010 :     stack->vector->free(stack->vector);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 08	 mov	 eax, DWORD PTR _stack$[ebp]
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	51		 push	 ecx
  0000c	8b 55 08	 mov	 edx, DWORD PTR _stack$[ebp]
  0000f	8b 02		 mov	 eax, DWORD PTR [edx]
  00011	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00017	ff d1		 call	 ecx
  00019	83 c4 04	 add	 esp, 4
  0001c	3b f4		 cmp	 esi, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1011 :     stack->vector   = NULL;

  00023	8b 55 08	 mov	 edx, DWORD PTR _stack$[ebp]
  00026	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 1012 :     stack->top	    = NULL;

  0002c	8b 45 08	 mov	 eax, DWORD PTR _stack$[ebp]
  0002f	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1013 : 
; 1014 :     ANTLR3_FREE(stack);

  00036	8b f4		 mov	 esi, esp
  00038	8b 4d 08	 mov	 ecx, DWORD PTR _stack$[ebp]
  0003b	51		 push	 ecx
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00042	83 c4 04	 add	 esp, 4
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	90		 npad	 1

; 1015 : }

  0004d	5e		 pop	 esi
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_antlr3StackFree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3ListSize
_TEXT	SEGMENT
_list$ = 8						; size = 4
_antlr3ListSize PROC					; COMDAT

; 899  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 900  :     return  list->table->size(list->table);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	51		 push	 ecx
  0000c	8b 55 08	 mov	 edx, DWORD PTR _list$[ebp]
  0000f	8b 02		 mov	 eax, DWORD PTR [edx]
  00011	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00014	ff d1		 call	 ecx
  00016	83 c4 04	 add	 esp, 4
  00019	3b f4		 cmp	 esi, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 901  : }

  00020	5e		 pop	 esi
  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
_antlr3ListSize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3ListRemove
_TEXT	SEGMENT
_entry$ = -4						; size = 4
_list$ = 8						; size = 4
_key$ = 12						; size = 4
_antlr3ListRemove PROC					; COMDAT

; 942  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 943  :     pANTLR3_HASH_ENTRY	    entry;
; 944  : 
; 945  :     entry = list->table->removeI(list->table, key);

  0000c	8b f4		 mov	 esi, esp
  0000e	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _list$[ebp]
  00015	8b 11		 mov	 edx, DWORD PTR [ecx]
  00017	52		 push	 edx
  00018	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  0001b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001d	8b 51 2c	 mov	 edx, DWORD PTR [ecx+44]
  00020	ff d2		 call	 edx
  00022	83 c4 08	 add	 esp, 8
  00025	3b f4		 cmp	 esi, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	89 45 fc	 mov	 DWORD PTR _entry$[ebp], eax

; 946  : 
; 947  :     if	(entry != NULL)

  0002f	83 7d fc 00	 cmp	 DWORD PTR _entry$[ebp], 0
  00033	74 0a		 je	 SHORT $LN2@antlr3List

; 948  :     {
; 949  :         return  entry->data;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _entry$[ebp]
  00038	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0003b	eb 04		 jmp	 SHORT $LN3@antlr3List

; 950  :     }

  0003d	eb 02		 jmp	 SHORT $LN3@antlr3List
$LN2@antlr3List:

; 951  :     else
; 952  :     {
; 953  : 	return	NULL;

  0003f	33 c0		 xor	 eax, eax
$LN3@antlr3List:

; 954  :     }
; 955  : }

  00041	5e		 pop	 esi
  00042	83 c4 04	 add	 esp, 4
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_antlr3ListRemove ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3ListAdd
_TEXT	SEGMENT
_key$ = -4						; size = 4
_list$ = 8						; size = 4
_element$ = 12						; size = 4
_freeptr$ = 16						; size = 4
_antlr3ListAdd PROC					; COMDAT

; 930  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 931  :     ANTLR3_INTKEY   key;
; 932  : 
; 933  :     key	    = list->table->size(list->table) + 1;

  0000c	8b f4		 mov	 esi, esp
  0000e	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00011	8b 08		 mov	 ecx, DWORD PTR [eax]
  00013	51		 push	 ecx
  00014	8b 55 08	 mov	 edx, DWORD PTR _list$[ebp]
  00017	8b 02		 mov	 eax, DWORD PTR [edx]
  00019	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0001c	ff d1		 call	 ecx
  0001e	83 c4 04	 add	 esp, 4
  00021	3b f4		 cmp	 esi, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	83 c0 01	 add	 eax, 1
  0002b	89 45 fc	 mov	 DWORD PTR _key$[ebp], eax

; 934  :     return list->put(list, key, element, freeptr);

  0002e	8b f4		 mov	 esi, esp
  00030	8b 55 10	 mov	 edx, DWORD PTR _freeptr$[ebp]
  00033	52		 push	 edx
  00034	8b 45 0c	 mov	 eax, DWORD PTR _element$[ebp]
  00037	50		 push	 eax
  00038	8b 4d fc	 mov	 ecx, DWORD PTR _key$[ebp]
  0003b	51		 push	 ecx
  0003c	8b 55 08	 mov	 edx, DWORD PTR _list$[ebp]
  0003f	52		 push	 edx
  00040	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00043	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00046	ff d1		 call	 ecx
  00048	83 c4 10	 add	 esp, 16			; 00000010H
  0004b	3b f4		 cmp	 esi, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 935  : }

  00052	5e		 pop	 esi
  00053	83 c4 04	 add	 esp, 4
  00056	3b ec		 cmp	 ebp, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
_antlr3ListAdd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3ListPut
_TEXT	SEGMENT
_list$ = 8						; size = 4
_key$ = 12						; size = 4
_element$ = 16						; size = 4
_freeptr$ = 20						; size = 4
_antlr3ListPut PROC					; COMDAT

; 959  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 960  :     return  list->table->putI(list->table, key, element, freeptr);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 14	 mov	 eax, DWORD PTR _freeptr$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _element$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 0c	 mov	 edx, DWORD PTR _key$[ebp]
  00011	52		 push	 edx
  00012	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00015	8b 08		 mov	 ecx, DWORD PTR [eax]
  00017	51		 push	 ecx
  00018	8b 55 08	 mov	 edx, DWORD PTR _list$[ebp]
  0001b	8b 02		 mov	 eax, DWORD PTR [edx]
  0001d	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00020	ff d1		 call	 ecx
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	3b f4		 cmp	 esi, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 961  : }

  0002c	5e		 pop	 esi
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
_antlr3ListPut ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3ListGet
_TEXT	SEGMENT
_list$ = 8						; size = 4
_key$ = 12						; size = 4
_antlr3ListGet PROC					; COMDAT

; 923  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 924  :     return list->table->getI(list->table, key);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _list$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	52		 push	 edx
  00010	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00013	8b 08		 mov	 ecx, DWORD PTR [eax]
  00015	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00018	ff d2		 call	 edx
  0001a	83 c4 08	 add	 esp, 8
  0001d	3b f4		 cmp	 esi, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 925  : }

  00024	5e		 pop	 esi
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
_antlr3ListGet ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3ListDelete
_TEXT	SEGMENT
_list$ = 8						; size = 4
_key$ = 12						; size = 4
_antlr3ListDelete PROC					; COMDAT

; 917  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 918  :     list->table->delI(list->table, key);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _list$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	52		 push	 edx
  00010	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00013	8b 08		 mov	 ecx, DWORD PTR [eax]
  00015	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00018	ff d2		 call	 edx
  0001a	83 c4 08	 add	 esp, 8
  0001d	3b f4		 cmp	 esi, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	90		 npad	 1

; 919  : }

  00025	5e		 pop	 esi
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
_antlr3ListDelete ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3ListFree
_TEXT	SEGMENT
_list$ = 8						; size = 4
_antlr3ListFree PROC					; COMDAT

; 905  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 906  :     /* Free the hashtable that stores the list
; 907  :      */
; 908  :     list->table->free(list->table);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	51		 push	 ecx
  0000c	8b 55 08	 mov	 edx, DWORD PTR _list$[ebp]
  0000f	8b 02		 mov	 eax, DWORD PTR [edx]
  00011	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00014	ff d1		 call	 ecx
  00016	83 c4 04	 add	 esp, 4
  00019	3b f4		 cmp	 esi, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 909  : 
; 910  :     /* Free the allocation for the list itself
; 911  :      */
; 912  :     ANTLR3_FREE(list);

  00020	8b f4		 mov	 esi, esp
  00022	8b 55 08	 mov	 edx, DWORD PTR _list$[ebp]
  00025	52		 push	 edx
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0002c	83 c4 04	 add	 esp, 4
  0002f	3b f4		 cmp	 esi, esp
  00031	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00036	90		 npad	 1

; 913  : }

  00037	5e		 pop	 esi
  00038	3b ec		 cmp	 ebp, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
_antlr3ListFree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3EnumFree
_TEXT	SEGMENT
_en$ = 8						; size = 4
_antlr3EnumFree PROC					; COMDAT

; 823  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 824  :     /* Nothing to check, we just free it.
; 825  :      */
; 826  :     ANTLR3_FREE(en);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00010	83 c4 04	 add	 esp, 4
  00013	3b f4		 cmp	 esi, esp
  00015	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001a	90		 npad	 1

; 827  : }

  0001b	5e		 pop	 esi
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
_antlr3EnumFree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3EnumNext
_TEXT	SEGMENT
_en$ = 8						; size = 4
_key$ = 12						; size = 4
_data$ = 16						; size = 4
_antlr3EnumNext PROC					; COMDAT

; 730  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 731  :     /* If the current entry is valid, then use it
; 732  :      */
; 733  :     if  (en->bucket >= en->table->modulo)

  00003	8b 45 08	 mov	 eax, DWORD PTR _en$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  0000b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0000e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00011	72 07		 jb	 SHORT $LN2@antlr3Enum

; 734  :     {
; 735  :         /* Already exhausted the table
; 736  :          */
; 737  :         return	ANTLR3_FAIL;

  00013	b8 01 00 00 00	 mov	 eax, 1
  00018	eb 27		 jmp	 SHORT $LN1@antlr3Enum
$LN2@antlr3Enum:

; 738  :     }
; 739  : 
; 740  :     /* Pointers are already set to the current entry to return, or
; 741  :      * we would not be at this point in the logic flow.
; 742  :      */
; 743  :     *key	= &(en->entry->keybase);

  0001a	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  0001d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00020	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  00023	89 10		 mov	 DWORD PTR [eax], edx

; 744  :     *data	= en->entry->data;

  00025	8b 4d 08	 mov	 ecx, DWORD PTR _en$[ebp]
  00028	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002b	8b 45 10	 mov	 eax, DWORD PTR _data$[ebp]
  0002e	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00031	89 08		 mov	 DWORD PTR [eax], ecx

; 745  : 
; 746  :     /* Return pointers are set up, so now we move the element
; 747  :      * pointer to the next in the table (if any).
; 748  :      */
; 749  :     antlr3EnumNextEntry(en);

  00033	8b 55 08	 mov	 edx, DWORD PTR _en$[ebp]
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 _antlr3EnumNextEntry
  0003c	83 c4 04	 add	 esp, 4

; 750  : 
; 751  :     return	ANTLR3_SUCCESS;

  0003f	33 c0		 xor	 eax, eax
$LN1@antlr3Enum:

; 752  : }

  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
_antlr3EnumNext ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3HashSize
_TEXT	SEGMENT
_table$ = 8						; size = 4
_antlr3HashSize PROC					; COMDAT

; 267  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 268  :     return  table->count;

  00003	8b 45 08	 mov	 eax, DWORD PTR _table$[ebp]
  00006	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]

; 269  : }

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
_antlr3HashSize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3HashFree
_TEXT	SEGMENT
_nextEntry$ = -16					; size = 4
_entry$ = -12						; size = 4
_thisBucket$ = -8					; size = 4
_bucket$ = -4						; size = 4
_table$ = 8						; size = 4
_antlr3HashFree PROC					; COMDAT

; 196  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000f	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00012	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00015	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 197  :     ANTLR3_UINT32	bucket;	/* Used to traverse the buckets	*/
; 198  : 
; 199  :     pANTLR3_HASH_BUCKET	thisBucket;
; 200  :     pANTLR3_HASH_ENTRY	entry;
; 201  :     pANTLR3_HASH_ENTRY	nextEntry;
; 202  : 
; 203  :     /* Free the table, all buckets and all entries, and all the
; 204  :      * keys and data (if the table exists)
; 205  :      */
; 206  :     if	(table	!= NULL)

  00018	83 7d 08 00	 cmp	 DWORD PTR _table$[ebp], 0
  0001c	0f 84 ea 00 00
	00		 je	 $LN7@antlr3Hash

; 207  :     {
; 208  : 	for	(bucket = 0; bucket < table->modulo; bucket++)

  00022	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _bucket$[ebp], 0
  00029	eb 09		 jmp	 SHORT $LN4@antlr3Hash
$LN2@antlr3Hash:
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _bucket$[ebp]
  0002e	83 c0 01	 add	 eax, 1
  00031	89 45 fc	 mov	 DWORD PTR _bucket$[ebp], eax
$LN4@antlr3Hash:
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _table$[ebp]
  00037	8b 55 fc	 mov	 edx, DWORD PTR _bucket$[ebp]
  0003a	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0003d	0f 83 af 00 00
	00		 jae	 $LN3@antlr3Hash

; 209  : 	{
; 210  : 	    thisBucket	= &(table->buckets[bucket]);

  00043	8b 45 08	 mov	 eax, DWORD PTR _table$[ebp]
  00046	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00049	8b 55 fc	 mov	 edx, DWORD PTR _bucket$[ebp]
  0004c	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  0004f	89 45 f8	 mov	 DWORD PTR _thisBucket$[ebp], eax

; 211  : 
; 212  : 	    /* Allow sparse tables, though we don't create them as such at present
; 213  : 	     */
; 214  : 	    if	( thisBucket != NULL)

  00052	83 7d f8 00	 cmp	 DWORD PTR _thisBucket$[ebp], 0
  00056	0f 84 91 00 00
	00		 je	 $LN8@antlr3Hash

; 215  : 	    {
; 216  : 		entry	= thisBucket->entries;

  0005c	8b 4d f8	 mov	 ecx, DWORD PTR _thisBucket$[ebp]
  0005f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00061	89 55 f4	 mov	 DWORD PTR _entry$[ebp], edx
$LN5@antlr3Hash:

; 217  : 
; 218  : 		/* Search all entries in the bucket and free them up
; 219  : 		 */
; 220  : 		while	(entry != NULL)

  00064	83 7d f4 00	 cmp	 DWORD PTR _entry$[ebp], 0
  00068	74 7a		 je	 SHORT $LN6@antlr3Hash

; 221  : 		{
; 222  : 		    /* Save next entry - we do not want to access memory in entry after we
; 223  : 		     * have freed it.
; 224  : 		     */
; 225  : 		    nextEntry	= entry->nextEntry;

  0006a	8b 45 f4	 mov	 eax, DWORD PTR _entry$[ebp]
  0006d	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00070	89 4d f0	 mov	 DWORD PTR _nextEntry$[ebp], ecx

; 226  : 
; 227  : 		    /* Free any data pointer, this only happens if the user supplied
; 228  : 		     * a pointer to a routine that knwos how to free the structure they
; 229  : 		     * added to the table.
; 230  : 		     */
; 231  : 		    if	(entry->free != NULL)

  00073	8b 55 f4	 mov	 edx, DWORD PTR _entry$[ebp]
  00076	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  0007a	74 1c		 je	 SHORT $LN9@antlr3Hash

; 232  : 		    {
; 233  : 			entry->free(entry->data);

  0007c	8b f4		 mov	 esi, esp
  0007e	8b 45 f4	 mov	 eax, DWORD PTR _entry$[ebp]
  00081	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00084	51		 push	 ecx
  00085	8b 55 f4	 mov	 edx, DWORD PTR _entry$[ebp]
  00088	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0008b	ff d0		 call	 eax
  0008d	83 c4 04	 add	 esp, 4
  00090	3b f4		 cmp	 esi, esp
  00092	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00097	90		 npad	 1
$LN9@antlr3Hash:

; 234  : 		    }
; 235  : 
; 236  : 		    /* Free the key memory - we know that we allocated this
; 237  : 		     */
; 238  : 		    if	(entry->keybase.type == ANTLR3_HASH_TYPE_STR && entry->keybase.key.sKey != NULL)

  00098	8b 4d f4	 mov	 ecx, DWORD PTR _entry$[ebp]
  0009b	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  0009e	83 fa 01	 cmp	 edx, 1
  000a1	75 23		 jne	 SHORT $LN10@antlr3Hash
  000a3	8b 45 f4	 mov	 eax, DWORD PTR _entry$[ebp]
  000a6	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  000aa	74 1a		 je	 SHORT $LN10@antlr3Hash

; 239  : 		    {
; 240  : 			ANTLR3_FREE(entry->keybase.key.sKey);

  000ac	8b f4		 mov	 esi, esp
  000ae	8b 4d f4	 mov	 ecx, DWORD PTR _entry$[ebp]
  000b1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000b4	52		 push	 edx
  000b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  000bb	83 c4 04	 add	 esp, 4
  000be	3b f4		 cmp	 esi, esp
  000c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c5	90		 npad	 1
$LN10@antlr3Hash:

; 241  : 		    }
; 242  : 
; 243  : 		    /* Free this entry
; 244  : 		     */
; 245  : 		    ANTLR3_FREE(entry);

  000c6	8b f4		 mov	 esi, esp
  000c8	8b 45 f4	 mov	 eax, DWORD PTR _entry$[ebp]
  000cb	50		 push	 eax
  000cc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  000d2	83 c4 04	 add	 esp, 4
  000d5	3b f4		 cmp	 esi, esp
  000d7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 246  : 		    entry   = nextEntry;    /* Load next pointer to see if we shoud free it */

  000dc	8b 4d f0	 mov	 ecx, DWORD PTR _nextEntry$[ebp]
  000df	89 4d f4	 mov	 DWORD PTR _entry$[ebp], ecx

; 247  : 		}

  000e2	eb 80		 jmp	 SHORT $LN5@antlr3Hash
$LN6@antlr3Hash:

; 248  : 		/* Invalidate the current pointer
; 249  : 		 */
; 250  : 		thisBucket->entries = NULL;

  000e4	8b 55 f8	 mov	 edx, DWORD PTR _thisBucket$[ebp]
  000e7	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
$LN8@antlr3Hash:

; 251  : 	    }
; 252  : 	}

  000ed	e9 39 ff ff ff	 jmp	 $LN2@antlr3Hash
$LN3@antlr3Hash:

; 253  : 
; 254  : 	/* Now we can free the bucket memory
; 255  : 	 */
; 256  : 	ANTLR3_FREE(table->buckets);

  000f2	8b f4		 mov	 esi, esp
  000f4	8b 45 08	 mov	 eax, DWORD PTR _table$[ebp]
  000f7	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000fa	51		 push	 ecx
  000fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00101	83 c4 04	 add	 esp, 4
  00104	3b f4		 cmp	 esi, esp
  00106	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010b	90		 npad	 1
$LN7@antlr3Hash:

; 257  :     }
; 258  : 
; 259  :     /* Now we free teh memory for the table itself
; 260  :      */
; 261  :     ANTLR3_FREE(table);

  0010c	8b f4		 mov	 esi, esp
  0010e	8b 55 08	 mov	 edx, DWORD PTR _table$[ebp]
  00111	52		 push	 edx
  00112	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00118	83 c4 04	 add	 esp, 4
  0011b	3b f4		 cmp	 esi, esp
  0011d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00122	90		 npad	 1

; 262  : }

  00123	5e		 pop	 esi
  00124	83 c4 10	 add	 esp, 16			; 00000010H
  00127	3b ec		 cmp	 ebp, esp
  00129	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c3		 ret	 0
_antlr3HashFree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3HashPutI
_TEXT	SEGMENT
_newPointer$ = -16					; size = 4
_entry$ = -12						; size = 4
_bucket$ = -8						; size = 4
_hash$ = -4						; size = 4
_table$ = 8						; size = 4
_key$ = 12						; size = 4
_element$ = 16						; size = 4
_freeptr$ = 20						; size = 4
_antlr3HashPutI PROC					; COMDAT

; 524  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000f	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00012	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00015	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 525  : 	ANTLR3_UINT32	    hash;
; 526  : 	pANTLR3_HASH_BUCKET	    bucket;
; 527  : 	pANTLR3_HASH_ENTRY	    entry;
; 528  : 	pANTLR3_HASH_ENTRY	    * newPointer;
; 529  : 
; 530  : 	/* First we need to know the hash of the provided key
; 531  : 	*/
; 532  : 	hash    = (ANTLR3_UINT32)(key % (ANTLR3_INTKEY)(table->modulo));

  00018	8b 4d 08	 mov	 ecx, DWORD PTR _table$[ebp]
  0001b	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  0001e	33 d2		 xor	 edx, edx
  00020	f7 71 04	 div	 DWORD PTR [ecx+4]
  00023	89 55 fc	 mov	 DWORD PTR _hash$[ebp], edx

; 533  : 
; 534  : 	/* Knowing the hash, we can find the bucket
; 535  : 	*/
; 536  : 	bucket  = table->buckets + hash;

  00026	8b 55 08	 mov	 edx, DWORD PTR _table$[ebp]
  00029	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _hash$[ebp]
  0002f	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00032	89 55 f8	 mov	 DWORD PTR _bucket$[ebp], edx

; 537  : 
; 538  : 	/* Knowing the bucket, we can traverse the entries until we
; 539  : 	* we find a NULL pointer or we find that this is already 
; 540  : 	* in the table and duplicates were not allowed.
; 541  : 	*/
; 542  : 	newPointer	= &bucket->entries;

  00035	8b 45 f8	 mov	 eax, DWORD PTR _bucket$[ebp]
  00038	89 45 f0	 mov	 DWORD PTR _newPointer$[ebp], eax
$LN2@antlr3Hash:

; 543  : 
; 544  : 	while   (*newPointer !=  NULL)

  0003b	8b 4d f0	 mov	 ecx, DWORD PTR _newPointer$[ebp]
  0003e	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00041	74 29		 je	 SHORT $LN3@antlr3Hash

; 545  : 	{
; 546  : 		/* The value at new pointer is pointing to an existing entry.
; 547  : 		* If duplicates are allowed then we don't care what it is, but
; 548  : 		* must reject this add if the key is the same as the one we are
; 549  : 		* supplied with.
; 550  : 		*/
; 551  : 		if  (table->allowDups == ANTLR3_FALSE)

  00043	8b 55 08	 mov	 edx, DWORD PTR _table$[ebp]
  00046	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00049	75 14		 jne	 SHORT $LN5@antlr3Hash

; 552  : 		{
; 553  : 			if	((*newPointer)->keybase.key.iKey == key)

  0004b	8b 45 f0	 mov	 eax, DWORD PTR _newPointer$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00053	3b 55 0c	 cmp	 edx, DWORD PTR _key$[ebp]
  00056	75 07		 jne	 SHORT $LN5@antlr3Hash

; 554  : 			{
; 555  : 				return	ANTLR3_ERR_HASHDUP;

  00058	b8 03 00 00 00	 mov	 eax, 3
  0005d	eb 75		 jmp	 SHORT $LN1@antlr3Hash
$LN5@antlr3Hash:

; 556  : 			}
; 557  : 		}
; 558  : 
; 559  : 		/* Point to the next entry pointer of the current entry we
; 560  : 		* are traversing, if it is NULL we will create our new
; 561  : 		* structure and point this to it.
; 562  : 		*/
; 563  : 		newPointer = &((*newPointer)->nextEntry);

  0005f	8b 45 f0	 mov	 eax, DWORD PTR _newPointer$[ebp]
  00062	8b 08		 mov	 ecx, DWORD PTR [eax]
  00064	83 c1 10	 add	 ecx, 16			; 00000010H
  00067	89 4d f0	 mov	 DWORD PTR _newPointer$[ebp], ecx

; 564  : 	}

  0006a	eb cf		 jmp	 SHORT $LN2@antlr3Hash
$LN3@antlr3Hash:

; 565  : 
; 566  : 	/* newPointer is now pointing at the pointer where we need to
; 567  : 	* add our new entry, so let's crate the entry and add it in.
; 568  : 	*/
; 569  : 	entry   = (pANTLR3_HASH_ENTRY)ANTLR3_MALLOC((size_t)sizeof(ANTLR3_HASH_ENTRY));

  0006c	8b f4		 mov	 esi, esp
  0006e	6a 14		 push	 20			; 00000014H
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00076	83 c4 04	 add	 esp, 4
  00079	3b f4		 cmp	 esi, esp
  0007b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00080	89 45 f4	 mov	 DWORD PTR _entry$[ebp], eax

; 570  : 
; 571  : 	if	(entry == NULL)

  00083	83 7d f4 00	 cmp	 DWORD PTR _entry$[ebp], 0
  00087	75 07		 jne	 SHORT $LN6@antlr3Hash

; 572  : 	{
; 573  : 		return	ANTLR3_ERR_NOMEM;

  00089	b8 01 00 00 00	 mov	 eax, 1
  0008e	eb 44		 jmp	 SHORT $LN1@antlr3Hash
$LN6@antlr3Hash:

; 574  : 	}
; 575  : 
; 576  : 	entry->data			= element;		/* Install the data element supplied			*/

  00090	8b 55 f4	 mov	 edx, DWORD PTR _entry$[ebp]
  00093	8b 45 10	 mov	 eax, DWORD PTR _element$[ebp]
  00096	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 577  : 	entry->free			= freeptr;		/* Function that knows how to release the entry		*/

  00099	8b 4d f4	 mov	 ecx, DWORD PTR _entry$[ebp]
  0009c	8b 55 14	 mov	 edx, DWORD PTR _freeptr$[ebp]
  0009f	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 578  : 	entry->keybase.type		= ANTLR3_HASH_TYPE_INT;	/* Indicate the key type stored here for when we free	*/

  000a2	8b 45 f4	 mov	 eax, DWORD PTR _entry$[ebp]
  000a5	c6 00 00	 mov	 BYTE PTR [eax], 0

; 579  : 	entry->keybase.key.iKey	= key;			/* Record the key value					*/

  000a8	8b 4d f4	 mov	 ecx, DWORD PTR _entry$[ebp]
  000ab	8b 55 0c	 mov	 edx, DWORD PTR _key$[ebp]
  000ae	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 580  : 	entry->nextEntry		= NULL;			/* Ensure that the forward pointer ends the chain	*/

  000b1	8b 45 f4	 mov	 eax, DWORD PTR _entry$[ebp]
  000b4	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 581  : 
; 582  : 	*newPointer	= entry;    /* Install the next entry in this bucket	*/

  000bb	8b 4d f0	 mov	 ecx, DWORD PTR _newPointer$[ebp]
  000be	8b 55 f4	 mov	 edx, DWORD PTR _entry$[ebp]
  000c1	89 11		 mov	 DWORD PTR [ecx], edx

; 583  : 
; 584  : 	table->count++;

  000c3	8b 45 08	 mov	 eax, DWORD PTR _table$[ebp]
  000c6	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  000c9	83 c1 01	 add	 ecx, 1
  000cc	8b 55 08	 mov	 edx, DWORD PTR _table$[ebp]
  000cf	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 585  : 
; 586  : 	return  ANTLR3_SUCCESS;

  000d2	33 c0		 xor	 eax, eax
$LN1@antlr3Hash:

; 587  : }

  000d4	5e		 pop	 esi
  000d5	83 c4 10	 add	 esp, 16			; 00000010H
  000d8	3b ec		 cmp	 ebp, esp
  000da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000df	8b e5		 mov	 esp, ebp
  000e1	5d		 pop	 ebp
  000e2	c3		 ret	 0
_antlr3HashPutI ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3HashRemoveI
_TEXT	SEGMENT
_nextPointer$ = -16					; size = 4
_entry$ = -12						; size = 4
_bucket$ = -8						; size = 4
_hash$ = -4						; size = 4
_table$ = 8						; size = 4
_key$ = 12						; size = 4
_antlr3HashRemoveI PROC					; COMDAT

; 275  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 276  :     ANTLR3_UINT32	    hash;
; 277  :     pANTLR3_HASH_BUCKET	    bucket;
; 278  :     pANTLR3_HASH_ENTRY	    entry;
; 279  :     pANTLR3_HASH_ENTRY	    * nextPointer;
; 280  : 
; 281  :     /* First we need to know the hash of the provided key
; 282  :      */
; 283  :     hash    = (ANTLR3_UINT32)(key % (ANTLR3_INTKEY)(table->modulo));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _table$[ebp]
  00009	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  0000c	33 d2		 xor	 edx, edx
  0000e	f7 71 04	 div	 DWORD PTR [ecx+4]
  00011	89 55 fc	 mov	 DWORD PTR _hash$[ebp], edx

; 284  : 
; 285  :     /* Knowing the hash, we can find the bucket
; 286  :      */
; 287  :     bucket  = table->buckets + hash;

  00014	8b 55 08	 mov	 edx, DWORD PTR _table$[ebp]
  00017	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _hash$[ebp]
  0001d	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00020	89 55 f8	 mov	 DWORD PTR _bucket$[ebp], edx

; 288  : 
; 289  :     /* Now, we traverse the entries in the bucket until
; 290  :      * we find the key or the end of the entries in the bucket. 
; 291  :      * We track the element prior to the one we are examining
; 292  :      * as we need to set its next pointer to the next pointer
; 293  :      * of the entry we are deleting (if we find it).
; 294  :      */
; 295  :     entry	    =   bucket->entries;    /* Entry to examine					    */

  00023	8b 45 f8	 mov	 eax, DWORD PTR _bucket$[ebp]
  00026	8b 08		 mov	 ecx, DWORD PTR [eax]
  00028	89 4d f4	 mov	 DWORD PTR _entry$[ebp], ecx

; 296  :     nextPointer	    = & bucket->entries;    /* Where to put the next pointer of the deleted entry   */

  0002b	8b 55 f8	 mov	 edx, DWORD PTR _bucket$[ebp]
  0002e	89 55 f0	 mov	 DWORD PTR _nextPointer$[ebp], edx
$LN2@antlr3Hash:

; 297  : 
; 298  :     while   (entry != NULL)

  00031	83 7d f4 00	 cmp	 DWORD PTR _entry$[ebp], 0
  00035	74 40		 je	 SHORT $LN3@antlr3Hash

; 299  :     {
; 300  : 	/* See if this is the entry we wish to delete
; 301  : 	 */
; 302  : 	if  (entry->keybase.key.iKey == key)

  00037	8b 45 f4	 mov	 eax, DWORD PTR _entry$[ebp]
  0003a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003d	3b 4d 0c	 cmp	 ecx, DWORD PTR _key$[ebp]
  00040	75 21		 jne	 SHORT $LN4@antlr3Hash

; 303  : 	{
; 304  : 	    /* It was the correct entry, so we set the next pointer
; 305  : 	     * of the previous entry to the next pointer of this
; 306  : 	     * located one, which takes it out of the chain.
; 307  : 	     */
; 308  : 	    (*nextPointer)		= entry->nextEntry;

  00042	8b 55 f0	 mov	 edx, DWORD PTR _nextPointer$[ebp]
  00045	8b 45 f4	 mov	 eax, DWORD PTR _entry$[ebp]
  00048	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0004b	89 0a		 mov	 DWORD PTR [edx], ecx

; 309  : 
; 310  : 	    table->count--;

  0004d	8b 55 08	 mov	 edx, DWORD PTR _table$[ebp]
  00050	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00053	83 e8 01	 sub	 eax, 1
  00056	8b 4d 08	 mov	 ecx, DWORD PTR _table$[ebp]
  00059	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 311  : 
; 312  : 	    return entry;

  0005c	8b 45 f4	 mov	 eax, DWORD PTR _entry$[ebp]
  0005f	eb 18		 jmp	 SHORT $LN1@antlr3Hash

; 313  : 	}

  00061	eb 12		 jmp	 SHORT $LN5@antlr3Hash
$LN4@antlr3Hash:

; 314  : 	else
; 315  : 	{
; 316  : 	    /* We found an entry but it wasn't the one that was wanted, so
; 317  : 	     * move to the next one, if any.
; 318  : 	     */
; 319  : 	    nextPointer	= & (entry->nextEntry);	    /* Address of the next pointer in the current entry	    */

  00063	8b 55 f4	 mov	 edx, DWORD PTR _entry$[ebp]
  00066	83 c2 10	 add	 edx, 16			; 00000010H
  00069	89 55 f0	 mov	 DWORD PTR _nextPointer$[ebp], edx

; 320  : 	    entry	= entry->nextEntry;	    /* Address of the next element in the bucket (if any)   */

  0006c	8b 45 f4	 mov	 eax, DWORD PTR _entry$[ebp]
  0006f	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00072	89 4d f4	 mov	 DWORD PTR _entry$[ebp], ecx
$LN5@antlr3Hash:

; 321  : 	}
; 322  :     }

  00075	eb ba		 jmp	 SHORT $LN2@antlr3Hash
$LN3@antlr3Hash:

; 323  : 
; 324  :     return NULL;  /* Not found */

  00077	33 c0		 xor	 eax, eax
$LN1@antlr3Hash:

; 325  : }

  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
_antlr3HashRemoveI ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3HashGetI
_TEXT	SEGMENT
_entry$ = -12						; size = 4
_bucket$ = -8						; size = 4
_hash$ = -4						; size = 4
_table$ = 8						; size = 4
_key$ = 12						; size = 4
_antlr3HashGetI PROC					; COMDAT

; 445  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 446  :     ANTLR3_UINT32	    hash;
; 447  :     pANTLR3_HASH_BUCKET	    bucket;
; 448  :     pANTLR3_HASH_ENTRY	    entry;
; 449  : 
; 450  :     /* First we need to know the hash of the provided key
; 451  :      */
; 452  :     hash    = (ANTLR3_UINT32)(key % (ANTLR3_INTKEY)(table->modulo));

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _table$[ebp]
  00009	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  0000c	33 d2		 xor	 edx, edx
  0000e	f7 71 04	 div	 DWORD PTR [ecx+4]
  00011	89 55 fc	 mov	 DWORD PTR _hash$[ebp], edx

; 453  : 
; 454  :     /* Knowing the hash, we can find the bucket
; 455  :      */
; 456  :     bucket  = table->buckets + hash;

  00014	8b 55 08	 mov	 edx, DWORD PTR _table$[ebp]
  00017	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _hash$[ebp]
  0001d	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00020	89 55 f8	 mov	 DWORD PTR _bucket$[ebp], edx

; 457  : 
; 458  :     /* Now we can inspect the key at each entry in the bucket
; 459  :      * and see if we have a match.
; 460  :      */
; 461  :     entry   = bucket->entries;

  00023	8b 45 f8	 mov	 eax, DWORD PTR _bucket$[ebp]
  00026	8b 08		 mov	 ecx, DWORD PTR [eax]
  00028	89 4d f4	 mov	 DWORD PTR _entry$[ebp], ecx
$LN2@antlr3Hash:

; 462  : 
; 463  :     while   (entry != NULL)

  0002b	83 7d f4 00	 cmp	 DWORD PTR _entry$[ebp], 0
  0002f	74 1e		 je	 SHORT $LN3@antlr3Hash

; 464  :     {
; 465  : 	if  (entry->keybase.key.iKey == key)

  00031	8b 55 f4	 mov	 edx, DWORD PTR _entry$[ebp]
  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00037	3b 45 0c	 cmp	 eax, DWORD PTR _key$[ebp]
  0003a	75 08		 jne	 SHORT $LN4@antlr3Hash

; 466  : 	{
; 467  : 	    /* Match was found, return the data pointer for this entry
; 468  : 	     */
; 469  : 	    return  entry->data;

  0003c	8b 4d f4	 mov	 ecx, DWORD PTR _entry$[ebp]
  0003f	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00042	eb 0d		 jmp	 SHORT $LN1@antlr3Hash
$LN4@antlr3Hash:

; 470  : 	}
; 471  : 	entry = entry->nextEntry;

  00044	8b 55 f4	 mov	 edx, DWORD PTR _entry$[ebp]
  00047	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0004a	89 45 f4	 mov	 DWORD PTR _entry$[ebp], eax

; 472  :     }

  0004d	eb dc		 jmp	 SHORT $LN2@antlr3Hash
$LN3@antlr3Hash:

; 473  : 
; 474  :     /* If we got here, then we did not find the key
; 475  :      */
; 476  :     return  NULL;

  0004f	33 c0		 xor	 eax, eax
$LN1@antlr3Hash:

; 477  : }

  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
_antlr3HashGetI ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3HashDeleteI
_TEXT	SEGMENT
_entry$ = -4						; size = 4
_table$ = 8						; size = 4
_key$ = 12						; size = 4
_antlr3HashDeleteI PROC					; COMDAT

; 397  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 398  :     pANTLR3_HASH_ENTRY	entry;
; 399  : 
; 400  :     entry = antlr3HashRemoveI(table, key);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _table$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 _antlr3HashRemoveI
  00019	83 c4 08	 add	 esp, 8
  0001c	89 45 fc	 mov	 DWORD PTR _entry$[ebp], eax

; 401  : 	
; 402  :     /* Now we can free the elements and the entry in order
; 403  :      */
; 404  :     if	(entry != NULL && entry->free != NULL)

  0001f	83 7d fc 00	 cmp	 DWORD PTR _entry$[ebp], 0
  00023	74 2e		 je	 SHORT $LN2@antlr3Hash
  00025	8b 55 fc	 mov	 edx, DWORD PTR _entry$[ebp]
  00028	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  0002c	74 25		 je	 SHORT $LN2@antlr3Hash

; 405  :     {
; 406  : 	/* Call programmer supplied function to release this entry data
; 407  : 	 */
; 408  : 	entry->free(entry->data);

  0002e	8b f4		 mov	 esi, esp
  00030	8b 45 fc	 mov	 eax, DWORD PTR _entry$[ebp]
  00033	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00036	51		 push	 ecx
  00037	8b 55 fc	 mov	 edx, DWORD PTR _entry$[ebp]
  0003a	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0003d	ff d0		 call	 eax
  0003f	83 c4 04	 add	 esp, 4
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 409  : 	entry->data = NULL;

  00049	8b 4d fc	 mov	 ecx, DWORD PTR _entry$[ebp]
  0004c	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
$LN2@antlr3Hash:

; 410  :     }
; 411  :     /* Finally release the space for this entry block.
; 412  :      */
; 413  :     ANTLR3_FREE(entry);

  00053	8b f4		 mov	 esi, esp
  00055	8b 55 fc	 mov	 edx, DWORD PTR _entry$[ebp]
  00058	52		 push	 edx
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0005f	83 c4 04	 add	 esp, 4
  00062	3b f4		 cmp	 esi, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	90		 npad	 1

; 414  : }

  0006a	5e		 pop	 esi
  0006b	83 c4 04	 add	 esp, 4
  0006e	3b ec		 cmp	 ebp, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
_antlr3HashDeleteI ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3HashPut
_TEXT	SEGMENT
_newPointer$ = -16					; size = 4
_entry$ = -12						; size = 4
_bucket$ = -8						; size = 4
_hash$ = -4						; size = 4
_table$ = 8						; size = 4
_key$ = 12						; size = 4
_element$ = 16						; size = 4
_freeptr$ = 20						; size = 4
_antlr3HashPut PROC					; COMDAT

; 595  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000f	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00012	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00015	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 596  : 	ANTLR3_UINT32	    hash;
; 597  : 	pANTLR3_HASH_BUCKET	    bucket;
; 598  : 	pANTLR3_HASH_ENTRY	    entry;
; 599  : 	pANTLR3_HASH_ENTRY	    * newPointer;
; 600  : 
; 601  : 	/* First we need to know the hash of the provided key
; 602  : 	*/
; 603  : 	hash    = antlr3Hash(key, (ANTLR3_UINT32)strlen((const char *)key));

  00018	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _strlen
  00021	83 c4 04	 add	 esp, 4
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR _key$[ebp]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 _antlr3Hash
  0002e	83 c4 08	 add	 esp, 8
  00031	89 45 fc	 mov	 DWORD PTR _hash$[ebp], eax

; 604  : 
; 605  : 	/* Knowing the hash, we can find the bucket
; 606  : 	*/
; 607  : 	bucket  = table->buckets + (hash % table->modulo);

  00034	8b 4d 08	 mov	 ecx, DWORD PTR _table$[ebp]
  00037	8b 45 fc	 mov	 eax, DWORD PTR _hash$[ebp]
  0003a	33 d2		 xor	 edx, edx
  0003c	f7 71 04	 div	 DWORD PTR [ecx+4]
  0003f	8b 45 08	 mov	 eax, DWORD PTR _table$[ebp]
  00042	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00045	8d 14 91	 lea	 edx, DWORD PTR [ecx+edx*4]
  00048	89 55 f8	 mov	 DWORD PTR _bucket$[ebp], edx

; 608  : 
; 609  : 	/* Knowign the bucket, we can traverse the entries until we
; 610  : 	* we find a NULL pointer ofr we find that this is already 
; 611  : 	* in the table and duplicates were not allowed.
; 612  : 	*/
; 613  : 	newPointer	= &bucket->entries;

  0004b	8b 45 f8	 mov	 eax, DWORD PTR _bucket$[ebp]
  0004e	89 45 f0	 mov	 DWORD PTR _newPointer$[ebp], eax
$LN2@antlr3Hash:

; 614  : 
; 615  : 	while   (*newPointer !=  NULL)

  00051	8b 4d f0	 mov	 ecx, DWORD PTR _newPointer$[ebp]
  00054	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00057	74 38		 je	 SHORT $LN3@antlr3Hash

; 616  : 	{
; 617  : 		/* The value at new pointer is pointing to an existing entry.
; 618  : 		* If duplicates are allowed then we don't care what it is, but
; 619  : 		* must reject this add if the key is the same as the one we are
; 620  : 		* supplied with.
; 621  : 		*/
; 622  : 		if  (table->allowDups == ANTLR3_FALSE)

  00059	8b 55 08	 mov	 edx, DWORD PTR _table$[ebp]
  0005c	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0005f	75 23		 jne	 SHORT $LN5@antlr3Hash

; 623  : 		{
; 624  : 			if	(strcmp((const char*) key, (const char *)(*newPointer)->keybase.key.sKey) == 0)

  00061	8b 45 f0	 mov	 eax, DWORD PTR _newPointer$[ebp]
  00064	8b 08		 mov	 ecx, DWORD PTR [eax]
  00066	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00069	52		 push	 edx
  0006a	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 _strcmp
  00073	83 c4 08	 add	 esp, 8
  00076	85 c0		 test	 eax, eax
  00078	75 0a		 jne	 SHORT $LN5@antlr3Hash

; 625  : 			{
; 626  : 				return	ANTLR3_ERR_HASHDUP;

  0007a	b8 03 00 00 00	 mov	 eax, 3
  0007f	e9 9f 00 00 00	 jmp	 $LN1@antlr3Hash
$LN5@antlr3Hash:

; 627  : 			}
; 628  : 		}
; 629  : 
; 630  : 		/* Point to the next entry pointer of the current entry we
; 631  : 		* are traversing, if it is NULL we will create our new
; 632  : 		* structure and point this to it.
; 633  : 		*/
; 634  : 		newPointer = &((*newPointer)->nextEntry);

  00084	8b 4d f0	 mov	 ecx, DWORD PTR _newPointer$[ebp]
  00087	8b 11		 mov	 edx, DWORD PTR [ecx]
  00089	83 c2 10	 add	 edx, 16			; 00000010H
  0008c	89 55 f0	 mov	 DWORD PTR _newPointer$[ebp], edx

; 635  : 	}

  0008f	eb c0		 jmp	 SHORT $LN2@antlr3Hash
$LN3@antlr3Hash:

; 636  : 
; 637  : 	/* newPointer is now poiting at the pointer where we need to
; 638  : 	* add our new entry, so let's crate the entry and add it in.
; 639  : 	*/
; 640  : 	entry   = (pANTLR3_HASH_ENTRY)ANTLR3_MALLOC((size_t)sizeof(ANTLR3_HASH_ENTRY));

  00091	8b f4		 mov	 esi, esp
  00093	6a 14		 push	 20			; 00000014H
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0009b	83 c4 04	 add	 esp, 4
  0009e	3b f4		 cmp	 esi, esp
  000a0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a5	89 45 f4	 mov	 DWORD PTR _entry$[ebp], eax

; 641  : 
; 642  : 	if	(entry == NULL)

  000a8	83 7d f4 00	 cmp	 DWORD PTR _entry$[ebp], 0
  000ac	75 07		 jne	 SHORT $LN6@antlr3Hash

; 643  : 	{
; 644  : 		return	ANTLR3_ERR_NOMEM;

  000ae	b8 01 00 00 00	 mov	 eax, 1
  000b3	eb 6e		 jmp	 SHORT $LN1@antlr3Hash
$LN6@antlr3Hash:

; 645  : 	}
; 646  : 
; 647  : 	entry->data			= element;					/* Install the data element supplied				*/

  000b5	8b 45 f4	 mov	 eax, DWORD PTR _entry$[ebp]
  000b8	8b 4d 10	 mov	 ecx, DWORD PTR _element$[ebp]
  000bb	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 648  : 	entry->free			= freeptr;					/* Function that knows how to release the entry	    */

  000be	8b 55 f4	 mov	 edx, DWORD PTR _entry$[ebp]
  000c1	8b 45 14	 mov	 eax, DWORD PTR _freeptr$[ebp]
  000c4	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 649  : 	entry->keybase.type	= ANTLR3_HASH_TYPE_STR;     /* Indicate the key type stored here for free()	    */

  000c7	8b 4d f4	 mov	 ecx, DWORD PTR _entry$[ebp]
  000ca	c6 01 01	 mov	 BYTE PTR [ecx], 1

; 650  :     if  (table->doStrdup == ANTLR3_TRUE)

  000cd	8b 55 08	 mov	 edx, DWORD PTR _table$[ebp]
  000d0	0f b6 42 10	 movzx	 eax, BYTE PTR [edx+16]
  000d4	83 f8 01	 cmp	 eax, 1
  000d7	75 1e		 jne	 SHORT $LN7@antlr3Hash

; 651  :     {
; 652  :         entry->keybase.key.sKey	= ANTLR3_STRDUP(key);	/* Record the key value								*/

  000d9	8b f4		 mov	 esi, esp
  000db	8b 4d 0c	 mov	 ecx, DWORD PTR _key$[ebp]
  000de	51		 push	 ecx
  000df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strdup
  000e5	83 c4 04	 add	 esp, 4
  000e8	3b f4		 cmp	 esi, esp
  000ea	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ef	8b 55 f4	 mov	 edx, DWORD PTR _entry$[ebp]
  000f2	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 653  :     }

  000f5	eb 09		 jmp	 SHORT $LN8@antlr3Hash
$LN7@antlr3Hash:

; 654  :     else
; 655  :     {
; 656  :         entry->keybase.key.sKey	= (pANTLR3_UINT8)key;                  /* Record the key value								*/

  000f7	8b 45 f4	 mov	 eax, DWORD PTR _entry$[ebp]
  000fa	8b 4d 0c	 mov	 ecx, DWORD PTR _key$[ebp]
  000fd	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN8@antlr3Hash:

; 657  :     }
; 658  : 	entry->nextEntry		= NULL;					/* Ensure that the forward pointer ends the chain   */

  00100	8b 55 f4	 mov	 edx, DWORD PTR _entry$[ebp]
  00103	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 659  : 
; 660  : 	*newPointer	= entry;    /* Install the next entry in this bucket	*/

  0010a	8b 45 f0	 mov	 eax, DWORD PTR _newPointer$[ebp]
  0010d	8b 4d f4	 mov	 ecx, DWORD PTR _entry$[ebp]
  00110	89 08		 mov	 DWORD PTR [eax], ecx

; 661  : 
; 662  : 	table->count++;

  00112	8b 55 08	 mov	 edx, DWORD PTR _table$[ebp]
  00115	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00118	83 c0 01	 add	 eax, 1
  0011b	8b 4d 08	 mov	 ecx, DWORD PTR _table$[ebp]
  0011e	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 663  : 
; 664  : 	return  ANTLR3_SUCCESS;

  00121	33 c0		 xor	 eax, eax
$LN1@antlr3Hash:

; 665  : }

  00123	5e		 pop	 esi
  00124	83 c4 10	 add	 esp, 16			; 00000010H
  00127	3b ec		 cmp	 ebp, esp
  00129	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c3		 ret	 0
_antlr3HashPut ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3HashRemove
_TEXT	SEGMENT
_nextPointer$ = -16					; size = 4
_entry$ = -12						; size = 4
_bucket$ = -8						; size = 4
_hash$ = -4						; size = 4
_table$ = 8						; size = 4
_key$ = 12						; size = 4
_antlr3HashRemove PROC					; COMDAT

; 332  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000f	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00012	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00015	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 333  :     ANTLR3_UINT32	    hash;
; 334  :     pANTLR3_HASH_BUCKET	    bucket;
; 335  :     pANTLR3_HASH_ENTRY	    entry;
; 336  :     pANTLR3_HASH_ENTRY	    * nextPointer;
; 337  : 
; 338  :     /* First we need to know the hash of the provided key
; 339  :      */
; 340  :     hash    = antlr3Hash(key, (ANTLR3_UINT32)strlen((const char *)key));

  00018	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _strlen
  00021	83 c4 04	 add	 esp, 4
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR _key$[ebp]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 _antlr3Hash
  0002e	83 c4 08	 add	 esp, 8
  00031	89 45 fc	 mov	 DWORD PTR _hash$[ebp], eax

; 341  : 
; 342  :     /* Knowing the hash, we can find the bucket
; 343  :      */
; 344  :     bucket  = table->buckets + (hash % table->modulo);

  00034	8b 4d 08	 mov	 ecx, DWORD PTR _table$[ebp]
  00037	8b 45 fc	 mov	 eax, DWORD PTR _hash$[ebp]
  0003a	33 d2		 xor	 edx, edx
  0003c	f7 71 04	 div	 DWORD PTR [ecx+4]
  0003f	8b 45 08	 mov	 eax, DWORD PTR _table$[ebp]
  00042	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00045	8d 14 91	 lea	 edx, DWORD PTR [ecx+edx*4]
  00048	89 55 f8	 mov	 DWORD PTR _bucket$[ebp], edx

; 345  : 
; 346  :     /* Now, we traverse the entries in the bucket until
; 347  :      * we find the key or the end of the entires in the bucket. 
; 348  :      * We track the element prior to the one we are exmaining
; 349  :      * as we need to set its next pointer to the next pointer
; 350  :      * of the entry we are deleting (if we find it).
; 351  :      */
; 352  :     entry	    =   bucket->entries;    /* Entry to examine					    */

  0004b	8b 45 f8	 mov	 eax, DWORD PTR _bucket$[ebp]
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	89 4d f4	 mov	 DWORD PTR _entry$[ebp], ecx

; 353  :     nextPointer	    = & bucket->entries;    /* Where to put the next pointer of the deleted entry   */

  00053	8b 55 f8	 mov	 edx, DWORD PTR _bucket$[ebp]
  00056	89 55 f0	 mov	 DWORD PTR _nextPointer$[ebp], edx
$LN2@antlr3Hash:

; 354  : 
; 355  :     while   (entry != NULL)

  00059	83 7d f4 00	 cmp	 DWORD PTR _entry$[ebp], 0
  0005d	74 7f		 je	 SHORT $LN3@antlr3Hash

; 356  :     {
; 357  : 	/* See if this is the entry we wish to delete
; 358  : 	 */
; 359  : 	if  (strcmp((const char *)key, (const char *)entry->keybase.key.sKey) == 0)

  0005f	8b 45 f4	 mov	 eax, DWORD PTR _entry$[ebp]
  00062	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00065	51		 push	 ecx
  00066	8b 55 0c	 mov	 edx, DWORD PTR _key$[ebp]
  00069	52		 push	 edx
  0006a	e8 00 00 00 00	 call	 _strcmp
  0006f	83 c4 08	 add	 esp, 8
  00072	85 c0		 test	 eax, eax
  00074	75 51		 jne	 SHORT $LN4@antlr3Hash

; 360  : 	{
; 361  : 	    /* It was the correct entry, so we set the next pointer
; 362  : 	     * of the previous entry to the next pointer of this
; 363  : 	     * located one, which takes it out of the chain.
; 364  : 	     */
; 365  : 	    (*nextPointer)		= entry->nextEntry;

  00076	8b 45 f0	 mov	 eax, DWORD PTR _nextPointer$[ebp]
  00079	8b 4d f4	 mov	 ecx, DWORD PTR _entry$[ebp]
  0007c	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0007f	89 10		 mov	 DWORD PTR [eax], edx

; 366  : 
; 367  : 	    /* Release the key - if we allocated that
; 368  : 	     */
; 369  :         if (table->doStrdup == ANTLR3_TRUE)

  00081	8b 45 08	 mov	 eax, DWORD PTR _table$[ebp]
  00084	0f b6 48 10	 movzx	 ecx, BYTE PTR [eax+16]
  00088	83 f9 01	 cmp	 ecx, 1
  0008b	75 1a		 jne	 SHORT $LN6@antlr3Hash

; 370  :         {
; 371  :             ANTLR3_FREE(entry->keybase.key.sKey);

  0008d	8b f4		 mov	 esi, esp
  0008f	8b 55 f4	 mov	 edx, DWORD PTR _entry$[ebp]
  00092	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00095	50		 push	 eax
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0009c	83 c4 04	 add	 esp, 4
  0009f	3b f4		 cmp	 esi, esp
  000a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a6	90		 npad	 1
$LN6@antlr3Hash:

; 372  :         }
; 373  : 	    entry->keybase.key.sKey	= NULL;

  000a7	8b 4d f4	 mov	 ecx, DWORD PTR _entry$[ebp]
  000aa	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 374  : 
; 375  : 	    table->count--;

  000b1	8b 55 08	 mov	 edx, DWORD PTR _table$[ebp]
  000b4	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000b7	83 e8 01	 sub	 eax, 1
  000ba	8b 4d 08	 mov	 ecx, DWORD PTR _table$[ebp]
  000bd	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 376  : 
; 377  : 	    return entry;

  000c0	8b 45 f4	 mov	 eax, DWORD PTR _entry$[ebp]
  000c3	eb 1b		 jmp	 SHORT $LN1@antlr3Hash

; 378  : 	}

  000c5	eb 12		 jmp	 SHORT $LN5@antlr3Hash
$LN4@antlr3Hash:

; 379  : 	else
; 380  : 	{
; 381  : 	    /* We found an entry but it wasn't the one that was wanted, so
; 382  : 	     * move to the next one, if any.
; 383  : 	     */
; 384  : 	    nextPointer	= & (entry->nextEntry);	    /* Address of the next pointer in the current entry	    */

  000c7	8b 55 f4	 mov	 edx, DWORD PTR _entry$[ebp]
  000ca	83 c2 10	 add	 edx, 16			; 00000010H
  000cd	89 55 f0	 mov	 DWORD PTR _nextPointer$[ebp], edx

; 385  : 	    entry	= entry->nextEntry;	    /* Address of the next element in the bucket (if any)   */

  000d0	8b 45 f4	 mov	 eax, DWORD PTR _entry$[ebp]
  000d3	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000d6	89 4d f4	 mov	 DWORD PTR _entry$[ebp], ecx
$LN5@antlr3Hash:

; 386  : 	}
; 387  :     }

  000d9	e9 7b ff ff ff	 jmp	 $LN2@antlr3Hash
$LN3@antlr3Hash:

; 388  : 
; 389  :     return NULL;  /* Not found */

  000de	33 c0		 xor	 eax, eax
$LN1@antlr3Hash:

; 390  : }

  000e0	5e		 pop	 esi
  000e1	83 c4 10	 add	 esp, 16			; 00000010H
  000e4	3b ec		 cmp	 ebp, esp
  000e6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c3		 ret	 0
_antlr3HashRemove ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3HashGet
_TEXT	SEGMENT
_entry$ = -12						; size = 4
_bucket$ = -8						; size = 4
_hash$ = -4						; size = 4
_table$ = 8						; size = 4
_key$ = 12						; size = 4
_antlr3HashGet PROC					; COMDAT

; 484  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 485  :     ANTLR3_UINT32	    hash;
; 486  :     pANTLR3_HASH_BUCKET	    bucket;
; 487  :     pANTLR3_HASH_ENTRY	    entry;
; 488  : 
; 489  : 
; 490  :     /* First we need to know the hash of the provided key
; 491  :      */
; 492  :     hash    = antlr3Hash(key, (ANTLR3_UINT32)strlen((const char *)key));

  0001b	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 _strlen
  00024	83 c4 04	 add	 esp, 4
  00027	50		 push	 eax
  00028	8b 4d 0c	 mov	 ecx, DWORD PTR _key$[ebp]
  0002b	51		 push	 ecx
  0002c	e8 00 00 00 00	 call	 _antlr3Hash
  00031	83 c4 08	 add	 esp, 8
  00034	89 45 fc	 mov	 DWORD PTR _hash$[ebp], eax

; 493  : 
; 494  :     /* Knowing the hash, we can find the bucket
; 495  :      */
; 496  :     bucket  = table->buckets + (hash % table->modulo);

  00037	8b 4d 08	 mov	 ecx, DWORD PTR _table$[ebp]
  0003a	8b 45 fc	 mov	 eax, DWORD PTR _hash$[ebp]
  0003d	33 d2		 xor	 edx, edx
  0003f	f7 71 04	 div	 DWORD PTR [ecx+4]
  00042	8b 45 08	 mov	 eax, DWORD PTR _table$[ebp]
  00045	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00048	8d 14 91	 lea	 edx, DWORD PTR [ecx+edx*4]
  0004b	89 55 f8	 mov	 DWORD PTR _bucket$[ebp], edx

; 497  : 
; 498  :     /* Now we can inspect the key at each entry in the bucket
; 499  :      * and see if we have a match.
; 500  :      */
; 501  :     entry   = bucket->entries;

  0004e	8b 45 f8	 mov	 eax, DWORD PTR _bucket$[ebp]
  00051	8b 08		 mov	 ecx, DWORD PTR [eax]
  00053	89 4d f4	 mov	 DWORD PTR _entry$[ebp], ecx
$LN2@antlr3Hash:

; 502  : 
; 503  :     while   (entry != NULL)

  00056	83 7d f4 00	 cmp	 DWORD PTR _entry$[ebp], 0
  0005a	74 2a		 je	 SHORT $LN3@antlr3Hash

; 504  :     {
; 505  : 	if  (strcmp((const char *)key, (const char *)entry->keybase.key.sKey) == 0)

  0005c	8b 55 f4	 mov	 edx, DWORD PTR _entry$[ebp]
  0005f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00062	50		 push	 eax
  00063	8b 4d 0c	 mov	 ecx, DWORD PTR _key$[ebp]
  00066	51		 push	 ecx
  00067	e8 00 00 00 00	 call	 _strcmp
  0006c	83 c4 08	 add	 esp, 8
  0006f	85 c0		 test	 eax, eax
  00071	75 08		 jne	 SHORT $LN4@antlr3Hash

; 506  : 	{
; 507  : 	    /* Match was found, return the data pointer for this entry
; 508  : 	     */
; 509  : 	    return  entry->data;

  00073	8b 55 f4	 mov	 edx, DWORD PTR _entry$[ebp]
  00076	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00079	eb 0d		 jmp	 SHORT $LN1@antlr3Hash
$LN4@antlr3Hash:

; 510  : 	}
; 511  : 	entry = entry->nextEntry;

  0007b	8b 45 f4	 mov	 eax, DWORD PTR _entry$[ebp]
  0007e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00081	89 4d f4	 mov	 DWORD PTR _entry$[ebp], ecx

; 512  :     }

  00084	eb d0		 jmp	 SHORT $LN2@antlr3Hash
$LN3@antlr3Hash:

; 513  : 
; 514  :     /* If we got here, then we did not find the key
; 515  :      */
; 516  :     return  NULL;

  00086	33 c0		 xor	 eax, eax
$LN1@antlr3Hash:

; 517  : }

  00088	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
_antlr3HashGet ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3HashDelete
_TEXT	SEGMENT
_entry$ = -4						; size = 4
_table$ = 8						; size = 4
_key$ = 12						; size = 4
_antlr3HashDelete PROC					; COMDAT

; 421  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 422  :     pANTLR3_HASH_ENTRY	entry;
; 423  : 
; 424  :     entry = antlr3HashRemove(table, key);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _key$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _table$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 _antlr3HashRemove
  00019	83 c4 08	 add	 esp, 8
  0001c	89 45 fc	 mov	 DWORD PTR _entry$[ebp], eax

; 425  : 	
; 426  :     /* Now we can free the elements and the entry in order
; 427  :      */
; 428  :     if	(entry != NULL && entry->free != NULL)

  0001f	83 7d fc 00	 cmp	 DWORD PTR _entry$[ebp], 0
  00023	74 2e		 je	 SHORT $LN2@antlr3Hash
  00025	8b 55 fc	 mov	 edx, DWORD PTR _entry$[ebp]
  00028	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  0002c	74 25		 je	 SHORT $LN2@antlr3Hash

; 429  :     {
; 430  : 	/* Call programmer supplied function to release this entry data
; 431  : 	 */
; 432  : 	entry->free(entry->data);

  0002e	8b f4		 mov	 esi, esp
  00030	8b 45 fc	 mov	 eax, DWORD PTR _entry$[ebp]
  00033	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00036	51		 push	 ecx
  00037	8b 55 fc	 mov	 edx, DWORD PTR _entry$[ebp]
  0003a	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0003d	ff d0		 call	 eax
  0003f	83 c4 04	 add	 esp, 4
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 433  : 	entry->data = NULL;

  00049	8b 4d fc	 mov	 ecx, DWORD PTR _entry$[ebp]
  0004c	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
$LN2@antlr3Hash:

; 434  :     }
; 435  :     /* Finally release the space for this entry block.
; 436  :      */
; 437  :     ANTLR3_FREE(entry);

  00053	8b f4		 mov	 esi, esp
  00055	8b 55 fc	 mov	 edx, DWORD PTR _entry$[ebp]
  00058	52		 push	 edx
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0005f	83 c4 04	 add	 esp, 4
  00062	3b f4		 cmp	 esi, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	90		 npad	 1

; 438  : }

  0006a	5e		 pop	 esi
  0006b	83 c4 04	 add	 esp, 4
  0006e	3b ec		 cmp	 ebp, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
_antlr3HashDelete ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3TopoNew
_TEXT	SEGMENT
_topo$ = -4						; size = 4
_antlr3TopoNew PROC					; COMDAT

; 2325 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 2326 :     pANTLR3_TOPO topo = (pANTLR3_TOPO)ANTLR3_MALLOC(sizeof(ANTLR3_TOPO));

  0000c	8b f4		 mov	 esi, esp
  0000e	6a 2c		 push	 44			; 0000002cH
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00016	83 c4 04	 add	 esp, 4
  00019	3b f4		 cmp	 esi, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	89 45 fc	 mov	 DWORD PTR _topo$[ebp], eax

; 2327 : 
; 2328 :     if  (topo == NULL)

  00023	83 7d fc 00	 cmp	 DWORD PTR _topo$[ebp], 0
  00027	75 04		 jne	 SHORT $LN2@antlr3Topo

; 2329 :     {
; 2330 :         return NULL;

  00029	33 c0		 xor	 eax, eax
  0002b	eb 6d		 jmp	 SHORT $LN1@antlr3Topo
$LN2@antlr3Topo:

; 2331 :     }
; 2332 : 
; 2333 :     // Initialize variables
; 2334 :     //
; 2335 : 
; 2336 :     topo->visited   = NULL;                 // Don't know how big it is yet

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _topo$[ebp]
  00030	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0

; 2337 :     topo->limit     = 1;                    // No edges added yet

  00037	8b 4d fc	 mov	 ecx, DWORD PTR _topo$[ebp]
  0003a	c7 41 14 01 00
	00 00		 mov	 DWORD PTR [ecx+20], 1

; 2338 :     topo->edges     = NULL;                 // No edges added yet

  00041	8b 55 fc	 mov	 edx, DWORD PTR _topo$[ebp]
  00044	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 2339 :     topo->sorted    = NULL;                 // Nothing sorted at the start

  0004a	8b 45 fc	 mov	 eax, DWORD PTR _topo$[ebp]
  0004d	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 2340 :     topo->cycle     = NULL;                 // No cycles at the start

  00054	8b 4d fc	 mov	 ecx, DWORD PTR _topo$[ebp]
  00057	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 2341 :     topo->cycleMark = 0;                    // No cycles at the start

  0005e	8b 55 fc	 mov	 edx, DWORD PTR _topo$[ebp]
  00061	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 2342 :     topo->hasCycle  = ANTLR3_FALSE;         // No cycle at the start

  00068	8b 45 fc	 mov	 eax, DWORD PTR _topo$[ebp]
  0006b	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 2343 :     
; 2344 :     // API
; 2345 :     //
; 2346 :     topo->addEdge       = addEdge;

  0006f	8b 4d fc	 mov	 ecx, DWORD PTR _topo$[ebp]
  00072	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], OFFSET _addEdge

; 2347 :     topo->sortToArray   = sortToArray;

  00079	8b 55 fc	 mov	 edx, DWORD PTR _topo$[ebp]
  0007c	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], OFFSET _sortToArray

; 2348 :     topo->sortVector    = sortVector;

  00083	8b 45 fc	 mov	 eax, DWORD PTR _topo$[ebp]
  00086	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], OFFSET _sortVector

; 2349 :     topo->free          = freeTopo;

  0008d	8b 4d fc	 mov	 ecx, DWORD PTR _topo$[ebp]
  00090	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], OFFSET _freeTopo

; 2350 : 
; 2351 :     return topo;

  00097	8b 45 fc	 mov	 eax, DWORD PTR _topo$[ebp]
$LN1@antlr3Topo:

; 2352 : }

  0009a	5e		 pop	 esi
  0009b	83 c4 04	 add	 esp, 4
  0009e	3b ec		 cmp	 ebp, esp
  000a0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c3		 ret	 0
_antlr3TopoNew ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3SetVectorApi
_TEXT	SEGMENT
_initialSize$ = -4					; size = 4
_vector$ = 8						; size = 4
_sizeHint$ = 12						; size = 4
_antlr3SetVectorApi PROC				; COMDAT

; 1079 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1080 :     ANTLR3_UINT32   initialSize;
; 1081 : 
; 1082 :     // Allow vectors to be guessed by ourselves, so input size can be zero
; 1083 :     //
; 1084 :     if	(sizeHint > ANTLR3_VECTOR_INTERNAL_SIZE)

  0000c	83 7d 0c 10	 cmp	 DWORD PTR _sizeHint$[ebp], 16 ; 00000010H
  00010	76 08		 jbe	 SHORT $LN2@antlr3SetV

; 1085 :     {
; 1086 :         initialSize = sizeHint;

  00012	8b 45 0c	 mov	 eax, DWORD PTR _sizeHint$[ebp]
  00015	89 45 fc	 mov	 DWORD PTR _initialSize$[ebp], eax

; 1087 :     }

  00018	eb 07		 jmp	 SHORT $LN3@antlr3SetV
$LN2@antlr3SetV:

; 1088 :     else
; 1089 :     {
; 1090 :         initialSize = ANTLR3_VECTOR_INTERNAL_SIZE;

  0001a	c7 45 fc 10 00
	00 00		 mov	 DWORD PTR _initialSize$[ebp], 16 ; 00000010H
$LN3@antlr3SetV:

; 1091 :     }
; 1092 : 
; 1093 :     if  (sizeHint > ANTLR3_VECTOR_INTERNAL_SIZE)

  00021	83 7d 0c 10	 cmp	 DWORD PTR _sizeHint$[ebp], 16 ; 00000010H
  00025	76 20		 jbe	 SHORT $LN4@antlr3SetV

; 1094 :     {
; 1095 :         vector->elements	= (pANTLR3_VECTOR_ELEMENT)ANTLR3_MALLOC((size_t)(sizeof(ANTLR3_VECTOR_ELEMENT) * initialSize));

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _initialSize$[ebp]
  0002a	c1 e1 03	 shl	 ecx, 3
  0002d	8b f4		 mov	 esi, esp
  0002f	51		 push	 ecx
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00036	83 c4 04	 add	 esp, 4
  00039	3b f4		 cmp	 esi, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  00043	89 02		 mov	 DWORD PTR [edx], eax

; 1096 :     }

  00045	eb 0b		 jmp	 SHORT $LN5@antlr3SetV
$LN4@antlr3SetV:

; 1097 :     else
; 1098 :     {
; 1099 :         vector->elements    = vector->internal;

  00047	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0004a	83 c0 08	 add	 eax, 8
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00050	89 01		 mov	 DWORD PTR [ecx], eax
$LN5@antlr3SetV:

; 1100 :     }
; 1101 : 
; 1102 :     if	(vector->elements == NULL)

  00052	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  00055	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00058	75 1c		 jne	 SHORT $LN6@antlr3SetV

; 1103 :     {
; 1104 :         ANTLR3_FREE(vector);

  0005a	8b f4		 mov	 esi, esp
  0005c	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  0005f	50		 push	 eax
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00066	83 c4 04	 add	 esp, 4
  00069	3b f4		 cmp	 esi, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	90		 npad	 1

; 1105 :         return;

  00071	e9 95 00 00 00	 jmp	 $LN1@antlr3SetV
$LN6@antlr3SetV:

; 1106 :     }
; 1107 : 
; 1108 :     // Memory allocated successfully
; 1109 :     //
; 1110 :     vector->count			= 0;			// No entries yet of course

  00076	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00079	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 1111 :     vector->elementsSize    = initialSize;  // Available entries

  00080	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  00083	8b 45 fc	 mov	 eax, DWORD PTR _initialSize$[ebp]
  00086	89 82 8c 00 00
	00		 mov	 DWORD PTR [edx+140], eax

; 1112 : 
; 1113 :     // Now we can install the API
; 1114 :     //
; 1115 :     vector->add	    = antlr3VectorAdd;

  0008c	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  0008f	c7 81 a8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+168], OFFSET _antlr3VectorAdd

; 1116 :     vector->del	    = antlr3VectorDel;

  00099	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  0009c	c7 82 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+148], OFFSET _antlr3VectorDel

; 1117 :     vector->get	    = antlr3VectorGet;

  000a6	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000a9	c7 80 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+152], OFFSET _antlr3VectorGet

; 1118 :     vector->free    = antlr3VectorFree;

  000b3	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  000b6	c7 81 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+144], OFFSET _antlr3VectorFree

; 1119 :     vector->set	    = antlr3VectorSet;

  000c0	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  000c3	c7 82 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+172], OFFSET _antlr3VectorSet

; 1120 :     vector->remove  = antrl3VectorRemove;

  000cd	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000d0	c7 80 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+156], OFFSET _antrl3VectorRemove

; 1121 :     vector->clear   = antlr3VectorClear;

  000da	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  000dd	c7 81 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+160], OFFSET _antlr3VectorClear

; 1122 :     vector->size    = antlr3VectorSize;

  000e7	8b 55 08	 mov	 edx, DWORD PTR _vector$[ebp]
  000ea	c7 82 b0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+176], OFFSET _antlr3VectorSize

; 1123 :     vector->swap    = antlr3VectorSwap;

  000f4	8b 45 08	 mov	 eax, DWORD PTR _vector$[ebp]
  000f7	c7 80 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+164], OFFSET _antlr3VectorSwap

; 1124 : 
; 1125 :     // Assume that this is not a factory made vector
; 1126 :     //
; 1127 :     vector->factoryMade	= ANTLR3_FALSE;

  00101	8b 4d 08	 mov	 ecx, DWORD PTR _vector$[ebp]
  00104	c6 81 88 00 00
	00 00		 mov	 BYTE PTR [ecx+136], 0
$LN1@antlr3SetV:

; 1128 : }

  0010b	5e		 pop	 esi
  0010c	83 c4 04	 add	 esp, 4
  0010f	3b ec		 cmp	 ebp, esp
  00111	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00116	8b e5		 mov	 esp, ebp
  00118	5d		 pop	 ebp
  00119	c3		 ret	 0
_antlr3SetVectorApi ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3StackNew
_TEXT	SEGMENT
_stack$ = -4						; size = 4
_sizeHint$ = 8						; size = 4
_antlr3StackNew PROC					; COMDAT

; 965  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 966  :     pANTLR3_STACK   stack;
; 967  : 
; 968  :     /* Allocate memory
; 969  :      */
; 970  :     stack    = (pANTLR3_STACK)ANTLR3_MALLOC((size_t)sizeof(ANTLR3_STACK));

  0000c	8b f4		 mov	 esi, esp
  0000e	6a 20		 push	 32			; 00000020H
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00016	83 c4 04	 add	 esp, 4
  00019	3b f4		 cmp	 esi, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	89 45 fc	 mov	 DWORD PTR _stack$[ebp], eax

; 971  : 
; 972  :     if	(stack == NULL)

  00023	83 7d fc 00	 cmp	 DWORD PTR _stack$[ebp], 0
  00027	75 07		 jne	 SHORT $LN2@antlr3Stac

; 973  :     {
; 974  : 	return	(pANTLR3_STACK)ANTLR3_FUNC_PTR(ANTLR3_ERR_NOMEM);

  00029	b8 01 00 00 00	 mov	 eax, 1
  0002e	eb 69		 jmp	 SHORT $LN1@antlr3Stac
$LN2@antlr3Stac:

; 975  :     }
; 976  : 
; 977  :     /* Now we need to add a new table
; 978  :      */
; 979  :     stack->vector   = antlr3VectorNew(sizeHint);

  00030	8b 45 08	 mov	 eax, DWORD PTR _sizeHint$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 _antlr3VectorNew
  00039	83 c4 04	 add	 esp, 4
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _stack$[ebp]
  0003f	89 01		 mov	 DWORD PTR [ecx], eax

; 980  :     stack->top	    = NULL;

  00041	8b 55 fc	 mov	 edx, DWORD PTR _stack$[ebp]
  00044	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 981  : 
; 982  :     if	(stack->vector == (pANTLR3_VECTOR)ANTLR3_FUNC_PTR(ANTLR3_ERR_NOMEM))

  0004b	8b 45 fc	 mov	 eax, DWORD PTR _stack$[ebp]
  0004e	83 38 01	 cmp	 DWORD PTR [eax], 1
  00051	75 07		 jne	 SHORT $LN3@antlr3Stac

; 983  :     {
; 984  : 	return	(pANTLR3_STACK)ANTLR3_FUNC_PTR(ANTLR3_ERR_NOMEM);

  00053	b8 01 00 00 00	 mov	 eax, 1
  00058	eb 3f		 jmp	 SHORT $LN1@antlr3Stac
$LN3@antlr3Stac:

; 985  :     }
; 986  : 
; 987  :     /* Looks good, now add the interface
; 988  :      */
; 989  :     stack->get	=  antlr3StackGet;

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _stack$[ebp]
  0005d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], OFFSET _antlr3StackGet

; 990  :     stack->free	=  antlr3StackFree;

  00064	8b 55 fc	 mov	 edx, DWORD PTR _stack$[ebp]
  00067	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET _antlr3StackFree

; 991  :     stack->pop	=  antlr3StackPop;

  0006e	8b 45 fc	 mov	 eax, DWORD PTR _stack$[ebp]
  00071	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _antlr3StackPop

; 992  :     stack->push	=  antlr3StackPush;

  00078	8b 4d fc	 mov	 ecx, DWORD PTR _stack$[ebp]
  0007b	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], OFFSET _antlr3StackPush

; 993  :     stack->size	=  antlr3StackSize;

  00082	8b 55 fc	 mov	 edx, DWORD PTR _stack$[ebp]
  00085	c7 42 18 00 00
	00 00		 mov	 DWORD PTR [edx+24], OFFSET _antlr3StackSize

; 994  :     stack->peek	=  antlr3StackPeek;

  0008c	8b 45 fc	 mov	 eax, DWORD PTR _stack$[ebp]
  0008f	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], OFFSET _antlr3StackPeek

; 995  : 
; 996  :     return  stack;

  00096	8b 45 fc	 mov	 eax, DWORD PTR _stack$[ebp]
$LN1@antlr3Stac:

; 997  : }

  00099	5e		 pop	 esi
  0009a	83 c4 04	 add	 esp, 4
  0009d	3b ec		 cmp	 ebp, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
_antlr3StackNew ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3VectorNew
_TEXT	SEGMENT
_vector$ = -4						; size = 4
_sizeHint$ = 8						; size = 4
_antlr3VectorNew PROC					; COMDAT

; 1055 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1056 : 	pANTLR3_VECTOR  vector;
; 1057 : 
; 1058 : 
; 1059 : 	// Allocate memory for the vector structure itself
; 1060 : 	//
; 1061 : 	vector  = (pANTLR3_VECTOR) ANTLR3_MALLOC((size_t)(sizeof(ANTLR3_VECTOR)));

  0000c	8b f4		 mov	 esi, esp
  0000e	68 b4 00 00 00	 push	 180			; 000000b4H
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00019	83 c4 04	 add	 esp, 4
  0001c	3b f4		 cmp	 esi, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	89 45 fc	 mov	 DWORD PTR _vector$[ebp], eax

; 1062 : 
; 1063 : 	if	(vector == NULL)

  00026	83 7d fc 00	 cmp	 DWORD PTR _vector$[ebp], 0
  0002a	75 07		 jne	 SHORT $LN2@antlr3Vect

; 1064 : 	{
; 1065 : 		return	(pANTLR3_VECTOR)ANTLR3_FUNC_PTR(ANTLR3_ERR_NOMEM);

  0002c	b8 01 00 00 00	 mov	 eax, 1
  00031	eb 13		 jmp	 SHORT $LN1@antlr3Vect
$LN2@antlr3Vect:

; 1066 : 	}
; 1067 : 
; 1068 : 	// Now fill in the defaults
; 1069 : 	//
; 1070 :     antlr3SetVectorApi(vector, sizeHint);

  00033	8b 45 08	 mov	 eax, DWORD PTR _sizeHint$[ebp]
  00036	50		 push	 eax
  00037	8b 4d fc	 mov	 ecx, DWORD PTR _vector$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 _antlr3SetVectorApi
  00040	83 c4 08	 add	 esp, 8

; 1071 : 
; 1072 : 	// And everything is hunky dory
; 1073 : 	//
; 1074 : 	return  vector;

  00043	8b 45 fc	 mov	 eax, DWORD PTR _vector$[ebp]
$LN1@antlr3Vect:

; 1075 : }

  00046	5e		 pop	 esi
  00047	83 c4 04	 add	 esp, 4
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
_antlr3VectorNew ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3VectorFactoryNew
_TEXT	SEGMENT
_factory$ = -4						; size = 4
_sizeHint$ = 8						; size = 4
_antlr3VectorFactoryNew PROC				; COMDAT

; 1458 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1459 : 	pANTLR3_VECTOR_FACTORY  factory;
; 1460 : 
; 1461 : 	// Allocate memory for the factory
; 1462 : 	//
; 1463 : 	factory = (pANTLR3_VECTOR_FACTORY)ANTLR3_MALLOC((size_t)(sizeof(ANTLR3_VECTOR_FACTORY)));

  0000c	8b f4		 mov	 esi, esp
  0000e	68 d0 00 00 00	 push	 208			; 000000d0H
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00019	83 c4 04	 add	 esp, 4
  0001c	3b f4		 cmp	 esi, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	89 45 fc	 mov	 DWORD PTR _factory$[ebp], eax

; 1464 : 
; 1465 : 	if	(factory == NULL)

  00026	83 7d fc 00	 cmp	 DWORD PTR _factory$[ebp], 0
  0002a	75 04		 jne	 SHORT $LN2@antlr3Vect

; 1466 : 	{
; 1467 : 		return	NULL;

  0002c	33 c0		 xor	 eax, eax
  0002e	eb 77		 jmp	 SHORT $LN1@antlr3Vect
$LN2@antlr3Vect:

; 1468 : 	}
; 1469 : 
; 1470 : 	// Factory memory is good, so create a new vector pool
; 1471 : 	//
; 1472 :     factory->pools      = NULL;

  00030	8b 45 fc	 mov	 eax, DWORD PTR _factory$[ebp]
  00033	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 1473 :     factory->thisPool   = -1;

  00039	8b 4d fc	 mov	 ecx, DWORD PTR _factory$[ebp]
  0003c	c7 41 04 ff ff
	ff ff		 mov	 DWORD PTR [ecx+4], -1

; 1474 : 
; 1475 :     newPool(factory);

  00043	8b 55 fc	 mov	 edx, DWORD PTR _factory$[ebp]
  00046	52		 push	 edx
  00047	e8 00 00 00 00	 call	 _newPool
  0004c	83 c4 04	 add	 esp, 4

; 1476 : 
; 1477 :     // Initialize the API, ignore the hint as this algorithm does
; 1478 :     // a better job really.
; 1479 :     //
; 1480 :     antlr3SetVectorApi(&(factory->unTruc), ANTLR3_VECTOR_INTERNAL_SIZE);

  0004f	6a 10		 push	 16			; 00000010H
  00051	8b 45 fc	 mov	 eax, DWORD PTR _factory$[ebp]
  00054	83 c0 0c	 add	 eax, 12			; 0000000cH
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 _antlr3SetVectorApi
  0005d	83 c4 08	 add	 esp, 8

; 1481 :     
; 1482 :     factory->unTruc.factoryMade = ANTLR3_TRUE;

  00060	8b 4d fc	 mov	 ecx, DWORD PTR _factory$[ebp]
  00063	c6 81 94 00 00
	00 01		 mov	 BYTE PTR [ecx+148], 1

; 1483 : 
; 1484 : 	// Install the factory API
; 1485 : 	//
; 1486 : 	factory->close			= closeVectorFactory;

  0006a	8b 55 fc	 mov	 edx, DWORD PTR _factory$[ebp]
  0006d	c7 82 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+196], OFFSET _closeVectorFactory

; 1487 : 	factory->newVector		= newVector;

  00077	8b 45 fc	 mov	 eax, DWORD PTR _factory$[ebp]
  0007a	c7 80 c8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+200], OFFSET _newVector

; 1488 : 	factory->returnVector	= returnVector;

  00084	8b 4d fc	 mov	 ecx, DWORD PTR _factory$[ebp]
  00087	c7 81 cc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+204], OFFSET _returnVector

; 1489 : 
; 1490 : 	// Create a stack to accumulate reusable vectors
; 1491 : 	//
; 1492 : 	factory->freeStack		= antlr3StackNew(16);

  00091	6a 10		 push	 16			; 00000010H
  00093	e8 00 00 00 00	 call	 _antlr3StackNew
  00098	83 c4 04	 add	 esp, 4
  0009b	8b 55 fc	 mov	 edx, DWORD PTR _factory$[ebp]
  0009e	89 82 c0 00 00
	00		 mov	 DWORD PTR [edx+192], eax

; 1493 : 	return  factory;

  000a4	8b 45 fc	 mov	 eax, DWORD PTR _factory$[ebp]
$LN1@antlr3Vect:

; 1494 : }

  000a7	5e		 pop	 esi
  000a8	83 c4 04	 add	 esp, 4
  000ab	3b ec		 cmp	 ebp, esp
  000ad	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c3		 ret	 0
_antlr3VectorFactoryNew ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3ListNew
_TEXT	SEGMENT
_list$ = -4						; size = 4
_sizeHint$ = 8						; size = 4
_antlr3ListNew PROC					; COMDAT

; 864  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 865  :     pANTLR3_LIST    list;
; 866  : 
; 867  :     /* Allocate memory
; 868  :      */
; 869  :     list    = (pANTLR3_LIST)ANTLR3_MALLOC((size_t)sizeof(ANTLR3_LIST));

  0000c	8b f4		 mov	 esi, esp
  0000e	6a 20		 push	 32			; 00000020H
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00016	83 c4 04	 add	 esp, 4
  00019	3b f4		 cmp	 esi, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	89 45 fc	 mov	 DWORD PTR _list$[ebp], eax

; 870  : 
; 871  :     if	(list == NULL)

  00023	83 7d fc 00	 cmp	 DWORD PTR _list$[ebp], 0
  00027	75 07		 jne	 SHORT $LN2@antlr3List

; 872  :     {
; 873  : 	return	(pANTLR3_LIST)ANTLR3_FUNC_PTR(ANTLR3_ERR_NOMEM);

  00029	b8 01 00 00 00	 mov	 eax, 1
  0002e	eb 69		 jmp	 SHORT $LN1@antlr3List
$LN2@antlr3List:

; 874  :     }
; 875  : 
; 876  :     /* Now we need to add a new table
; 877  :      */
; 878  :     list->table	= antlr3HashTableNew(sizeHint);

  00030	8b 45 08	 mov	 eax, DWORD PTR _sizeHint$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 _antlr3HashTableNew
  00039	83 c4 04	 add	 esp, 4
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _list$[ebp]
  0003f	89 01		 mov	 DWORD PTR [ecx], eax

; 879  : 
; 880  :     if	(list->table == (pANTLR3_HASH_TABLE)ANTLR3_FUNC_PTR(ANTLR3_ERR_NOMEM))

  00041	8b 55 fc	 mov	 edx, DWORD PTR _list$[ebp]
  00044	83 3a 01	 cmp	 DWORD PTR [edx], 1
  00047	75 07		 jne	 SHORT $LN3@antlr3List

; 881  :     {
; 882  : 	return	(pANTLR3_LIST)ANTLR3_FUNC_PTR(ANTLR3_ERR_NOMEM);

  00049	b8 01 00 00 00	 mov	 eax, 1
  0004e	eb 49		 jmp	 SHORT $LN1@antlr3List
$LN3@antlr3List:

; 883  :     }
; 884  : 
; 885  :     /* Allocation was good, install interface
; 886  :      */
; 887  :     list->free	    =  antlr3ListFree;

  00050	8b 45 fc	 mov	 eax, DWORD PTR _list$[ebp]
  00053	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET _antlr3ListFree

; 888  :     list->del	    =  antlr3ListDelete;

  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _list$[ebp]
  0005d	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], OFFSET _antlr3ListDelete

; 889  :     list->get	    =  antlr3ListGet;

  00064	8b 55 fc	 mov	 edx, DWORD PTR _list$[ebp]
  00067	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], OFFSET _antlr3ListGet

; 890  :     list->add	    =  antlr3ListAdd;

  0006e	8b 45 fc	 mov	 eax, DWORD PTR _list$[ebp]
  00071	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], OFFSET _antlr3ListAdd

; 891  :     list->remove    =  antlr3ListRemove;

  00078	8b 4d fc	 mov	 ecx, DWORD PTR _list$[ebp]
  0007b	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], OFFSET _antlr3ListRemove

; 892  :     list->put	    =  antlr3ListPut;

  00082	8b 55 fc	 mov	 edx, DWORD PTR _list$[ebp]
  00085	c7 42 18 00 00
	00 00		 mov	 DWORD PTR [edx+24], OFFSET _antlr3ListPut

; 893  :     list->size	    =  antlr3ListSize;

  0008c	8b 45 fc	 mov	 eax, DWORD PTR _list$[ebp]
  0008f	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], OFFSET _antlr3ListSize

; 894  : 
; 895  :     return  list;

  00096	8b 45 fc	 mov	 eax, DWORD PTR _list$[ebp]
$LN1@antlr3List:

; 896  : }

  00099	5e		 pop	 esi
  0009a	83 c4 04	 add	 esp, 4
  0009d	3b ec		 cmp	 ebp, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
_antlr3ListNew ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3EnumNew
_TEXT	SEGMENT
_en$ = -4						; size = 4
_table$ = 8						; size = 4
_antlr3EnumNew PROC					; COMDAT

; 674  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 675  :     pANTLR3_HASH_ENUM	en;
; 676  : 
; 677  :     /* Allocate structure memory
; 678  :      */
; 679  :     en    = (pANTLR3_HASH_ENUM) ANTLR3_MALLOC((size_t)sizeof(ANTLR3_HASH_ENUM));

  0000c	8b f4		 mov	 esi, esp
  0000e	6a 14		 push	 20			; 00000014H
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00016	83 c4 04	 add	 esp, 4
  00019	3b f4		 cmp	 esi, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	89 45 fc	 mov	 DWORD PTR _en$[ebp], eax

; 680  : 
; 681  :     /* Check that the allocation was good 
; 682  :      */
; 683  :     if	(en == NULL)

  00023	83 7d fc 00	 cmp	 DWORD PTR _en$[ebp], 0
  00027	75 07		 jne	 SHORT $LN2@antlr3Enum

; 684  :     {
; 685  : 	return	(pANTLR3_HASH_ENUM) ANTLR3_FUNC_PTR(ANTLR3_ERR_NOMEM);

  00029	b8 01 00 00 00	 mov	 eax, 1
  0002e	eb 4e		 jmp	 SHORT $LN1@antlr3Enum
$LN2@antlr3Enum:

; 686  :     }
; 687  :     
; 688  :     /* Initialize the start pointers
; 689  :     */
; 690  :     en->table	= table;

  00030	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  00033	8b 4d 08	 mov	 ecx, DWORD PTR _table$[ebp]
  00036	89 08		 mov	 DWORD PTR [eax], ecx

; 691  :     en->bucket	= 0;				/* First bucket		    */

  00038	8b 55 fc	 mov	 edx, DWORD PTR _en$[ebp]
  0003b	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0

; 692  :     en->entry	= en->table->buckets->entries;	/* First entry to return    */

  00042	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  00045	8b 08		 mov	 ecx, DWORD PTR [eax]
  00047	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0004a	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  0004d	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0004f	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 693  : 
; 694  :     /* Special case in that the first bucket may not have anything in it
; 695  :      * but the antlr3EnumNext() function expects that the en->entry is
; 696  :      * set to the next valid pointer. Hence if it is not a valid element
; 697  :      * pointer, attempt to find the next one that is, (table may be empty
; 698  :      * of course.
; 699  :      */
; 700  :     if	(en->entry == NULL)

  00052	8b 55 fc	 mov	 edx, DWORD PTR _en$[ebp]
  00055	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  00059	75 0c		 jne	 SHORT $LN3@antlr3Enum

; 701  :     {
; 702  : 	antlr3EnumNextEntry(en);

  0005b	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _antlr3EnumNextEntry
  00064	83 c4 04	 add	 esp, 4
$LN3@antlr3Enum:

; 703  :     }
; 704  : 
; 705  :     /* Install the interface
; 706  :      */
; 707  :     en->free	=  antlr3EnumFree;

  00067	8b 4d fc	 mov	 ecx, DWORD PTR _en$[ebp]
  0006a	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], OFFSET _antlr3EnumFree

; 708  :     en->next	=  antlr3EnumNext;

  00071	8b 55 fc	 mov	 edx, DWORD PTR _en$[ebp]
  00074	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], OFFSET _antlr3EnumNext

; 709  : 
; 710  :     /* All is good
; 711  :      */
; 712  :     return  en;

  0007b	8b 45 fc	 mov	 eax, DWORD PTR _en$[ebp]
$LN1@antlr3Enum:

; 713  : }

  0007e	5e		 pop	 esi
  0007f	83 c4 04	 add	 esp, 4
  00082	3b ec		 cmp	 ebp, esp
  00084	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
_antlr3EnumNew ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3Hash
_TEXT	SEGMENT
_i1$ = -12						; size = 4
_keyPtr$ = -8						; size = 4
_hash$ = -4						; size = 4
_key$ = 8						; size = 4
_keylen$ = 12						; size = 4
_antlr3Hash PROC					; COMDAT

; 835  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 836  :     /* Accumulate the hash value of the key
; 837  :      */
; 838  :     ANTLR3_UINT32   hash;
; 839  :     pANTLR3_UINT8   keyPtr;
; 840  :     ANTLR3_UINT32   i1;
; 841  : 
; 842  :     hash    = 0;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _hash$[ebp], 0

; 843  :     keyPtr  = (pANTLR3_UINT8) key;

  0000d	8b 45 08	 mov	 eax, DWORD PTR _key$[ebp]
  00010	89 45 f8	 mov	 DWORD PTR _keyPtr$[ebp], eax
$LN2@antlr3Hash:

; 844  : 
; 845  :     /* Iterate the key and accumulate the hash
; 846  :      */
; 847  :     while(keylen > 0)

  00013	83 7d 0c 00	 cmp	 DWORD PTR _keylen$[ebp], 0
  00017	76 48		 jbe	 SHORT $LN3@antlr3Hash

; 848  :     {
; 849  : 	hash = (hash << 4) + (*(keyPtr++));

  00019	8b 4d fc	 mov	 ecx, DWORD PTR _hash$[ebp]
  0001c	c1 e1 04	 shl	 ecx, 4
  0001f	8b 55 f8	 mov	 edx, DWORD PTR _keyPtr$[ebp]
  00022	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00025	03 c8		 add	 ecx, eax
  00027	89 4d fc	 mov	 DWORD PTR _hash$[ebp], ecx
  0002a	8b 4d f8	 mov	 ecx, DWORD PTR _keyPtr$[ebp]
  0002d	83 c1 01	 add	 ecx, 1
  00030	89 4d f8	 mov	 DWORD PTR _keyPtr$[ebp], ecx

; 850  : 
; 851  : 	if ((i1=hash&0xf0000000) != 0)

  00033	8b 55 fc	 mov	 edx, DWORD PTR _hash$[ebp]
  00036	81 e2 00 00 00
	f0		 and	 edx, -268435456		; f0000000H
  0003c	89 55 f4	 mov	 DWORD PTR _i1$[ebp], edx
  0003f	74 15		 je	 SHORT $LN4@antlr3Hash

; 852  : 	{
; 853  : 		hash = hash ^ (i1 >> 24);

  00041	8b 45 f4	 mov	 eax, DWORD PTR _i1$[ebp]
  00044	c1 e8 18	 shr	 eax, 24			; 00000018H
  00047	33 45 fc	 xor	 eax, DWORD PTR _hash$[ebp]
  0004a	89 45 fc	 mov	 DWORD PTR _hash$[ebp], eax

; 854  : 		hash = hash ^ i1;

  0004d	8b 4d fc	 mov	 ecx, DWORD PTR _hash$[ebp]
  00050	33 4d f4	 xor	 ecx, DWORD PTR _i1$[ebp]
  00053	89 4d fc	 mov	 DWORD PTR _hash$[ebp], ecx
$LN4@antlr3Hash:

; 855  : 	}
; 856  : 	keylen--;

  00056	8b 55 0c	 mov	 edx, DWORD PTR _keylen$[ebp]
  00059	83 ea 01	 sub	 edx, 1
  0005c	89 55 0c	 mov	 DWORD PTR _keylen$[ebp], edx

; 857  :     }

  0005f	eb b2		 jmp	 SHORT $LN2@antlr3Hash
$LN3@antlr3Hash:

; 858  : 
; 859  :     return  hash;

  00061	8b 45 fc	 mov	 eax, DWORD PTR _hash$[ebp]

; 860  : }

  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
_antlr3Hash ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3HashTableNew
_TEXT	SEGMENT
_bucket$ = -8						; size = 4
_table$ = -4						; size = 4
_sizeHint$ = 8						; size = 4
_antlr3HashTableNew PROC				; COMDAT

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 128  : 	// All we have to do is create the hashtable tracking structure
; 129  : 	// and allocate memory for the requested number of buckets.
; 130  : 	//
; 131  : 	pANTLR3_HASH_TABLE	table;
; 132  : 
; 133  : 	ANTLR3_UINT32	bucket;	// Used to traverse the buckets
; 134  : 
; 135  : 	table   = (pANTLR3_HASH_TABLE)ANTLR3_MALLOC(sizeof(ANTLR3_HASH_TABLE));

  00015	8b f4		 mov	 esi, esp
  00017	6a 3c		 push	 60			; 0000003cH
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0001f	83 c4 04	 add	 esp, 4
  00022	3b f4		 cmp	 esi, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	89 45 fc	 mov	 DWORD PTR _table$[ebp], eax

; 136  : 
; 137  : 	// Error out if no memory left
; 138  : 	if	(table	== NULL)

  0002c	83 7d fc 00	 cmp	 DWORD PTR _table$[ebp], 0
  00030	75 07		 jne	 SHORT $LN5@antlr3Hash

; 139  : 	{
; 140  : 		return	NULL;

  00032	33 c0		 xor	 eax, eax
  00034	e9 fb 00 00 00	 jmp	 $LN1@antlr3Hash
$LN5@antlr3Hash:

; 141  : 	}
; 142  : 
; 143  : 	// Allocate memory for the buckets
; 144  : 	//
; 145  : 	table->buckets = (pANTLR3_HASH_BUCKET) ANTLR3_MALLOC((size_t) (sizeof(ANTLR3_HASH_BUCKET) * sizeHint)); 

  00039	8b 45 08	 mov	 eax, DWORD PTR _sizeHint$[ebp]
  0003c	c1 e0 02	 shl	 eax, 2
  0003f	8b f4		 mov	 esi, esp
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00048	83 c4 04	 add	 esp, 4
  0004b	3b f4		 cmp	 esi, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b 4d fc	 mov	 ecx, DWORD PTR _table$[ebp]
  00055	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 146  : 
; 147  : 	if	(table->buckets == NULL)

  00058	8b 55 fc	 mov	 edx, DWORD PTR _table$[ebp]
  0005b	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  0005f	75 1d		 jne	 SHORT $LN6@antlr3Hash

; 148  : 	{
; 149  : 		ANTLR3_FREE((void *)table);

  00061	8b f4		 mov	 esi, esp
  00063	8b 45 fc	 mov	 eax, DWORD PTR _table$[ebp]
  00066	50		 push	 eax
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0006d	83 c4 04	 add	 esp, 4
  00070	3b f4		 cmp	 esi, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 150  : 		return	NULL;

  00077	33 c0		 xor	 eax, eax
  00079	e9 b6 00 00 00	 jmp	 $LN1@antlr3Hash
$LN6@antlr3Hash:

; 151  : 	}
; 152  : 
; 153  : 	// Modulo of the table, (bucket count).
; 154  : 	//
; 155  : 	table->modulo   = sizeHint;

  0007e	8b 4d fc	 mov	 ecx, DWORD PTR _table$[ebp]
  00081	8b 55 08	 mov	 edx, DWORD PTR _sizeHint$[ebp]
  00084	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 156  : 
; 157  : 	table->count    = 0;	    /* Nothing in there yet ( I hope)	*/

  00087	8b 45 fc	 mov	 eax, DWORD PTR _table$[ebp]
  0008a	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 158  : 
; 159  : 	/* Initialize the buckets to empty
; 160  : 	*/
; 161  : 	for	(bucket = 0; bucket < sizeHint; bucket++)

  00091	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _bucket$[ebp], 0
  00098	eb 09		 jmp	 SHORT $LN4@antlr3Hash
$LN2@antlr3Hash:
  0009a	8b 4d f8	 mov	 ecx, DWORD PTR _bucket$[ebp]
  0009d	83 c1 01	 add	 ecx, 1
  000a0	89 4d f8	 mov	 DWORD PTR _bucket$[ebp], ecx
$LN4@antlr3Hash:
  000a3	8b 55 f8	 mov	 edx, DWORD PTR _bucket$[ebp]
  000a6	3b 55 08	 cmp	 edx, DWORD PTR _sizeHint$[ebp]
  000a9	73 12		 jae	 SHORT $LN3@antlr3Hash

; 162  : 	{
; 163  : 		table->buckets[bucket].entries = NULL;

  000ab	8b 45 fc	 mov	 eax, DWORD PTR _table$[ebp]
  000ae	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b1	8b 55 f8	 mov	 edx, DWORD PTR _bucket$[ebp]
  000b4	c7 04 91 00 00
	00 00		 mov	 DWORD PTR [ecx+edx*4], 0

; 164  : 	}

  000bb	eb dd		 jmp	 SHORT $LN2@antlr3Hash
$LN3@antlr3Hash:

; 165  : 
; 166  : 	/* Exclude duplicate entries by default
; 167  : 	*/
; 168  : 	table->allowDups	= ANTLR3_FALSE;

  000bd	8b 45 fc	 mov	 eax, DWORD PTR _table$[ebp]
  000c0	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 169  : 
; 170  :     /* Assume that keys should by strduped before they are
; 171  :      * entered in the table.
; 172  :      */
; 173  :     table->doStrdup     = ANTLR3_TRUE;

  000c6	8b 4d fc	 mov	 ecx, DWORD PTR _table$[ebp]
  000c9	c6 41 10 01	 mov	 BYTE PTR [ecx+16], 1

; 174  : 
; 175  : 	/* Install the interface
; 176  : 	*/
; 177  : 
; 178  : 	table->get		=  antlr3HashGet;

  000cd	8b 55 fc	 mov	 edx, DWORD PTR _table$[ebp]
  000d0	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], OFFSET _antlr3HashGet

; 179  : 	table->put		=  antlr3HashPut;

  000d7	8b 45 fc	 mov	 eax, DWORD PTR _table$[ebp]
  000da	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], OFFSET _antlr3HashPut

; 180  : 	table->del		=  antlr3HashDelete;

  000e1	8b 4d fc	 mov	 ecx, DWORD PTR _table$[ebp]
  000e4	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], OFFSET _antlr3HashDelete

; 181  : 	table->remove	=  antlr3HashRemove;

  000eb	8b 55 fc	 mov	 edx, DWORD PTR _table$[ebp]
  000ee	c7 42 1c 00 00
	00 00		 mov	 DWORD PTR [edx+28], OFFSET _antlr3HashRemove

; 182  : 
; 183  : 	table->getI		=  antlr3HashGetI;

  000f5	8b 45 fc	 mov	 eax, DWORD PTR _table$[ebp]
  000f8	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], OFFSET _antlr3HashGetI

; 184  : 	table->putI		=  antlr3HashPutI;

  000ff	8b 4d fc	 mov	 ecx, DWORD PTR _table$[ebp]
  00102	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], OFFSET _antlr3HashPutI

; 185  : 	table->delI		=  antlr3HashDeleteI;

  00109	8b 55 fc	 mov	 edx, DWORD PTR _table$[ebp]
  0010c	c7 42 28 00 00
	00 00		 mov	 DWORD PTR [edx+40], OFFSET _antlr3HashDeleteI

; 186  : 	table->removeI	=  antlr3HashRemoveI;

  00113	8b 45 fc	 mov	 eax, DWORD PTR _table$[ebp]
  00116	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], OFFSET _antlr3HashRemoveI

; 187  : 
; 188  : 	table->size		=  antlr3HashSize;

  0011d	8b 4d fc	 mov	 ecx, DWORD PTR _table$[ebp]
  00120	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], OFFSET _antlr3HashSize

; 189  : 	table->free		=  antlr3HashFree;

  00127	8b 55 fc	 mov	 edx, DWORD PTR _table$[ebp]
  0012a	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], OFFSET _antlr3HashFree

; 190  : 
; 191  : 	return  table;

  00131	8b 45 fc	 mov	 eax, DWORD PTR _table$[ebp]
$LN1@antlr3Hash:

; 192  : }

  00134	5e		 pop	 esi
  00135	83 c4 08	 add	 esp, 8
  00138	3b ec		 cmp	 ebp, esp
  0013a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013f	8b e5		 mov	 esp, ebp
  00141	5d		 pop	 ebp
  00142	c3		 ret	 0
_antlr3HashTableNew ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3collections.c
;	COMDAT _antlr3IntTrieNew
_TEXT	SEGMENT
_trie$ = -4						; size = 4
_depth$ = 8						; size = 4
_antlr3IntTrieNew PROC					; COMDAT

; 1810 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1811 : 	pANTLR3_INT_TRIE	trie;
; 1812 : 
; 1813 : 	trie    = (pANTLR3_INT_TRIE) ANTLR3_CALLOC(1, sizeof(ANTLR3_INT_TRIE));	/* Base memory required	*/

  0000c	8b f4		 mov	 esi, esp
  0000e	6a 20		 push	 32			; 00000020H
  00010	6a 01		 push	 1
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  00018	83 c4 08	 add	 esp, 8
  0001b	3b f4		 cmp	 esi, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	89 45 fc	 mov	 DWORD PTR _trie$[ebp], eax

; 1814 : 
; 1815 : 	if (trie == NULL)

  00025	83 7d fc 00	 cmp	 DWORD PTR _trie$[ebp], 0
  00029	75 0a		 jne	 SHORT $LN2@antlr3IntT

; 1816 : 	{
; 1817 : 		return	(pANTLR3_INT_TRIE) ANTLR3_FUNC_PTR(ANTLR3_ERR_NOMEM);

  0002b	b8 01 00 00 00	 mov	 eax, 1
  00030	e9 99 00 00 00	 jmp	 $LN1@antlr3IntT
$LN2@antlr3IntT:

; 1818 : 	}
; 1819 : 
; 1820 : 	/* Now we need to allocate the root node. This makes it easier
; 1821 : 	 * to use the tree as we don't have to do anything special 
; 1822 : 	 * for the root node.
; 1823 : 	 */
; 1824 : 	trie->root	= (pANTLR3_INT_TRIE_NODE) ANTLR3_CALLOC(1, sizeof(ANTLR3_INT_TRIE));

  00035	8b f4		 mov	 esi, esp
  00037	6a 20		 push	 32			; 00000020H
  00039	6a 01		 push	 1
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  00041	83 c4 08	 add	 esp, 8
  00044	3b f4		 cmp	 esi, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _trie$[ebp]
  0004e	89 01		 mov	 DWORD PTR [ecx], eax

; 1825 : 
; 1826 : 	if (trie->root == NULL)

  00050	8b 55 fc	 mov	 edx, DWORD PTR _trie$[ebp]
  00053	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00056	75 1d		 jne	 SHORT $LN3@antlr3IntT

; 1827 : 	{
; 1828 : 		ANTLR3_FREE(trie);

  00058	8b f4		 mov	 esi, esp
  0005a	8b 45 fc	 mov	 eax, DWORD PTR _trie$[ebp]
  0005d	50		 push	 eax
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00064	83 c4 04	 add	 esp, 4
  00067	3b f4		 cmp	 esi, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1829 : 		return	(pANTLR3_INT_TRIE) ANTLR3_FUNC_PTR(ANTLR3_ERR_NOMEM);

  0006e	b8 01 00 00 00	 mov	 eax, 1
  00073	eb 59		 jmp	 SHORT $LN1@antlr3IntT
$LN3@antlr3IntT:

; 1830 : 	}
; 1831 : 
; 1832 : 	trie->add	= intTrieAdd;

  00075	8b 4d fc	 mov	 ecx, DWORD PTR _trie$[ebp]
  00078	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], OFFSET _intTrieAdd

; 1833 : 	trie->del	= intTrieDel;

  0007f	8b 55 fc	 mov	 edx, DWORD PTR _trie$[ebp]
  00082	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], OFFSET _intTrieDel

; 1834 : 	trie->free	= intTrieFree;

  00089	8b 45 fc	 mov	 eax, DWORD PTR _trie$[ebp]
  0008c	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], OFFSET _intTrieFree

; 1835 : 	trie->get	= intTrieGet;

  00093	8b 4d fc	 mov	 ecx, DWORD PTR _trie$[ebp]
  00096	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], OFFSET _intTrieGet

; 1836 : 
; 1837 : 	/* Now we seed the root node with the index being the
; 1838 : 	 * highest left most bit we want to test, which limits the
; 1839 : 	 * keys in the trie. This is the trie 'depth'. The limit for
; 1840 : 	 * this implementation is 63 (bits 0..63).
; 1841 : 	 */
; 1842 : 	trie->root->bitNum = depth;

  0009d	8b 55 fc	 mov	 edx, DWORD PTR _trie$[ebp]
  000a0	8b 02		 mov	 eax, DWORD PTR [edx]
  000a2	8b 4d 08	 mov	 ecx, DWORD PTR _depth$[ebp]
  000a5	89 08		 mov	 DWORD PTR [eax], ecx

; 1843 : 
; 1844 : 	/* And as we have nothing in here yet, we set both child pointers
; 1845 : 	 * of the root node to point back to itself.
; 1846 : 	 */
; 1847 : 	trie->root->leftN	= trie->root;

  000a7	8b 55 fc	 mov	 edx, DWORD PTR _trie$[ebp]
  000aa	8b 02		 mov	 eax, DWORD PTR [edx]
  000ac	8b 4d fc	 mov	 ecx, DWORD PTR _trie$[ebp]
  000af	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b1	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 1848 : 	trie->root->rightN	= trie->root;

  000b4	8b 45 fc	 mov	 eax, DWORD PTR _trie$[ebp]
  000b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b9	8b 55 fc	 mov	 edx, DWORD PTR _trie$[ebp]
  000bc	8b 02		 mov	 eax, DWORD PTR [edx]
  000be	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 1849 : 	trie->count			= 0;

  000c1	8b 4d fc	 mov	 ecx, DWORD PTR _trie$[ebp]
  000c4	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 1850 : 
; 1851 : 	/* Finally, note that the key for this root node is 0 because
; 1852 : 	 * we use calloc() to initialise it.
; 1853 : 	 */
; 1854 : 
; 1855 : 	return trie;

  000cb	8b 45 fc	 mov	 eax, DWORD PTR _trie$[ebp]
$LN1@antlr3IntT:

; 1856 : }

  000ce	5e		 pop	 esi
  000cf	83 c4 04	 add	 esp, 4
  000d2	3b ec		 cmp	 ebp, esp
  000d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
_antlr3IntTrieNew ENDP
_TEXT	ENDS
END
