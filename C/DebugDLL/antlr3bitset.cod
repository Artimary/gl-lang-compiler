; Listing generated by Microsoft (R) Optimizing Compiler Version 19.42.34436.0 

	TITLE	C:\SPO_labs\C\DebugDLL\antlr3bitset.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_antlr3BitsetNew
PUBLIC	_antlr3BitsetOf
PUBLIC	_antlr3BitsetList
PUBLIC	_antlr3BitsetCopy
PUBLIC	_antlr3BitsetLoad
PUBLIC	_antlr3BitsetSetAPI
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	__imp__calloc:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	_antlr3EnumNew:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__allshl:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3bitset.c
;	COMDAT _antlr3BitsetFree
_TEXT	SEGMENT
_bitset$ = 8						; size = 4
_antlr3BitsetFree PROC					; COMDAT

; 64   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 65   :     if	(bitset->blist.bits != NULL)

  00004	8b 45 08	 mov	 eax, DWORD PTR _bitset$[ebp]
  00007	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000a	74 21		 je	 SHORT $LN2@antlr3Bits

; 66   :     {
; 67   : 		ANTLR3_FREE(bitset->blist.bits);

  0000c	8b f4		 mov	 esi, esp
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR _bitset$[ebp]
  00011	8b 11		 mov	 edx, DWORD PTR [ecx]
  00013	52		 push	 edx
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0001a	83 c4 04	 add	 esp, 4
  0001d	3b f4		 cmp	 esi, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 68   : 		bitset->blist.bits = NULL;

  00024	8b 45 08	 mov	 eax, DWORD PTR _bitset$[ebp]
  00027	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$LN2@antlr3Bits:

; 69   :     }
; 70   :     ANTLR3_FREE(bitset);

  0002d	8b f4		 mov	 esi, esp
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _bitset$[ebp]
  00032	51		 push	 ecx
  00033	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00039	83 c4 04	 add	 esp, 4
  0003c	3b f4		 cmp	 esi, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	90		 npad	 1

; 71   : 
; 72   :     return;
; 73   : }

  00044	5e		 pop	 esi
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
_antlr3BitsetFree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3bitset.c
;	COMDAT _wordNumber
_TEXT	SEGMENT
_bit$ = 8						; size = 4
_wordNumber PROC					; COMDAT

; 627  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 628  :     return  bit >> ANTLR3_BITSET_LOG_BITS;

  00003	8b 45 08	 mov	 eax, DWORD PTR _bit$[ebp]
  00006	c1 e8 06	 shr	 eax, 6

; 629  : }

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
_wordNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3bitset.c
;	COMDAT _numWordsToHold
_TEXT	SEGMENT
_bit$ = 8						; size = 4
_numWordsToHold PROC					; COMDAT

; 621  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 622  :     return  (bit >> ANTLR3_BITSET_LOG_BITS) + 1;

  00003	8b 45 08	 mov	 eax, DWORD PTR _bit$[ebp]
  00006	c1 e8 06	 shr	 eax, 6
  00009	83 c0 01	 add	 eax, 1

; 623  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
_numWordsToHold ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3bitset.c
;	COMDAT _bitMask
_TEXT	SEGMENT
_bitNumber$ = 8						; size = 4
_bitMask PROC						; COMDAT

; 477  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 478  :     return  ((ANTLR3_UINT64)1) << (bitNumber & (ANTLR3_BITSET_MOD_MASK));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _bitNumber$[ebp]
  00006	83 e1 3f	 and	 ecx, 63			; 0000003fH
  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	33 d2		 xor	 edx, edx
  00010	e8 00 00 00 00	 call	 __allshl

; 479  : }

  00015	3b ec		 cmp	 ebp, esp
  00017	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
_bitMask ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3bitset.c
;	COMDAT _grow
_TEXT	SEGMENT
_newBits$ = -4						; size = 4
_bitset$ = 8						; size = 4
_newSize$ = 12						; size = 4
_grow	PROC						; COMDAT

; 395  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 396  :     pANTLR3_BITWORD   newBits;
; 397  : 
; 398  :     // Space for newly sized bitset - TODO: come back to this and use realloc?, it may
; 399  :     // be more efficient...
; 400  :     //
; 401  :     newBits = (pANTLR3_BITWORD) ANTLR3_CALLOC(1, (size_t)(newSize * sizeof(ANTLR3_BITWORD)));

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _newSize$[ebp]
  0000f	c1 e0 03	 shl	 eax, 3
  00012	8b f4		 mov	 esi, esp
  00014	50		 push	 eax
  00015	6a 01		 push	 1
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__calloc
  0001d	83 c4 08	 add	 esp, 8
  00020	3b f4		 cmp	 esi, esp
  00022	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00027	89 45 fc	 mov	 DWORD PTR _newBits$[ebp], eax

; 402  :     if	(bitset->blist.bits != NULL)

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _bitset$[ebp]
  0002d	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00030	74 35		 je	 SHORT $LN2@grow

; 403  :     {
; 404  : 		// Copy existing bits
; 405  : 		//
; 406  : 		ANTLR3_MEMCPY((void *)newBits, (const void *)bitset->blist.bits, (size_t)(bitset->blist.length * sizeof(ANTLR3_BITWORD)));

  00032	8b 55 08	 mov	 edx, DWORD PTR _bitset$[ebp]
  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	c1 e0 03	 shl	 eax, 3
  0003b	50		 push	 eax
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR _bitset$[ebp]
  0003f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00041	52		 push	 edx
  00042	8b 45 fc	 mov	 eax, DWORD PTR _newBits$[ebp]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 _memcpy
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 407  : 
; 408  : 		// Out with the old bits... de de de derrr
; 409  : 		//
; 410  : 		ANTLR3_FREE(bitset->blist.bits);

  0004e	8b f4		 mov	 esi, esp
  00050	8b 4d 08	 mov	 ecx, DWORD PTR _bitset$[ebp]
  00053	8b 11		 mov	 edx, DWORD PTR [ecx]
  00055	52		 push	 edx
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0005c	83 c4 04	 add	 esp, 4
  0005f	3b f4		 cmp	 esi, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	90		 npad	 1
$LN2@grow:

; 411  :     }
; 412  : 
; 413  :     // In with the new bits... keerrrang.
; 414  :     //
; 415  :     bitset->blist.bits      = newBits;

  00067	8b 45 08	 mov	 eax, DWORD PTR _bitset$[ebp]
  0006a	8b 4d fc	 mov	 ecx, DWORD PTR _newBits$[ebp]
  0006d	89 08		 mov	 DWORD PTR [eax], ecx

; 416  :     bitset->blist.length    = newSize;

  0006f	8b 55 08	 mov	 edx, DWORD PTR _bitset$[ebp]
  00072	8b 45 0c	 mov	 eax, DWORD PTR _newSize$[ebp]
  00075	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 417  : }

  00078	5e		 pop	 esi
  00079	83 c4 04	 add	 esp, 4
  0007c	3b ec		 cmp	 ebp, esp
  0007e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
_grow	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3bitset.c
;	COMDAT _growToInclude
_TEXT	SEGMENT
_nw$ = -8						; size = 4
_bl$ = -4						; size = 4
_bitset$ = 8						; size = 4
_bit$ = 12						; size = 4
_growToInclude PROC					; COMDAT

; 421  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 422  : 	ANTLR3_UINT32	bl;
; 423  : 	ANTLR3_UINT32	nw;
; 424  : 
; 425  : 	bl = (bitset->blist.length << 1);

  00015	8b 45 08	 mov	 eax, DWORD PTR _bitset$[ebp]
  00018	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001b	d1 e1		 shl	 ecx, 1
  0001d	89 4d fc	 mov	 DWORD PTR _bl$[ebp], ecx

; 426  : 	nw = numWordsToHold(bit);

  00020	8b 55 0c	 mov	 edx, DWORD PTR _bit$[ebp]
  00023	52		 push	 edx
  00024	e8 00 00 00 00	 call	 _numWordsToHold
  00029	83 c4 04	 add	 esp, 4
  0002c	89 45 f8	 mov	 DWORD PTR _nw$[ebp], eax

; 427  : 
; 428  : 	if	(bl > nw)

  0002f	8b 45 fc	 mov	 eax, DWORD PTR _bl$[ebp]
  00032	3b 45 f8	 cmp	 eax, DWORD PTR _nw$[ebp]
  00035	76 1f		 jbe	 SHORT $LN2@growToIncl

; 429  : 	{
; 430  : 		bitset->grow(bitset, bl);

  00037	8b f4		 mov	 esi, esp
  00039	8b 4d fc	 mov	 ecx, DWORD PTR _bl$[ebp]
  0003c	51		 push	 ecx
  0003d	8b 55 08	 mov	 edx, DWORD PTR _bitset$[ebp]
  00040	52		 push	 edx
  00041	8b 45 08	 mov	 eax, DWORD PTR _bitset$[ebp]
  00044	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00047	ff d1		 call	 ecx
  00049	83 c4 08	 add	 esp, 8
  0004c	3b f4		 cmp	 esi, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	90		 npad	 1

; 431  : 	}

  00054	eb 1d		 jmp	 SHORT $LN3@growToIncl
$LN2@growToIncl:

; 432  : 	else
; 433  : 	{
; 434  : 		bitset->grow(bitset, nw);

  00056	8b f4		 mov	 esi, esp
  00058	8b 55 f8	 mov	 edx, DWORD PTR _nw$[ebp]
  0005b	52		 push	 edx
  0005c	8b 45 08	 mov	 eax, DWORD PTR _bitset$[ebp]
  0005f	50		 push	 eax
  00060	8b 4d 08	 mov	 ecx, DWORD PTR _bitset$[ebp]
  00063	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00066	ff d2		 call	 edx
  00068	83 c4 08	 add	 esp, 8
  0006b	3b f4		 cmp	 esi, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	90		 npad	 1
$LN3@growToIncl:

; 435  : 	}
; 436  : }

  00073	5e		 pop	 esi
  00074	83 c4 08	 add	 esp, 8
  00077	3b ec		 cmp	 ebp, esp
  00079	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
_growToInclude ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3bitset.c
;	COMDAT _antlr3BitsetToIntList
_TEXT	SEGMENT
_intList$ = -20						; size = 4
_index$ = -16						; size = 4
_i$ = -12						; size = 4
_numBits$ = -8						; size = 4
_numInts$ = -4						; size = 4
_bitset$ = 8						; size = 4
_antlr3BitsetToIntList PROC				; COMDAT

; 646  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00012	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00015	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00018	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 647  :     ANTLR3_UINT32   numInts;	    // How many integers we will need
; 648  :     ANTLR3_UINT32   numBits;	    // How many bits are in the set
; 649  :     ANTLR3_UINT32   i;
; 650  :     ANTLR3_UINT32   index;
; 651  : 
; 652  :     pANTLR3_INT32  intList;
; 653  : 
; 654  :     numInts = bitset->size(bitset) + 1;

  0001b	8b f4		 mov	 esi, esp
  0001d	8b 45 08	 mov	 eax, DWORD PTR _bitset$[ebp]
  00020	50		 push	 eax
  00021	8b 4d 08	 mov	 ecx, DWORD PTR _bitset$[ebp]
  00024	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00027	ff d2		 call	 edx
  00029	83 c4 04	 add	 esp, 4
  0002c	3b f4		 cmp	 esi, esp
  0002e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00033	83 c0 01	 add	 eax, 1
  00036	89 45 fc	 mov	 DWORD PTR _numInts$[ebp], eax

; 655  :     numBits = bitset->numBits(bitset);

  00039	8b f4		 mov	 esi, esp
  0003b	8b 45 08	 mov	 eax, DWORD PTR _bitset$[ebp]
  0003e	50		 push	 eax
  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _bitset$[ebp]
  00042	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00045	ff d2		 call	 edx
  00047	83 c4 04	 add	 esp, 4
  0004a	3b f4		 cmp	 esi, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	89 45 f8	 mov	 DWORD PTR _numBits$[ebp], eax

; 656  :  
; 657  :     intList = (pANTLR3_INT32)ANTLR3_MALLOC(numInts * sizeof(ANTLR3_INT32));

  00054	8b 45 fc	 mov	 eax, DWORD PTR _numInts$[ebp]
  00057	c1 e0 02	 shl	 eax, 2
  0005a	8b f4		 mov	 esi, esp
  0005c	50		 push	 eax
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00063	83 c4 04	 add	 esp, 4
  00066	3b f4		 cmp	 esi, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	89 45 ec	 mov	 DWORD PTR _intList$[ebp], eax

; 658  : 
; 659  :     if	(intList == NULL)

  00070	83 7d ec 00	 cmp	 DWORD PTR _intList$[ebp], 0
  00074	75 04		 jne	 SHORT $LN5@antlr3Bits

; 660  :     {
; 661  : 		return NULL;	// Out of memory

  00076	33 c0		 xor	 eax, eax
  00078	eb 70		 jmp	 SHORT $LN1@antlr3Bits
$LN5@antlr3Bits:

; 662  :     }
; 663  : 
; 664  :     intList[0] = numInts;

  0007a	b9 04 00 00 00	 mov	 ecx, 4
  0007f	6b d1 00	 imul	 edx, ecx, 0
  00082	8b 45 ec	 mov	 eax, DWORD PTR _intList$[ebp]
  00085	8b 4d fc	 mov	 ecx, DWORD PTR _numInts$[ebp]
  00088	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 665  : 
; 666  :     // Enumerate the bits that are turned on
; 667  :     //
; 668  :     for	(i = 0, index = 1; i<numBits; i++)

  0008b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00092	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _index$[ebp], 1
  00099	eb 09		 jmp	 SHORT $LN4@antlr3Bits
$LN2@antlr3Bits:
  0009b	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  0009e	83 c2 01	 add	 edx, 1
  000a1	89 55 f4	 mov	 DWORD PTR _i$[ebp], edx
$LN4@antlr3Bits:
  000a4	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000a7	3b 45 f8	 cmp	 eax, DWORD PTR _numBits$[ebp]
  000aa	73 3b		 jae	 SHORT $LN3@antlr3Bits

; 669  :     {
; 670  : 		if  (bitset->isMember(bitset, i) == ANTLR3_TRUE)

  000ac	8b f4		 mov	 esi, esp
  000ae	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  000b1	51		 push	 ecx
  000b2	8b 55 08	 mov	 edx, DWORD PTR _bitset$[ebp]
  000b5	52		 push	 edx
  000b6	8b 45 08	 mov	 eax, DWORD PTR _bitset$[ebp]
  000b9	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000bc	ff d1		 call	 ecx
  000be	83 c4 08	 add	 esp, 8
  000c1	3b f4		 cmp	 esi, esp
  000c3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c8	0f b6 d0	 movzx	 edx, al
  000cb	83 fa 01	 cmp	 edx, 1
  000ce	75 15		 jne	 SHORT $LN6@antlr3Bits

; 671  : 		{
; 672  : 			intList[index++]    = i;

  000d0	8b 45 f0	 mov	 eax, DWORD PTR _index$[ebp]
  000d3	8b 4d ec	 mov	 ecx, DWORD PTR _intList$[ebp]
  000d6	8b 55 f4	 mov	 edx, DWORD PTR _i$[ebp]
  000d9	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx
  000dc	8b 45 f0	 mov	 eax, DWORD PTR _index$[ebp]
  000df	83 c0 01	 add	 eax, 1
  000e2	89 45 f0	 mov	 DWORD PTR _index$[ebp], eax
$LN6@antlr3Bits:

; 673  : 		}
; 674  :     }

  000e5	eb b4		 jmp	 SHORT $LN2@antlr3Bits
$LN3@antlr3Bits:

; 675  : 
; 676  :     // Result set
; 677  :     //
; 678  :     return  intList;

  000e7	8b 45 ec	 mov	 eax, DWORD PTR _intList$[ebp]
$LN1@antlr3Bits:

; 679  : }

  000ea	5e		 pop	 esi
  000eb	83 c4 14	 add	 esp, 20			; 00000014H
  000ee	3b ec		 cmp	 ebp, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c3		 ret	 0
_antlr3BitsetToIntList ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3bitset.c
;	COMDAT _antlr3BitsetIsNil
_TEXT	SEGMENT
tv79 = -12						; size = 4
tv78 = -8						; size = 4
_i$ = -4						; size = 4
_bitset$ = 8						; size = 4
_antlr3BitsetIsNil PROC					; COMDAT

; 605  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi

; 606  :    ANTLR3_INT32    i;
; 607  : 
; 608  :    for	(i = bitset->blist.length -1; i>= 0; i--)

  00007	8b 45 08	 mov	 eax, DWORD PTR _bitset$[ebp]
  0000a	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000d	83 e9 01	 sub	 ecx, 1
  00010	89 4d fc	 mov	 DWORD PTR _i$[ebp], ecx
  00013	eb 09		 jmp	 SHORT $LN4@antlr3Bits
$LN2@antlr3Bits:
  00015	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00018	83 ea 01	 sub	 edx, 1
  0001b	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$LN4@antlr3Bits:
  0001e	83 7d fc 00	 cmp	 DWORD PTR _i$[ebp], 0
  00022	7c 29		 jl	 SHORT $LN3@antlr3Bits

; 609  :    {
; 610  :        if   (bitset->blist.bits[i] != 0)

  00024	8b 45 08	 mov	 eax, DWORD PTR _bitset$[ebp]
  00027	8b 08		 mov	 ecx, DWORD PTR [eax]
  00029	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0002c	89 4d f8	 mov	 DWORD PTR tv78[ebp], ecx
  0002f	89 55 f4	 mov	 DWORD PTR tv79[ebp], edx
  00032	8b 45 f4	 mov	 eax, DWORD PTR tv79[ebp]
  00035	8b 4d f8	 mov	 ecx, DWORD PTR tv78[ebp]
  00038	8b 55 f4	 mov	 edx, DWORD PTR tv79[ebp]
  0003b	8b 75 f8	 mov	 esi, DWORD PTR tv78[ebp]
  0003e	8b 04 c1	 mov	 eax, DWORD PTR [ecx+eax*8]
  00041	0b 44 d6 04	 or	 eax, DWORD PTR [esi+edx*8+4]
  00045	74 04		 je	 SHORT $LN5@antlr3Bits

; 611  :        {
; 612  : 			return ANTLR3_FALSE;

  00047	32 c0		 xor	 al, al
  00049	eb 04		 jmp	 SHORT $LN1@antlr3Bits
$LN5@antlr3Bits:

; 613  :        }
; 614  :    }

  0004b	eb c8		 jmp	 SHORT $LN2@antlr3Bits
$LN3@antlr3Bits:

; 615  :    
; 616  :    return   ANTLR3_TRUE;

  0004d	b0 01		 mov	 al, 1
$LN1@antlr3Bits:

; 617  : }

  0004f	5e		 pop	 esi
  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_antlr3BitsetIsNil ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3bitset.c
;	COMDAT _antlr3BitsetRemove
_TEXT	SEGMENT
_wordNo$ = -4						; size = 4
_bitset$ = 8						; size = 4
_bit$ = 12						; size = 4
_antlr3BitsetRemove PROC				; COMDAT

; 593  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 594  :     ANTLR3_UINT32    wordNo;
; 595  : 
; 596  :     wordNo  = wordNumber(bit);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _bit$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 _wordNumber
  00015	83 c4 04	 add	 esp, 4
  00018	89 45 fc	 mov	 DWORD PTR _wordNo$[ebp], eax

; 597  : 
; 598  :     if	(wordNo < bitset->blist.length)

  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _bitset$[ebp]
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _wordNo$[ebp]
  00021	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00024	73 2e		 jae	 SHORT $LN2@antlr3Bits

; 599  :     {
; 600  : 		bitset->blist.bits[wordNo] &= ~(bitMask(bit));

  00026	8b 45 08	 mov	 eax, DWORD PTR _bitset$[ebp]
  00029	8b 30		 mov	 esi, DWORD PTR [eax]
  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR _bit$[ebp]
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 _bitMask
  00034	83 c4 04	 add	 esp, 4
  00037	f7 d0		 not	 eax
  00039	f7 d2		 not	 edx
  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _wordNo$[ebp]
  0003e	23 04 ce	 and	 eax, DWORD PTR [esi+ecx*8]
  00041	23 54 ce 04	 and	 edx, DWORD PTR [esi+ecx*8+4]
  00045	8b 4d 08	 mov	 ecx, DWORD PTR _bitset$[ebp]
  00048	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0004a	8b 75 fc	 mov	 esi, DWORD PTR _wordNo$[ebp]
  0004d	89 04 f1	 mov	 DWORD PTR [ecx+esi*8], eax
  00050	89 54 f1 04	 mov	 DWORD PTR [ecx+esi*8+4], edx
$LN2@antlr3Bits:

; 601  :     }
; 602  : }

  00054	5e		 pop	 esi
  00055	83 c4 04	 add	 esp, 4
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
_antlr3BitsetRemove ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3bitset.c
;	COMDAT _antlr3BitsetNumBits
_TEXT	SEGMENT
_bitset$ = 8						; size = 4
_antlr3BitsetNumBits PROC				; COMDAT

; 633  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 634  :     return  bitset->blist.length << ANTLR3_BITSET_LOG_BITS;

  00003	8b 45 08	 mov	 eax, DWORD PTR _bitset$[ebp]
  00006	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00009	c1 e0 06	 shl	 eax, 6

; 635  : }

  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
_antlr3BitsetNumBits ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3bitset.c
;	COMDAT _antlr3BitsetMember
_TEXT	SEGMENT
tv93 = -12						; size = 8
_wordNo$ = -4						; size = 4
_bitset$ = 8						; size = 4
_bit$ = 12						; size = 4
_antlr3BitsetMember PROC				; COMDAT

; 571  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 572  :     ANTLR3_UINT32    wordNo;
; 573  : 
; 574  :     wordNo  = wordNumber(bit);

  0001c	8b 45 0c	 mov	 eax, DWORD PTR _bit$[ebp]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 _wordNumber
  00025	83 c4 04	 add	 esp, 4
  00028	89 45 fc	 mov	 DWORD PTR _wordNo$[ebp], eax

; 575  : 
; 576  :     if	(wordNo >= bitset->blist.length)

  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _bitset$[ebp]
  0002e	8b 55 fc	 mov	 edx, DWORD PTR _wordNo$[ebp]
  00031	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00034	72 04		 jb	 SHORT $LN2@antlr3Bits

; 577  :     {
; 578  : 		return	ANTLR3_FALSE;

  00036	32 c0		 xor	 al, al
  00038	eb 31		 jmp	 SHORT $LN4@antlr3Bits
$LN2@antlr3Bits:

; 579  :     }
; 580  :     
; 581  :     if	((bitset->blist.bits[wordNo] & bitMask(bit)) == 0)

  0003a	8b 45 08	 mov	 eax, DWORD PTR _bitset$[ebp]
  0003d	8b 30		 mov	 esi, DWORD PTR [eax]
  0003f	8b 4d 0c	 mov	 ecx, DWORD PTR _bit$[ebp]
  00042	51		 push	 ecx
  00043	e8 00 00 00 00	 call	 _bitMask
  00048	83 c4 04	 add	 esp, 4
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _wordNo$[ebp]
  0004e	23 04 ce	 and	 eax, DWORD PTR [esi+ecx*8]
  00051	23 54 ce 04	 and	 edx, DWORD PTR [esi+ecx*8+4]
  00055	89 45 f4	 mov	 DWORD PTR tv93[ebp], eax
  00058	89 55 f8	 mov	 DWORD PTR tv93[ebp+4], edx
  0005b	8b 55 f4	 mov	 edx, DWORD PTR tv93[ebp]
  0005e	0b 55 f8	 or	 edx, DWORD PTR tv93[ebp+4]
  00061	75 06		 jne	 SHORT $LN3@antlr3Bits

; 582  :     {
; 583  : 		return	ANTLR3_FALSE;

  00063	32 c0		 xor	 al, al
  00065	eb 04		 jmp	 SHORT $LN4@antlr3Bits

; 584  :     }

  00067	eb 02		 jmp	 SHORT $LN4@antlr3Bits
$LN3@antlr3Bits:

; 585  :     else
; 586  :     {
; 587  : 		return	ANTLR3_TRUE;

  00069	b0 01		 mov	 al, 1
$LN4@antlr3Bits:

; 588  :     }
; 589  : }

  0006b	5e		 pop	 esi
  0006c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006f	3b ec		 cmp	 ebp, esp
  00071	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
_antlr3BitsetMember ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3bitset.c
;	COMDAT _antlr3BitsetEquals
_TEXT	SEGMENT
tv192 = -40						; size = 4
tv191 = -36						; size = 4
tv174 = -32						; size = 4
tv173 = -28						; size = 4
tv152 = -24						; size = 4
tv151 = -20						; size = 4
tv150 = -16						; size = 4
tv149 = -12						; size = 4
_i$ = -8						; size = 4
_minimum$ = -4						; size = 4
_bitset1$ = 8						; size = 4
_bitset2$ = 12						; size = 4
_antlr3BitsetEquals PROC				; COMDAT

; 512  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	56		 push	 esi

; 513  :     ANTLR3_INT32   minimum;
; 514  :     ANTLR3_INT32   i;
; 515  : 
; 516  :     if	(bitset1 == NULL || bitset2 == NULL)

  00007	83 7d 08 00	 cmp	 DWORD PTR _bitset1$[ebp], 0
  0000b	74 06		 je	 SHORT $LN12@antlr3Bits
  0000d	83 7d 0c 00	 cmp	 DWORD PTR _bitset2$[ebp], 0
  00011	75 07		 jne	 SHORT $LN11@antlr3Bits
$LN12@antlr3Bits:

; 517  :     {
; 518  : 	return	ANTLR3_FALSE;

  00013	32 c0		 xor	 al, al
  00015	e9 2f 01 00 00	 jmp	 $LN1@antlr3Bits
$LN11@antlr3Bits:

; 519  :     }
; 520  : 
; 521  :     // Work out the minimum comparison set
; 522  :     //
; 523  :     if	(bitset1->blist.length < bitset2->blist.length)

  0001a	8b 45 08	 mov	 eax, DWORD PTR _bitset1$[ebp]
  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR _bitset2$[ebp]
  00020	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00023	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00026	73 0b		 jae	 SHORT $LN13@antlr3Bits

; 524  :     {
; 525  : 		minimum = bitset1->blist.length;

  00028	8b 45 08	 mov	 eax, DWORD PTR _bitset1$[ebp]
  0002b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002e	89 4d fc	 mov	 DWORD PTR _minimum$[ebp], ecx

; 526  :     }

  00031	eb 09		 jmp	 SHORT $LN14@antlr3Bits
$LN13@antlr3Bits:

; 527  :     else
; 528  :     {
; 529  : 		minimum = bitset2->blist.length;

  00033	8b 55 0c	 mov	 edx, DWORD PTR _bitset2$[ebp]
  00036	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00039	89 45 fc	 mov	 DWORD PTR _minimum$[ebp], eax
$LN14@antlr3Bits:

; 530  :     }
; 531  : 
; 532  :     // Make sure explict in common bits are equal
; 533  :     //
; 534  :     for	(i = minimum - 1; i >=0 ; i--)

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _minimum$[ebp]
  0003f	83 e9 01	 sub	 ecx, 1
  00042	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
  00045	eb 09		 jmp	 SHORT $LN4@antlr3Bits
$LN2@antlr3Bits:
  00047	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0004a	83 ea 01	 sub	 edx, 1
  0004d	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx
$LN4@antlr3Bits:
  00050	83 7d f8 00	 cmp	 DWORD PTR _i$[ebp], 0
  00054	7c 4f		 jl	 SHORT $LN3@antlr3Bits

; 535  :     {
; 536  : 		if  (bitset1->blist.bits[i] != bitset2->blist.bits[i])

  00056	8b 45 08	 mov	 eax, DWORD PTR _bitset1$[ebp]
  00059	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005b	8b 55 0c	 mov	 edx, DWORD PTR _bitset2$[ebp]
  0005e	8b 02		 mov	 eax, DWORD PTR [edx]
  00060	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00063	8b 75 f8	 mov	 esi, DWORD PTR _i$[ebp]
  00066	89 4d f4	 mov	 DWORD PTR tv149[ebp], ecx
  00069	89 55 f0	 mov	 DWORD PTR tv150[ebp], edx
  0006c	89 45 ec	 mov	 DWORD PTR tv151[ebp], eax
  0006f	89 75 e8	 mov	 DWORD PTR tv152[ebp], esi
  00072	8b 45 f0	 mov	 eax, DWORD PTR tv150[ebp]
  00075	8b 4d f4	 mov	 ecx, DWORD PTR tv149[ebp]
  00078	8b 55 e8	 mov	 edx, DWORD PTR tv152[ebp]
  0007b	8b 75 ec	 mov	 esi, DWORD PTR tv151[ebp]
  0007e	8b 04 c1	 mov	 eax, DWORD PTR [ecx+eax*8]
  00081	3b 04 d6	 cmp	 eax, DWORD PTR [esi+edx*8]
  00084	75 16		 jne	 SHORT $LN22@antlr3Bits
  00086	8b 4d f0	 mov	 ecx, DWORD PTR tv150[ebp]
  00089	8b 55 f4	 mov	 edx, DWORD PTR tv149[ebp]
  0008c	8b 45 e8	 mov	 eax, DWORD PTR tv152[ebp]
  0008f	8b 75 ec	 mov	 esi, DWORD PTR tv151[ebp]
  00092	8b 4c ca 04	 mov	 ecx, DWORD PTR [edx+ecx*8+4]
  00096	3b 4c c6 04	 cmp	 ecx, DWORD PTR [esi+eax*8+4]
  0009a	74 07		 je	 SHORT $LN15@antlr3Bits
$LN22@antlr3Bits:

; 537  : 		{
; 538  : 			return  ANTLR3_FALSE;

  0009c	32 c0		 xor	 al, al
  0009e	e9 a6 00 00 00	 jmp	 $LN1@antlr3Bits
$LN15@antlr3Bits:

; 539  : 		}
; 540  :     }

  000a3	eb a2		 jmp	 SHORT $LN2@antlr3Bits
$LN3@antlr3Bits:

; 541  : 
; 542  :     // Now make sure the bits of the larger set are all turned
; 543  :     // off.
; 544  :     //
; 545  :     if	(bitset1->blist.length > (ANTLR3_UINT32)minimum)

  000a5	8b 55 08	 mov	 edx, DWORD PTR _bitset1$[ebp]
  000a8	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000ab	3b 45 fc	 cmp	 eax, DWORD PTR _minimum$[ebp]
  000ae	76 47		 jbe	 SHORT $LN16@antlr3Bits

; 546  :     {
; 547  : 		for (i = minimum ; (ANTLR3_UINT32)i < bitset1->blist.length; i++)

  000b0	8b 4d fc	 mov	 ecx, DWORD PTR _minimum$[ebp]
  000b3	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
  000b6	eb 09		 jmp	 SHORT $LN7@antlr3Bits
$LN5@antlr3Bits:
  000b8	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  000bb	83 c2 01	 add	 edx, 1
  000be	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx
$LN7@antlr3Bits:
  000c1	8b 45 08	 mov	 eax, DWORD PTR _bitset1$[ebp]
  000c4	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  000c7	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  000ca	73 29		 jae	 SHORT $LN6@antlr3Bits

; 548  : 		{
; 549  : 			if	(bitset1->blist.bits[i] != 0)

  000cc	8b 55 08	 mov	 edx, DWORD PTR _bitset1$[ebp]
  000cf	8b 02		 mov	 eax, DWORD PTR [edx]
  000d1	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  000d4	89 45 e4	 mov	 DWORD PTR tv173[ebp], eax
  000d7	89 4d e0	 mov	 DWORD PTR tv174[ebp], ecx
  000da	8b 55 e0	 mov	 edx, DWORD PTR tv174[ebp]
  000dd	8b 45 e4	 mov	 eax, DWORD PTR tv173[ebp]
  000e0	8b 4d e0	 mov	 ecx, DWORD PTR tv174[ebp]
  000e3	8b 75 e4	 mov	 esi, DWORD PTR tv173[ebp]
  000e6	8b 14 d0	 mov	 edx, DWORD PTR [eax+edx*8]
  000e9	0b 54 ce 04	 or	 edx, DWORD PTR [esi+ecx*8+4]
  000ed	74 04		 je	 SHORT $LN18@antlr3Bits

; 550  : 			{
; 551  : 				return	ANTLR3_FALSE;

  000ef	32 c0		 xor	 al, al
  000f1	eb 56		 jmp	 SHORT $LN1@antlr3Bits
$LN18@antlr3Bits:

; 552  : 			}
; 553  : 		}

  000f3	eb c3		 jmp	 SHORT $LN5@antlr3Bits
$LN6@antlr3Bits:

; 554  :     }

  000f5	eb 50		 jmp	 SHORT $LN9@antlr3Bits
$LN16@antlr3Bits:

; 555  :     else if (bitset2->blist.length > (ANTLR3_UINT32)minimum)

  000f7	8b 45 0c	 mov	 eax, DWORD PTR _bitset2$[ebp]
  000fa	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000fd	3b 4d fc	 cmp	 ecx, DWORD PTR _minimum$[ebp]
  00100	76 45		 jbe	 SHORT $LN9@antlr3Bits

; 556  :     {
; 557  : 		for (i = minimum; (ANTLR3_UINT32)i < bitset2->blist.length; i++)

  00102	8b 55 fc	 mov	 edx, DWORD PTR _minimum$[ebp]
  00105	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx
  00108	eb 09		 jmp	 SHORT $LN10@antlr3Bits
$LN8@antlr3Bits:
  0010a	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0010d	83 c0 01	 add	 eax, 1
  00110	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN10@antlr3Bits:
  00113	8b 4d 0c	 mov	 ecx, DWORD PTR _bitset2$[ebp]
  00116	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00119	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0011c	73 29		 jae	 SHORT $LN9@antlr3Bits

; 558  : 		{
; 559  : 			if	(bitset2->blist.bits[i] != 0)

  0011e	8b 45 0c	 mov	 eax, DWORD PTR _bitset2$[ebp]
  00121	8b 08		 mov	 ecx, DWORD PTR [eax]
  00123	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00126	89 4d dc	 mov	 DWORD PTR tv191[ebp], ecx
  00129	89 55 d8	 mov	 DWORD PTR tv192[ebp], edx
  0012c	8b 45 d8	 mov	 eax, DWORD PTR tv192[ebp]
  0012f	8b 4d dc	 mov	 ecx, DWORD PTR tv191[ebp]
  00132	8b 55 d8	 mov	 edx, DWORD PTR tv192[ebp]
  00135	8b 75 dc	 mov	 esi, DWORD PTR tv191[ebp]
  00138	8b 04 c1	 mov	 eax, DWORD PTR [ecx+eax*8]
  0013b	0b 44 d6 04	 or	 eax, DWORD PTR [esi+edx*8+4]
  0013f	74 04		 je	 SHORT $LN20@antlr3Bits

; 560  : 			{
; 561  : 				return	ANTLR3_FALSE;

  00141	32 c0		 xor	 al, al
  00143	eb 04		 jmp	 SHORT $LN1@antlr3Bits
$LN20@antlr3Bits:

; 562  : 			}
; 563  : 		}

  00145	eb c3		 jmp	 SHORT $LN8@antlr3Bits
$LN9@antlr3Bits:

; 564  :     }
; 565  : 
; 566  :     return  ANTLR3_TRUE;

  00147	b0 01		 mov	 al, 1
$LN1@antlr3Bits:

; 567  : }

  00149	5e		 pop	 esi
  0014a	8b e5		 mov	 esp, ebp
  0014c	5d		 pop	 ebp
  0014d	c3		 ret	 0
_antlr3BitsetEquals ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3bitset.c
;	COMDAT _antlr3BitsetAdd
_TEXT	SEGMENT
_word$ = -4						; size = 4
_bitset$ = 8						; size = 4
_bit$ = 12						; size = 4
_antlr3BitsetAdd PROC					; COMDAT

; 379  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 380  :     ANTLR3_UINT32   word;
; 381  : 
; 382  :     word    = wordNumber(bit);

  0000c	8b 45 0c	 mov	 eax, DWORD PTR _bit$[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 _wordNumber
  00015	83 c4 04	 add	 esp, 4
  00018	89 45 fc	 mov	 DWORD PTR _word$[ebp], eax

; 383  : 
; 384  :     if	(word	>= bitset->blist.length)

  0001b	8b 4d 08	 mov	 ecx, DWORD PTR _bitset$[ebp]
  0001e	8b 55 fc	 mov	 edx, DWORD PTR _word$[ebp]
  00021	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00024	72 10		 jb	 SHORT $LN2@antlr3Bits

; 385  :     {
; 386  : 		growToInclude(bitset, bit);

  00026	8b 45 0c	 mov	 eax, DWORD PTR _bit$[ebp]
  00029	50		 push	 eax
  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _bitset$[ebp]
  0002d	51		 push	 ecx
  0002e	e8 00 00 00 00	 call	 _growToInclude
  00033	83 c4 08	 add	 esp, 8
$LN2@antlr3Bits:

; 387  :     }
; 388  : 
; 389  :     bitset->blist.bits[word] |= bitMask(bit);

  00036	8b 55 08	 mov	 edx, DWORD PTR _bitset$[ebp]
  00039	8b 32		 mov	 esi, DWORD PTR [edx]
  0003b	8b 45 0c	 mov	 eax, DWORD PTR _bit$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _bitMask
  00044	83 c4 04	 add	 esp, 4
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _word$[ebp]
  0004a	0b 04 ce	 or	 eax, DWORD PTR [esi+ecx*8]
  0004d	0b 54 ce 04	 or	 edx, DWORD PTR [esi+ecx*8+4]
  00051	8b 4d 08	 mov	 ecx, DWORD PTR _bitset$[ebp]
  00054	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00056	8b 75 fc	 mov	 esi, DWORD PTR _word$[ebp]
  00059	89 04 f1	 mov	 DWORD PTR [ecx+esi*8], eax
  0005c	89 54 f1 04	 mov	 DWORD PTR [ecx+esi*8+4], edx

; 390  : 
; 391  : }

  00060	5e		 pop	 esi
  00061	83 c4 04	 add	 esp, 4
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_antlr3BitsetAdd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3bitset.c
;	COMDAT _antlr3BitsetSize
_TEXT	SEGMENT
tv147 = -28						; size = 8
tv91 = -20						; size = 4
tv90 = -16						; size = 4
_bit$ = -9						; size = 1
_i$ = -8						; size = 4
_degree$ = -4						; size = 4
_bitset$ = 8						; size = 4
_antlr3BitsetSize PROC					; COMDAT

; 483  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00012	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00015	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00018	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001b	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001e	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 484  :     ANTLR3_UINT32   degree;
; 485  :     ANTLR3_INT32   i;
; 486  :     ANTLR3_INT8    bit;
; 487  :     
; 488  :     // TODO: Come back to this, it may be faster to & with 0x01
; 489  :     // then shift right a copy of the 4 bits, than shift left a constant of 1.
; 490  :     // But then again, the optimizer might just work this out
; 491  :     // anyway.
; 492  :     //
; 493  :     degree  = 0;

  00021	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _degree$[ebp], 0

; 494  :     for	(i = bitset->blist.length - 1; i>= 0; i--)

  00028	8b 45 08	 mov	 eax, DWORD PTR _bitset$[ebp]
  0002b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002e	83 e9 01	 sub	 ecx, 1
  00031	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
  00034	eb 09		 jmp	 SHORT $LN4@antlr3Bits
$LN2@antlr3Bits:
  00036	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00039	83 ea 01	 sub	 edx, 1
  0003c	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx
$LN4@antlr3Bits:
  0003f	83 7d f8 00	 cmp	 DWORD PTR _i$[ebp], 0
  00043	7c 77		 jl	 SHORT $LN3@antlr3Bits

; 495  :     {
; 496  : 		if  (bitset->blist.bits[i] != 0)

  00045	8b 45 08	 mov	 eax, DWORD PTR _bitset$[ebp]
  00048	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004a	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0004d	89 4d f0	 mov	 DWORD PTR tv90[ebp], ecx
  00050	89 55 ec	 mov	 DWORD PTR tv91[ebp], edx
  00053	8b 45 ec	 mov	 eax, DWORD PTR tv91[ebp]
  00056	8b 4d f0	 mov	 ecx, DWORD PTR tv90[ebp]
  00059	8b 55 ec	 mov	 edx, DWORD PTR tv91[ebp]
  0005c	8b 75 f0	 mov	 esi, DWORD PTR tv90[ebp]
  0005f	8b 04 c1	 mov	 eax, DWORD PTR [ecx+eax*8]
  00062	0b 44 d6 04	 or	 eax, DWORD PTR [esi+edx*8+4]
  00066	74 4f		 je	 SHORT $LN6@antlr3Bits

; 497  : 		{
; 498  : 			for	(bit = ANTLR3_BITSET_BITS - 1; bit >= 0; bit--)

  00068	c6 45 f7 3f	 mov	 BYTE PTR _bit$[ebp], 63	; 0000003fH
  0006c	eb 09		 jmp	 SHORT $LN7@antlr3Bits
$LN5@antlr3Bits:
  0006e	8a 4d f7	 mov	 cl, BYTE PTR _bit$[ebp]
  00071	80 e9 01	 sub	 cl, 1
  00074	88 4d f7	 mov	 BYTE PTR _bit$[ebp], cl
$LN7@antlr3Bits:
  00077	0f be 55 f7	 movsx	 edx, BYTE PTR _bit$[ebp]
  0007b	85 d2		 test	 edx, edx
  0007d	7c 38		 jl	 SHORT $LN6@antlr3Bits

; 499  : 			{
; 500  : 				if  ((bitset->blist.bits[i] & (((ANTLR3_BITWORD)1) << bit)) != 0)

  0007f	8b 45 08	 mov	 eax, DWORD PTR _bitset$[ebp]
  00082	8b 30		 mov	 esi, DWORD PTR [eax]
  00084	0f be 4d f7	 movsx	 ecx, BYTE PTR _bit$[ebp]
  00088	b8 01 00 00 00	 mov	 eax, 1
  0008d	33 d2		 xor	 edx, edx
  0008f	e8 00 00 00 00	 call	 __allshl
  00094	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00097	23 04 ce	 and	 eax, DWORD PTR [esi+ecx*8]
  0009a	23 54 ce 04	 and	 edx, DWORD PTR [esi+ecx*8+4]
  0009e	89 45 e4	 mov	 DWORD PTR tv147[ebp], eax
  000a1	89 55 e8	 mov	 DWORD PTR tv147[ebp+4], edx
  000a4	8b 55 e4	 mov	 edx, DWORD PTR tv147[ebp]
  000a7	0b 55 e8	 or	 edx, DWORD PTR tv147[ebp+4]
  000aa	74 09		 je	 SHORT $LN9@antlr3Bits

; 501  : 				{
; 502  : 					degree++;

  000ac	8b 45 fc	 mov	 eax, DWORD PTR _degree$[ebp]
  000af	83 c0 01	 add	 eax, 1
  000b2	89 45 fc	 mov	 DWORD PTR _degree$[ebp], eax
$LN9@antlr3Bits:

; 503  : 				}
; 504  : 			}

  000b5	eb b7		 jmp	 SHORT $LN5@antlr3Bits
$LN6@antlr3Bits:

; 505  : 		}
; 506  :     }

  000b7	e9 7a ff ff ff	 jmp	 $LN2@antlr3Bits
$LN3@antlr3Bits:

; 507  :     return degree;

  000bc	8b 45 fc	 mov	 eax, DWORD PTR _degree$[ebp]

; 508  : }

  000bf	5e		 pop	 esi
  000c0	83 c4 1c	 add	 esp, 28			; 0000001cH
  000c3	3b ec		 cmp	 ebp, esp
  000c5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ca	8b e5		 mov	 esp, ebp
  000cc	5d		 pop	 ebp
  000cd	c3		 ret	 0
_antlr3BitsetSize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3bitset.c
;	COMDAT _antlr3BitsetORInPlace
_TEXT	SEGMENT
_i$ = -8						; size = 4
_minimum$ = -4						; size = 4
_bitset$ = 8						; size = 4
_bitset2$ = 12						; size = 4
_antlr3BitsetORInPlace PROC				; COMDAT

; 440  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000f	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 441  :     ANTLR3_UINT32   minimum;
; 442  :     ANTLR3_UINT32   i;
; 443  : 
; 444  :     if	(bitset2 == NULL)

  00016	83 7d 0c 00	 cmp	 DWORD PTR _bitset2$[ebp], 0
  0001a	75 05		 jne	 SHORT $LN5@antlr3Bits

; 445  :     {
; 446  : 		return;

  0001c	e9 8f 00 00 00	 jmp	 $LN3@antlr3Bits
$LN5@antlr3Bits:

; 447  :     }
; 448  : 
; 449  : 
; 450  :     // First make sure that the target bitset is big enough
; 451  :     // for the new bits to be ored in.
; 452  :     //
; 453  :     if	(bitset->blist.length < bitset2->blist.length)

  00021	8b 45 08	 mov	 eax, DWORD PTR _bitset$[ebp]
  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _bitset2$[ebp]
  00027	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0002a	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0002d	73 16		 jae	 SHORT $LN6@antlr3Bits

; 454  :     {
; 455  : 		growToInclude(bitset, (bitset2->blist.length * sizeof(ANTLR3_BITWORD)));

  0002f	8b 45 0c	 mov	 eax, DWORD PTR _bitset2$[ebp]
  00032	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00035	c1 e1 03	 shl	 ecx, 3
  00038	51		 push	 ecx
  00039	8b 55 08	 mov	 edx, DWORD PTR _bitset$[ebp]
  0003c	52		 push	 edx
  0003d	e8 00 00 00 00	 call	 _growToInclude
  00042	83 c4 08	 add	 esp, 8
$LN6@antlr3Bits:

; 456  :     }
; 457  :     
; 458  :     // Or the miniimum number of bits after any resizing went on
; 459  :     //
; 460  :     if	(bitset->blist.length < bitset2->blist.length)

  00045	8b 45 08	 mov	 eax, DWORD PTR _bitset$[ebp]
  00048	8b 4d 0c	 mov	 ecx, DWORD PTR _bitset2$[ebp]
  0004b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0004e	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00051	73 0b		 jae	 SHORT $LN7@antlr3Bits

; 461  : 	{
; 462  : 		minimum = bitset->blist.length;

  00053	8b 45 08	 mov	 eax, DWORD PTR _bitset$[ebp]
  00056	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00059	89 4d fc	 mov	 DWORD PTR _minimum$[ebp], ecx

; 463  : 	}

  0005c	eb 09		 jmp	 SHORT $LN8@antlr3Bits
$LN7@antlr3Bits:

; 464  : 	else
; 465  : 	{
; 466  : 		minimum = bitset2->blist.length;

  0005e	8b 55 0c	 mov	 edx, DWORD PTR _bitset2$[ebp]
  00061	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00064	89 45 fc	 mov	 DWORD PTR _minimum$[ebp], eax
$LN8@antlr3Bits:

; 467  : 	}
; 468  : 
; 469  :     for	(i = minimum; i > 0; i--)

  00067	8b 4d fc	 mov	 ecx, DWORD PTR _minimum$[ebp]
  0006a	89 4d f8	 mov	 DWORD PTR _i$[ebp], ecx
  0006d	eb 09		 jmp	 SHORT $LN4@antlr3Bits
$LN2@antlr3Bits:
  0006f	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00072	83 ea 01	 sub	 edx, 1
  00075	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx
$LN4@antlr3Bits:
  00078	83 7d f8 00	 cmp	 DWORD PTR _i$[ebp], 0
  0007c	76 32		 jbe	 SHORT $LN3@antlr3Bits

; 470  :     {
; 471  : 		bitset->blist.bits[i-1] |= bitset2->blist.bits[i-1];

  0007e	8b 45 08	 mov	 eax, DWORD PTR _bitset$[ebp]
  00081	8b 08		 mov	 ecx, DWORD PTR [eax]
  00083	8b 55 0c	 mov	 edx, DWORD PTR _bitset2$[ebp]
  00086	8b 02		 mov	 eax, DWORD PTR [edx]
  00088	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0008b	8b 75 f8	 mov	 esi, DWORD PTR _i$[ebp]
  0008e	8b 7c d1 f8	 mov	 edi, DWORD PTR [ecx+edx*8-8]
  00092	0b 7c f0 f8	 or	 edi, DWORD PTR [eax+esi*8-8]
  00096	8b 4c d1 fc	 mov	 ecx, DWORD PTR [ecx+edx*8-4]
  0009a	0b 4c f0 fc	 or	 ecx, DWORD PTR [eax+esi*8-4]
  0009e	8b 55 08	 mov	 edx, DWORD PTR _bitset$[ebp]
  000a1	8b 02		 mov	 eax, DWORD PTR [edx]
  000a3	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  000a6	89 7c d0 f8	 mov	 DWORD PTR [eax+edx*8-8], edi
  000aa	89 4c d0 fc	 mov	 DWORD PTR [eax+edx*8-4], ecx

; 472  :     }

  000ae	eb bf		 jmp	 SHORT $LN2@antlr3Bits
$LN3@antlr3Bits:

; 473  : }

  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	83 c4 08	 add	 esp, 8
  000b5	3b ec		 cmp	 ebp, esp
  000b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
_antlr3BitsetORInPlace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3bitset.c
;	COMDAT _antlr3BitsetOR
_TEXT	SEGMENT
_bitset$ = -4						; size = 4
_bitset1$ = 8						; size = 4
_bitset2$ = 12						; size = 4
_antlr3BitsetOR PROC					; COMDAT

; 354  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 355  :     pANTLR3_BITSET  bitset;
; 356  : 
; 357  :     if	(bitset1 == NULL)

  0000b	83 7d 08 00	 cmp	 DWORD PTR _bitset1$[ebp], 0
  0000f	75 0e		 jne	 SHORT $LN2@antlr3Bits

; 358  :     {
; 359  : 		return antlr3BitsetClone(bitset2);

  00011	8b 45 0c	 mov	 eax, DWORD PTR _bitset2$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 _antlr3BitsetClone
  0001a	83 c4 04	 add	 esp, 4
  0001d	eb 36		 jmp	 SHORT $LN1@antlr3Bits
$LN2@antlr3Bits:

; 360  :     }
; 361  : 
; 362  :     if	(bitset2 == NULL)

  0001f	83 7d 0c 00	 cmp	 DWORD PTR _bitset2$[ebp], 0
  00023	75 0e		 jne	 SHORT $LN3@antlr3Bits

; 363  :     {
; 364  : 		return	antlr3BitsetClone(bitset1);

  00025	8b 4d 08	 mov	 ecx, DWORD PTR _bitset1$[ebp]
  00028	51		 push	 ecx
  00029	e8 00 00 00 00	 call	 _antlr3BitsetClone
  0002e	83 c4 04	 add	 esp, 4
  00031	eb 22		 jmp	 SHORT $LN1@antlr3Bits
$LN3@antlr3Bits:

; 365  :     }
; 366  : 
; 367  :     // Allocate memory for the newly ordered bitset structure itself.
; 368  :     //
; 369  :     bitset  = antlr3BitsetClone(bitset1);

  00033	8b 55 08	 mov	 edx, DWORD PTR _bitset1$[ebp]
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 _antlr3BitsetClone
  0003c	83 c4 04	 add	 esp, 4
  0003f	89 45 fc	 mov	 DWORD PTR _bitset$[ebp], eax

; 370  :     
; 371  :     antlr3BitsetORInPlace(bitset, bitset2);

  00042	8b 45 0c	 mov	 eax, DWORD PTR _bitset2$[ebp]
  00045	50		 push	 eax
  00046	8b 4d fc	 mov	 ecx, DWORD PTR _bitset$[ebp]
  00049	51		 push	 ecx
  0004a	e8 00 00 00 00	 call	 _antlr3BitsetORInPlace
  0004f	83 c4 08	 add	 esp, 8

; 372  : 
; 373  :     return  bitset;

  00052	8b 45 fc	 mov	 eax, DWORD PTR _bitset$[ebp]
$LN1@antlr3Bits:

; 374  : 
; 375  : }

  00055	83 c4 04	 add	 esp, 4
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
_antlr3BitsetOR ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3bitset.c
;	COMDAT _antlr3BitsetClone
_TEXT	SEGMENT
_bitset$ = -4						; size = 4
_inSet$ = 8						; size = 4
_antlr3BitsetClone PROC					; COMDAT

; 184  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 185  :     pANTLR3_BITSET  bitset;
; 186  : 
; 187  :     // Allocate memory for the bitset structure itself
; 188  :     //
; 189  :     bitset  = antlr3BitsetNew(ANTLR3_BITSET_BITS * inSet->blist.length);

  0000b	8b 45 08	 mov	 eax, DWORD PTR _inSet$[ebp]
  0000e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00011	c1 e1 06	 shl	 ecx, 6
  00014	51		 push	 ecx
  00015	e8 00 00 00 00	 call	 _antlr3BitsetNew
  0001a	83 c4 04	 add	 esp, 4
  0001d	89 45 fc	 mov	 DWORD PTR _bitset$[ebp], eax

; 190  : 
; 191  :     if	(bitset == NULL)

  00020	83 7d fc 00	 cmp	 DWORD PTR _bitset$[ebp], 0
  00024	75 04		 jne	 SHORT $LN2@antlr3Bits

; 192  :     {
; 193  : 		return	NULL;

  00026	33 c0		 xor	 eax, eax
  00028	eb 21		 jmp	 SHORT $LN1@antlr3Bits
$LN2@antlr3Bits:

; 194  :     }
; 195  : 
; 196  :     // Install the actual bits in the source set
; 197  :     //
; 198  :     ANTLR3_MEMCPY(bitset->blist.bits, inSet->blist.bits, (ANTLR3_UINT64)(inSet->blist.length * sizeof(ANTLR3_BITWORD)));

  0002a	8b 55 08	 mov	 edx, DWORD PTR _inSet$[ebp]
  0002d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00030	c1 e0 03	 shl	 eax, 3
  00033	50		 push	 eax
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _inSet$[ebp]
  00037	8b 11		 mov	 edx, DWORD PTR [ecx]
  00039	52		 push	 edx
  0003a	8b 45 fc	 mov	 eax, DWORD PTR _bitset$[ebp]
  0003d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003f	51		 push	 ecx
  00040	e8 00 00 00 00	 call	 _memcpy
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH

; 199  : 
; 200  :     // All seems good
; 201  :     //
; 202  :     return  bitset;

  00048	8b 45 fc	 mov	 eax, DWORD PTR _bitset$[ebp]
$LN1@antlr3Bits:

; 203  : }

  0004b	83 c4 04	 add	 esp, 4
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
_antlr3BitsetClone ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3bitset.c
;	COMDAT _antlr3BitsetSetAPI
_TEXT	SEGMENT
_bitset$ = 8						; size = 4
_antlr3BitsetSetAPI PROC				; COMDAT

; 122  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 123  :     bitset->clone		=    antlr3BitsetClone;

  00003	8b 45 08	 mov	 eax, DWORD PTR _bitset$[ebp]
  00006	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _antlr3BitsetClone

; 124  :     bitset->bor			=    antlr3BitsetOR;

  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _bitset$[ebp]
  00010	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], OFFSET _antlr3BitsetOR

; 125  :     bitset->borInPlace	=    antlr3BitsetORInPlace;

  00017	8b 55 08	 mov	 edx, DWORD PTR _bitset$[ebp]
  0001a	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], OFFSET _antlr3BitsetORInPlace

; 126  :     bitset->size		=    antlr3BitsetSize;

  00021	8b 45 08	 mov	 eax, DWORD PTR _bitset$[ebp]
  00024	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], OFFSET _antlr3BitsetSize

; 127  :     bitset->add			=    antlr3BitsetAdd;

  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _bitset$[ebp]
  0002e	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], OFFSET _antlr3BitsetAdd

; 128  :     bitset->grow		=    grow;

  00035	8b 55 08	 mov	 edx, DWORD PTR _bitset$[ebp]
  00038	c7 42 1c 00 00
	00 00		 mov	 DWORD PTR [edx+28], OFFSET _grow

; 129  :     bitset->equals		=    antlr3BitsetEquals;

  0003f	8b 45 08	 mov	 eax, DWORD PTR _bitset$[ebp]
  00042	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], OFFSET _antlr3BitsetEquals

; 130  :     bitset->isMember	=    antlr3BitsetMember;

  00049	8b 4d 08	 mov	 ecx, DWORD PTR _bitset$[ebp]
  0004c	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], OFFSET _antlr3BitsetMember

; 131  :     bitset->numBits		=    antlr3BitsetNumBits;

  00053	8b 55 08	 mov	 edx, DWORD PTR _bitset$[ebp]
  00056	c7 42 28 00 00
	00 00		 mov	 DWORD PTR [edx+40], OFFSET _antlr3BitsetNumBits

; 132  :     bitset->remove		=    antlr3BitsetRemove;

  0005d	8b 45 08	 mov	 eax, DWORD PTR _bitset$[ebp]
  00060	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], OFFSET _antlr3BitsetRemove

; 133  :     bitset->isNilNode		=    antlr3BitsetIsNil;

  00067	8b 4d 08	 mov	 ecx, DWORD PTR _bitset$[ebp]
  0006a	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], OFFSET _antlr3BitsetIsNil

; 134  :     bitset->toIntList	=    antlr3BitsetToIntList;

  00071	8b 55 08	 mov	 edx, DWORD PTR _bitset$[ebp]
  00074	c7 42 34 00 00
	00 00		 mov	 DWORD PTR [edx+52], OFFSET _antlr3BitsetToIntList

; 135  : 
; 136  :     bitset->free		=    antlr3BitsetFree;

  0007b	8b 45 08	 mov	 eax, DWORD PTR _bitset$[ebp]
  0007e	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], OFFSET _antlr3BitsetFree

; 137  : }

  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
_antlr3BitsetSetAPI ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3bitset.c
;	COMDAT _antlr3BitsetLoad
_TEXT	SEGMENT
_count$ = -8						; size = 4
_bitset$ = -4						; size = 4
_inBits$ = 8						; size = 4
_antlr3BitsetLoad PROC					; COMDAT

; 254  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000f	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 255  : 	pANTLR3_BITSET  bitset;
; 256  : 	ANTLR3_UINT32  count;
; 257  : 
; 258  : 	// Allocate memory for the bitset structure itself
; 259  : 	// the input parameter is the bit number (0 based)
; 260  : 	// to include in the bitset, so we need at at least
; 261  : 	// bit + 1 bits. If any arguments indicate a 
; 262  : 	// a bit higher than the default number of bits (0 means default size)
; 263  : 	// then Add() will take care
; 264  : 	// of it.
; 265  : 	//
; 266  : 	bitset  = antlr3BitsetNew(0);

  00016	6a 00		 push	 0
  00018	e8 00 00 00 00	 call	 _antlr3BitsetNew
  0001d	83 c4 04	 add	 esp, 4
  00020	89 45 fc	 mov	 DWORD PTR _bitset$[ebp], eax

; 267  : 
; 268  : 	if	(bitset == NULL)

  00023	83 7d fc 00	 cmp	 DWORD PTR _bitset$[ebp], 0
  00027	75 04		 jne	 SHORT $LN4@antlr3Bits

; 269  : 	{
; 270  : 		return	NULL;

  00029	33 c0		 xor	 eax, eax
  0002b	eb 6f		 jmp	 SHORT $LN1@antlr3Bits
$LN4@antlr3Bits:

; 271  : 	}
; 272  : 
; 273  : 	if	(inBits != NULL)

  0002d	83 7d 08 00	 cmp	 DWORD PTR _inBits$[ebp], 0
  00031	74 66		 je	 SHORT $LN3@antlr3Bits

; 274  : 	{
; 275  : 		// Now we can add the element bits into the set
; 276  : 		//
; 277  : 		count=0;

  00033	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
$LN2@antlr3Bits:

; 278  : 		while (count < inBits->length)

  0003a	8b 45 08	 mov	 eax, DWORD PTR _inBits$[ebp]
  0003d	8b 4d f8	 mov	 ecx, DWORD PTR _count$[ebp]
  00040	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00043	73 54		 jae	 SHORT $LN3@antlr3Bits

; 279  : 		{
; 280  : 			if  (bitset->blist.length <= count)

  00045	8b 55 fc	 mov	 edx, DWORD PTR _bitset$[ebp]
  00048	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0004b	3b 45 f8	 cmp	 eax, DWORD PTR _count$[ebp]
  0004e	77 20		 ja	 SHORT $LN6@antlr3Bits

; 281  : 			{
; 282  : 				bitset->grow(bitset, count+1);

  00050	8b 4d f8	 mov	 ecx, DWORD PTR _count$[ebp]
  00053	83 c1 01	 add	 ecx, 1
  00056	8b f4		 mov	 esi, esp
  00058	51		 push	 ecx
  00059	8b 55 fc	 mov	 edx, DWORD PTR _bitset$[ebp]
  0005c	52		 push	 edx
  0005d	8b 45 fc	 mov	 eax, DWORD PTR _bitset$[ebp]
  00060	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00063	ff d1		 call	 ecx
  00065	83 c4 08	 add	 esp, 8
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	90		 npad	 1
$LN6@antlr3Bits:

; 283  : 			}
; 284  : 
; 285  : 			bitset->blist.bits[count] = *((inBits->bits)+count);

  00070	8b 55 08	 mov	 edx, DWORD PTR _inBits$[ebp]
  00073	8b 02		 mov	 eax, DWORD PTR [edx]
  00075	8b 4d fc	 mov	 ecx, DWORD PTR _bitset$[ebp]
  00078	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007a	8b 4d f8	 mov	 ecx, DWORD PTR _count$[ebp]
  0007d	8b 75 f8	 mov	 esi, DWORD PTR _count$[ebp]
  00080	8b 3c f0	 mov	 edi, DWORD PTR [eax+esi*8]
  00083	8b 44 f0 04	 mov	 eax, DWORD PTR [eax+esi*8+4]
  00087	89 3c ca	 mov	 DWORD PTR [edx+ecx*8], edi
  0008a	89 44 ca 04	 mov	 DWORD PTR [edx+ecx*8+4], eax

; 286  : 			count++;

  0008e	8b 4d f8	 mov	 ecx, DWORD PTR _count$[ebp]
  00091	83 c1 01	 add	 ecx, 1
  00094	89 4d f8	 mov	 DWORD PTR _count$[ebp], ecx

; 287  : 		}

  00097	eb a1		 jmp	 SHORT $LN2@antlr3Bits
$LN3@antlr3Bits:

; 288  : 	}
; 289  : 
; 290  : 	// return the new bitset
; 291  : 	//
; 292  : 	return  bitset;

  00099	8b 45 fc	 mov	 eax, DWORD PTR _bitset$[ebp]
$LN1@antlr3Bits:

; 293  : }

  0009c	5f		 pop	 edi
  0009d	5e		 pop	 esi
  0009e	83 c4 08	 add	 esp, 8
  000a1	3b ec		 cmp	 ebp, esp
  000a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a8	8b e5		 mov	 esp, ebp
  000aa	5d		 pop	 ebp
  000ab	c3		 ret	 0
_antlr3BitsetLoad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3bitset.c
;	COMDAT _antlr3BitsetCopy
_TEXT	SEGMENT
_numElements$ = -8					; size = 4
_bitset$ = -4						; size = 4
_blist$ = 8						; size = 4
_antlr3BitsetCopy PROC					; COMDAT

; 141  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 142  :     pANTLR3_BITSET  bitset;
; 143  : 	int				numElements;
; 144  : 
; 145  :     // Allocate memory for the bitset structure itself
; 146  :     //
; 147  :     bitset  = (pANTLR3_BITSET) ANTLR3_MALLOC((size_t)sizeof(ANTLR3_BITSET));

  00015	8b f4		 mov	 esi, esp
  00017	6a 3c		 push	 60			; 0000003cH
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0001f	83 c4 04	 add	 esp, 4
  00022	3b f4		 cmp	 esi, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	89 45 fc	 mov	 DWORD PTR _bitset$[ebp], eax

; 148  : 
; 149  :     if	(bitset == NULL)

  0002c	83 7d fc 00	 cmp	 DWORD PTR _bitset$[ebp], 0
  00030	75 04		 jne	 SHORT $LN2@antlr3Bits

; 150  :     {
; 151  : 		return	NULL;

  00032	33 c0		 xor	 eax, eax
  00034	eb 7d		 jmp	 SHORT $LN1@antlr3Bits
$LN2@antlr3Bits:

; 152  :     }
; 153  : 
; 154  : 	numElements = blist->length;

  00036	8b 45 08	 mov	 eax, DWORD PTR _blist$[ebp]
  00039	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003c	89 4d f8	 mov	 DWORD PTR _numElements$[ebp], ecx

; 155  : 
; 156  :     // Avoid memory thrashing at the expense of a few more bytes
; 157  :     //
; 158  :     if	(numElements < 8)

  0003f	83 7d f8 08	 cmp	 DWORD PTR _numElements$[ebp], 8
  00043	7d 07		 jge	 SHORT $LN3@antlr3Bits

; 159  :     {
; 160  : 		numElements = 8;

  00045	c7 45 f8 08 00
	00 00		 mov	 DWORD PTR _numElements$[ebp], 8
$LN3@antlr3Bits:

; 161  :     }
; 162  : 
; 163  :     // Install the length in ANTLR3_UINT64 units
; 164  :     //
; 165  :     bitset->blist.length  = numElements;

  0004c	8b 55 fc	 mov	 edx, DWORD PTR _bitset$[ebp]
  0004f	8b 45 f8	 mov	 eax, DWORD PTR _numElements$[ebp]
  00052	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 166  : 
; 167  :     bitset->blist.bits    = (pANTLR3_BITWORD)ANTLR3_MALLOC((size_t)(numElements * sizeof(ANTLR3_BITWORD)));

  00055	8b 4d f8	 mov	 ecx, DWORD PTR _numElements$[ebp]
  00058	c1 e1 03	 shl	 ecx, 3
  0005b	8b f4		 mov	 esi, esp
  0005d	51		 push	 ecx
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00064	83 c4 04	 add	 esp, 4
  00067	3b f4		 cmp	 esi, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006e	8b 55 fc	 mov	 edx, DWORD PTR _bitset$[ebp]
  00071	89 02		 mov	 DWORD PTR [edx], eax

; 168  : 
; 169  :     if	(bitset->blist.bits == NULL)

  00073	8b 45 fc	 mov	 eax, DWORD PTR _bitset$[ebp]
  00076	83 38 00	 cmp	 DWORD PTR [eax], 0
  00079	75 1a		 jne	 SHORT $LN4@antlr3Bits

; 170  :     {
; 171  : 		ANTLR3_FREE(bitset);

  0007b	8b f4		 mov	 esi, esp
  0007d	8b 4d fc	 mov	 ecx, DWORD PTR _bitset$[ebp]
  00080	51		 push	 ecx
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00087	83 c4 04	 add	 esp, 4
  0008a	3b f4		 cmp	 esi, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 172  : 		return	NULL;

  00091	33 c0		 xor	 eax, eax
  00093	eb 1e		 jmp	 SHORT $LN1@antlr3Bits
$LN4@antlr3Bits:

; 173  :     }
; 174  : 
; 175  : 	ANTLR3_MEMCPY(bitset->blist.bits, blist->bits, (ANTLR3_UINT64)(numElements * sizeof(ANTLR3_BITWORD)));

  00095	8b 55 f8	 mov	 edx, DWORD PTR _numElements$[ebp]
  00098	c1 e2 03	 shl	 edx, 3
  0009b	52		 push	 edx
  0009c	8b 45 08	 mov	 eax, DWORD PTR _blist$[ebp]
  0009f	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a1	51		 push	 ecx
  000a2	8b 55 fc	 mov	 edx, DWORD PTR _bitset$[ebp]
  000a5	8b 02		 mov	 eax, DWORD PTR [edx]
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 _memcpy
  000ad	83 c4 0c	 add	 esp, 12			; 0000000cH

; 176  : 
; 177  :     // All seems good
; 178  :     //
; 179  :     return  bitset;

  000b0	8b 45 fc	 mov	 eax, DWORD PTR _bitset$[ebp]
$LN1@antlr3Bits:

; 180  : }

  000b3	5e		 pop	 esi
  000b4	83 c4 08	 add	 esp, 8
  000b7	3b ec		 cmp	 ebp, esp
  000b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c3		 ret	 0
_antlr3BitsetCopy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3bitset.c
;	COMDAT _antlr3BitsetList
_TEXT	SEGMENT
_bit$ = -32						; size = 8
_key$ = -16						; size = 4
_en$ = -8						; size = 4
_bitSet$ = -4						; size = 4
_list$ = 8						; size = 4
_antlr3BitsetList PROC					; COMDAT

; 208  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000f	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00012	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00015	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00018	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00021	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00024	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 209  :     pANTLR3_BITSET		bitSet;
; 210  :     pANTLR3_HASH_ENUM	en;
; 211  :     pANTLR3_HASH_KEY	key;
; 212  :     ANTLR3_UINT64		bit;
; 213  : 
; 214  :     // We have no idea what exactly is in the list
; 215  :     // so create a default bitset and then just add stuff
; 216  :     // as we enumerate.
; 217  :     //
; 218  :     bitSet  = antlr3BitsetNew(0);

  00027	6a 00		 push	 0
  00029	e8 00 00 00 00	 call	 _antlr3BitsetNew
  0002e	83 c4 04	 add	 esp, 4
  00031	89 45 fc	 mov	 DWORD PTR _bitSet$[ebp], eax

; 219  : 
; 220  :     en		= antlr3EnumNew(list);

  00034	8b 45 08	 mov	 eax, DWORD PTR _list$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 _antlr3EnumNew
  0003d	83 c4 04	 add	 esp, 4
  00040	89 45 f8	 mov	 DWORD PTR _en$[ebp], eax
$LN2@antlr3Bits:

; 221  : 
; 222  :     while   (en->next(en, &key, (void **)(&bit)) == ANTLR3_SUCCESS)

  00043	8b f4		 mov	 esi, esp
  00045	8d 4d e0	 lea	 ecx, DWORD PTR _bit$[ebp]
  00048	51		 push	 ecx
  00049	8d 55 f0	 lea	 edx, DWORD PTR _key$[ebp]
  0004c	52		 push	 edx
  0004d	8b 45 f8	 mov	 eax, DWORD PTR _en$[ebp]
  00050	50		 push	 eax
  00051	8b 4d f8	 mov	 ecx, DWORD PTR _en$[ebp]
  00054	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00057	ff d2		 call	 edx
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005c	3b f4		 cmp	 esi, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	85 c0		 test	 eax, eax
  00065	75 1f		 jne	 SHORT $LN3@antlr3Bits

; 223  :     {
; 224  : 		bitSet->add(bitSet, (ANTLR3_UINT32)bit);

  00067	8b 45 e0	 mov	 eax, DWORD PTR _bit$[ebp]
  0006a	8b f4		 mov	 esi, esp
  0006c	50		 push	 eax
  0006d	8b 4d fc	 mov	 ecx, DWORD PTR _bitSet$[ebp]
  00070	51		 push	 ecx
  00071	8b 55 fc	 mov	 edx, DWORD PTR _bitSet$[ebp]
  00074	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00077	ff d0		 call	 eax
  00079	83 c4 08	 add	 esp, 8
  0007c	3b f4		 cmp	 esi, esp
  0007e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00083	90		 npad	 1

; 225  :     }

  00084	eb bd		 jmp	 SHORT $LN2@antlr3Bits
$LN3@antlr3Bits:

; 226  :     en->free(en);

  00086	8b f4		 mov	 esi, esp
  00088	8b 4d f8	 mov	 ecx, DWORD PTR _en$[ebp]
  0008b	51		 push	 ecx
  0008c	8b 55 f8	 mov	 edx, DWORD PTR _en$[ebp]
  0008f	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00092	ff d0		 call	 eax
  00094	83 c4 04	 add	 esp, 4
  00097	3b f4		 cmp	 esi, esp
  00099	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 227  : 
; 228  :     return NULL;

  0009e	33 c0		 xor	 eax, eax

; 229  : }

  000a0	52		 push	 edx
  000a1	8b cd		 mov	 ecx, ebp
  000a3	50		 push	 eax
  000a4	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@antlr3Bits
  000aa	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000af	58		 pop	 eax
  000b0	5a		 pop	 edx
  000b1	5e		 pop	 esi
  000b2	83 c4 24	 add	 esp, 36			; 00000024H
  000b5	3b ec		 cmp	 ebp, esp
  000b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c3		 ret	 0
$LN8@antlr3Bits:
  000c0	02 00 00 00	 DD	 2
  000c4	00 00 00 00	 DD	 $LN7@antlr3Bits
$LN7@antlr3Bits:
  000c8	f0 ff ff ff	 DD	 -16			; fffffff0H
  000cc	04 00 00 00	 DD	 4
  000d0	00 00 00 00	 DD	 $LN5@antlr3Bits
  000d4	e0 ff ff ff	 DD	 -32			; ffffffe0H
  000d8	08 00 00 00	 DD	 8
  000dc	00 00 00 00	 DD	 $LN6@antlr3Bits
$LN6@antlr3Bits:
  000e0	62		 DB	 98			; 00000062H
  000e1	69		 DB	 105			; 00000069H
  000e2	74		 DB	 116			; 00000074H
  000e3	00		 DB	 0
$LN5@antlr3Bits:
  000e4	6b		 DB	 107			; 0000006bH
  000e5	65		 DB	 101			; 00000065H
  000e6	79		 DB	 121			; 00000079H
  000e7	00		 DB	 0
_antlr3BitsetList ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3bitset.c
;	COMDAT _antlr3BitsetOf
_TEXT	SEGMENT
_ap$ = -8						; size = 4
_bitset$ = -4						; size = 4
_bit$ = 8						; size = 4
_antlr3BitsetOf PROC					; COMDAT

; 317  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 318  :     pANTLR3_BITSET  bitset;
; 319  : 
; 320  :     va_list ap;
; 321  : 
; 322  :     // Allocate memory for the bitset structure itself
; 323  :     // the input parameter is the bit number (0 based)
; 324  :     // to include in the bitset, so we need at at least
; 325  :     // bit + 1 bits. If any arguments indicate a 
; 326  :     // a bit higher than the default number of bits (0 menas default size)
; 327  :     // then Add() will take care
; 328  :     // of it.
; 329  :     //
; 330  :     bitset  = antlr3BitsetNew(0);

  00014	6a 00		 push	 0
  00016	e8 00 00 00 00	 call	 _antlr3BitsetNew
  0001b	83 c4 04	 add	 esp, 4
  0001e	89 45 fc	 mov	 DWORD PTR _bitset$[ebp], eax

; 331  : 
; 332  :     if	(bitset == NULL)

  00021	83 7d fc 00	 cmp	 DWORD PTR _bitset$[ebp], 0
  00025	75 04		 jne	 SHORT $LN4@antlr3Bits

; 333  :     {
; 334  : 		return	NULL;

  00027	33 c0		 xor	 eax, eax
  00029	eb 3a		 jmp	 SHORT $LN1@antlr3Bits
$LN4@antlr3Bits:

; 335  :     }
; 336  : 
; 337  :     // Now we can add the element bits into the set
; 338  :     //
; 339  :     va_start(ap, bit);

  0002b	8d 45 0c	 lea	 eax, DWORD PTR _bit$[ebp+4]
  0002e	89 45 f8	 mov	 DWORD PTR _ap$[ebp], eax
$LN2@antlr3Bits:

; 340  :     while   (bit != -1)

  00031	83 7d 08 ff	 cmp	 DWORD PTR _bit$[ebp], -1
  00035	74 24		 je	 SHORT $LN3@antlr3Bits

; 341  :     {
; 342  : 		antlr3BitsetAdd(bitset, bit);

  00037	8b 4d 08	 mov	 ecx, DWORD PTR _bit$[ebp]
  0003a	51		 push	 ecx
  0003b	8b 55 fc	 mov	 edx, DWORD PTR _bitset$[ebp]
  0003e	52		 push	 edx
  0003f	e8 00 00 00 00	 call	 _antlr3BitsetAdd
  00044	83 c4 08	 add	 esp, 8

; 343  : 		bit = va_arg(ap, ANTLR3_UINT32);

  00047	8b 45 f8	 mov	 eax, DWORD PTR _ap$[ebp]
  0004a	83 c0 04	 add	 eax, 4
  0004d	89 45 f8	 mov	 DWORD PTR _ap$[ebp], eax
  00050	8b 4d f8	 mov	 ecx, DWORD PTR _ap$[ebp]
  00053	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00056	89 55 08	 mov	 DWORD PTR _bit$[ebp], edx

; 344  :     }

  00059	eb d6		 jmp	 SHORT $LN2@antlr3Bits
$LN3@antlr3Bits:

; 345  :     va_end(ap);

  0005b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ap$[ebp], 0

; 346  : 
; 347  :     // return the new bitset
; 348  :     //
; 349  :     return  bitset;

  00062	8b 45 fc	 mov	 eax, DWORD PTR _bitset$[ebp]
$LN1@antlr3Bits:

; 350  : }

  00065	83 c4 08	 add	 esp, 8
  00068	3b ec		 cmp	 ebp, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
_antlr3BitsetOf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3bitset.c
;	COMDAT _antlr3BitsetNew
_TEXT	SEGMENT
_numelements$ = -8					; size = 4
_bitset$ = -4						; size = 4
_numBits$ = 8						; size = 4
_antlr3BitsetNew PROC					; COMDAT

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 78   : 	pANTLR3_BITSET  bitset;
; 79   : 
; 80   : 	ANTLR3_UINT32   numelements;
; 81   : 
; 82   : 	// Allocate memory for the bitset structure itself
; 83   : 	//
; 84   : 	bitset  = (pANTLR3_BITSET) ANTLR3_MALLOC((size_t)sizeof(ANTLR3_BITSET));

  00015	8b f4		 mov	 esi, esp
  00017	6a 3c		 push	 60			; 0000003cH
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0001f	83 c4 04	 add	 esp, 4
  00022	3b f4		 cmp	 esi, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	89 45 fc	 mov	 DWORD PTR _bitset$[ebp], eax

; 85   : 
; 86   : 	if	(bitset == NULL)

  0002c	83 7d fc 00	 cmp	 DWORD PTR _bitset$[ebp], 0
  00030	75 07		 jne	 SHORT $LN2@antlr3Bits

; 87   : 	{
; 88   : 		return	NULL;

  00032	33 c0		 xor	 eax, eax
  00034	e9 8e 00 00 00	 jmp	 $LN1@antlr3Bits
$LN2@antlr3Bits:

; 89   : 	}
; 90   : 
; 91   : 	// Avoid memory thrashing at the up front expense of a few bytes
; 92   : 	//
; 93   : 	if	(numBits < (8 * ANTLR3_BITSET_BITS))

  00039	81 7d 08 00 02
	00 00		 cmp	 DWORD PTR _numBits$[ebp], 512 ; 00000200H
  00040	73 07		 jae	 SHORT $LN3@antlr3Bits

; 94   : 	{
; 95   : 		numBits = 8 * ANTLR3_BITSET_BITS;

  00042	c7 45 08 00 02
	00 00		 mov	 DWORD PTR _numBits$[ebp], 512 ; 00000200H
$LN3@antlr3Bits:

; 96   : 	}
; 97   : 
; 98   : 	// No we need to allocate the memory for the number of bits asked for
; 99   : 	// in multiples of ANTLR3_UINT64. 
; 100  : 	//
; 101  : 	numelements	= ((numBits -1) >> ANTLR3_BITSET_LOG_BITS) + 1;

  00049	8b 45 08	 mov	 eax, DWORD PTR _numBits$[ebp]
  0004c	83 e8 01	 sub	 eax, 1
  0004f	c1 e8 06	 shr	 eax, 6
  00052	83 c0 01	 add	 eax, 1
  00055	89 45 f8	 mov	 DWORD PTR _numelements$[ebp], eax

; 102  : 
; 103  : 	bitset->blist.bits    = (pANTLR3_BITWORD) ANTLR3_MALLOC((size_t)(numelements * sizeof(ANTLR3_BITWORD)));

  00058	8b 4d f8	 mov	 ecx, DWORD PTR _numelements$[ebp]
  0005b	c1 e1 03	 shl	 ecx, 3
  0005e	8b f4		 mov	 esi, esp
  00060	51		 push	 ecx
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00067	83 c4 04	 add	 esp, 4
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	8b 55 fc	 mov	 edx, DWORD PTR _bitset$[ebp]
  00074	89 02		 mov	 DWORD PTR [edx], eax

; 104  : 	if	(bitset->blist.bits == NULL)

  00076	8b 45 fc	 mov	 eax, DWORD PTR _bitset$[ebp]
  00079	83 38 00	 cmp	 DWORD PTR [eax], 0
  0007c	75 1a		 jne	 SHORT $LN4@antlr3Bits

; 105  : 	{
; 106  : 		ANTLR3_FREE(bitset);

  0007e	8b f4		 mov	 esi, esp
  00080	8b 4d fc	 mov	 ecx, DWORD PTR _bitset$[ebp]
  00083	51		 push	 ecx
  00084	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0008a	83 c4 04	 add	 esp, 4
  0008d	3b f4		 cmp	 esi, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 107  : 		return	NULL;

  00094	33 c0		 xor	 eax, eax
  00096	eb 2f		 jmp	 SHORT $LN1@antlr3Bits
$LN4@antlr3Bits:

; 108  : 	}
; 109  : 	memset(bitset->blist.bits, 0, (size_t)(numelements * sizeof(ANTLR3_BITWORD)));

  00098	8b 55 f8	 mov	 edx, DWORD PTR _numelements$[ebp]
  0009b	c1 e2 03	 shl	 edx, 3
  0009e	52		 push	 edx
  0009f	6a 00		 push	 0
  000a1	8b 45 fc	 mov	 eax, DWORD PTR _bitset$[ebp]
  000a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a6	51		 push	 ecx
  000a7	e8 00 00 00 00	 call	 _memset
  000ac	83 c4 0c	 add	 esp, 12			; 0000000cH

; 110  : 	bitset->blist.length  = numelements;

  000af	8b 55 fc	 mov	 edx, DWORD PTR _bitset$[ebp]
  000b2	8b 45 f8	 mov	 eax, DWORD PTR _numelements$[ebp]
  000b5	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 111  : 
; 112  : 	antlr3BitsetSetAPI(bitset);

  000b8	8b 4d fc	 mov	 ecx, DWORD PTR _bitset$[ebp]
  000bb	51		 push	 ecx
  000bc	e8 00 00 00 00	 call	 _antlr3BitsetSetAPI
  000c1	83 c4 04	 add	 esp, 4

; 113  : 
; 114  : 
; 115  : 	// All seems good
; 116  : 	//
; 117  : 	return  bitset;

  000c4	8b 45 fc	 mov	 eax, DWORD PTR _bitset$[ebp]
$LN1@antlr3Bits:

; 118  : }

  000c7	5e		 pop	 esi
  000c8	83 c4 08	 add	 esp, 8
  000cb	3b ec		 cmp	 ebp, esp
  000cd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	c3		 ret	 0
_antlr3BitsetNew ENDP
_TEXT	ENDS
END
