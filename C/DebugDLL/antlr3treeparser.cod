; Listing generated by Microsoft (R) Optimizing Compiler Version 19.42.34436.0 

	TITLE	C:\SPO_labs\C\DebugDLL\antlr3treeparser.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_antlr3MTNExceptionNew
PUBLIC	_antlr3TreeParserNewStream
PUBLIC	??_C@_0CO@BHFJHLHM@org?4antlr?4runtime?4MismatchedTre@ ; `string'
PUBLIC	??_C@_09MLMDPBIO@?$DMmissing?5@			; `string'
PUBLIC	??_C@_01PPODPGHN@?$DO@				; `string'
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	_antlr3BaseRecognizerNew:PROC
EXTRN	_antlr3RecognitionExceptionNew:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_01PPODPGHN@?$DO@
CONST	SEGMENT
??_C@_01PPODPGHN@?$DO@ DB '>', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09MLMDPBIO@?$DMmissing?5@
CONST	SEGMENT
??_C@_09MLMDPBIO@?$DMmissing?5@ DB '<missing ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@BHFJHLHM@org?4antlr?4runtime?4MismatchedTre@
CONST	SEGMENT
??_C@_0CO@BHFJHLHM@org?4antlr?4runtime?4MismatchedTre@ DB 'org.antlr.runt'
	DB	'ime.MismatchedTreeNodeException', 00H	; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3treeparser.c
;	COMDAT _getMissingSymbol
_TEXT	SEGMENT
tv83 = -32						; size = 4
_i$ = -28						; size = 4
_text$ = -24						; size = 4
_token$ = -20						; size = 4
_current$ = -16						; size = 4
_node$ = -12						; size = 4
_ctns$ = -8						; size = 4
_tns$ = -4						; size = 4
_recognizer$ = 8					; size = 4
_istream$ = 12						; size = 4
_e$ = 16						; size = 4
_expectedTokenType$ = 20				; size = 4
_follow$ = 24						; size = 4
_getMissingSymbol PROC					; COMDAT

; 206  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00012	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00015	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00018	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001b	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001e	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00021	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 207  : 	pANTLR3_TREE_NODE_STREAM		tns;
; 208  :     pANTLR3_COMMON_TREE_NODE_STREAM	ctns;
; 209  : 	pANTLR3_BASE_TREE				node;
; 210  : 	pANTLR3_BASE_TREE				current;
; 211  : 	pANTLR3_COMMON_TOKEN			token;
; 212  : 	pANTLR3_STRING					text;
; 213  :     ANTLR3_INT32                   i;
; 214  : 
; 215  : 	// Dereference the standard pointers
; 216  : 	//
; 217  :     tns	    = (pANTLR3_TREE_NODE_STREAM)(istream->super);

  00024	8b 45 0c	 mov	 eax, DWORD PTR _istream$[ebp]
  00027	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0002a	89 4d fc	 mov	 DWORD PTR _tns$[ebp], ecx

; 218  :     ctns    = tns->ctns;

  0002d	8b 55 fc	 mov	 edx, DWORD PTR _tns$[ebp]
  00030	8b 02		 mov	 eax, DWORD PTR [edx]
  00032	89 45 f8	 mov	 DWORD PTR _ctns$[ebp], eax

; 219  :     
; 220  : 	// Create a new empty node, by stealing the current one, or the previous one if the current one is EOF
; 221  : 	//
; 222  : 	current	= tns->_LT(tns, 1);

  00035	8b f4		 mov	 esi, esp
  00037	6a 01		 push	 1
  00039	8b 4d fc	 mov	 ecx, DWORD PTR _tns$[ebp]
  0003c	51		 push	 ecx
  0003d	8b 55 fc	 mov	 edx, DWORD PTR _tns$[ebp]
  00040	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00043	ff d0		 call	 eax
  00045	83 c4 08	 add	 esp, 8
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	89 45 f0	 mov	 DWORD PTR _current$[ebp], eax

; 223  :     i       = -1;

  00052	c7 45 e4 ff ff
	ff ff		 mov	 DWORD PTR _i$[ebp], -1

; 224  : 
; 225  : 	if	(current == &ctns->EOF_NODE.baseTree)

  00059	8b 4d f8	 mov	 ecx, DWORD PTR _ctns$[ebp]
  0005c	81 c1 60 01 00
	00		 add	 ecx, 352		; 00000160H
  00062	39 4d f0	 cmp	 DWORD PTR _current$[ebp], ecx
  00065	75 26		 jne	 SHORT $LN4@getMissing

; 226  : 	{
; 227  : 		current = tns->_LT(tns, -1);

  00067	8b f4		 mov	 esi, esp
  00069	6a ff		 push	 -1
  0006b	8b 55 fc	 mov	 edx, DWORD PTR _tns$[ebp]
  0006e	52		 push	 edx
  0006f	8b 45 fc	 mov	 eax, DWORD PTR _tns$[ebp]
  00072	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00075	ff d1		 call	 ecx
  00077	83 c4 08	 add	 esp, 8
  0007a	3b f4		 cmp	 esi, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00081	89 45 f0	 mov	 DWORD PTR _current$[ebp], eax

; 228  :         i--;

  00084	8b 55 e4	 mov	 edx, DWORD PTR _i$[ebp]
  00087	83 ea 01	 sub	 edx, 1
  0008a	89 55 e4	 mov	 DWORD PTR _i$[ebp], edx
$LN4@getMissing:

; 229  : 	}
; 230  :     while (((pANTLR3_COMMON_TREE)(current->super))->factory == NULL)

  0008d	8b 45 f0	 mov	 eax, DWORD PTR _current$[ebp]
  00090	8b 08		 mov	 ecx, DWORD PTR [eax]
  00092	83 79 18 00	 cmp	 DWORD PTR [ecx+24], 0
  00096	75 30		 jne	 SHORT $LN3@getMissing

; 231  : 	{
; 232  : 		current = tns->_LT(tns, i--);

  00098	8b 55 e4	 mov	 edx, DWORD PTR _i$[ebp]
  0009b	89 55 e0	 mov	 DWORD PTR tv83[ebp], edx
  0009e	8b 45 e4	 mov	 eax, DWORD PTR _i$[ebp]
  000a1	83 e8 01	 sub	 eax, 1
  000a4	89 45 e4	 mov	 DWORD PTR _i$[ebp], eax
  000a7	8b f4		 mov	 esi, esp
  000a9	8b 4d e0	 mov	 ecx, DWORD PTR tv83[ebp]
  000ac	51		 push	 ecx
  000ad	8b 55 fc	 mov	 edx, DWORD PTR _tns$[ebp]
  000b0	52		 push	 edx
  000b1	8b 45 fc	 mov	 eax, DWORD PTR _tns$[ebp]
  000b4	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b7	ff d1		 call	 ecx
  000b9	83 c4 08	 add	 esp, 8
  000bc	3b f4		 cmp	 esi, esp
  000be	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c3	89 45 f0	 mov	 DWORD PTR _current$[ebp], eax

; 233  :     }

  000c6	eb c5		 jmp	 SHORT $LN4@getMissing
$LN3@getMissing:

; 234  : 
; 235  : 	node	= (pANTLR3_BASE_TREE)current->dupNode(current);

  000c8	8b f4		 mov	 esi, esp
  000ca	8b 55 f0	 mov	 edx, DWORD PTR _current$[ebp]
  000cd	52		 push	 edx
  000ce	8b 45 f0	 mov	 eax, DWORD PTR _current$[ebp]
  000d1	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  000d4	ff d1		 call	 ecx
  000d6	83 c4 04	 add	 esp, 4
  000d9	3b f4		 cmp	 esi, esp
  000db	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e0	89 45 f4	 mov	 DWORD PTR _node$[ebp], eax

; 236  : 
; 237  : 	// Find the newly dupicated token
; 238  : 	//
; 239  : 	token	= node->getToken(node);

  000e3	8b f4		 mov	 esi, esp
  000e5	8b 55 f4	 mov	 edx, DWORD PTR _node$[ebp]
  000e8	52		 push	 edx
  000e9	8b 45 f4	 mov	 eax, DWORD PTR _node$[ebp]
  000ec	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000ef	ff d1		 call	 ecx
  000f1	83 c4 04	 add	 esp, 4
  000f4	3b f4		 cmp	 esi, esp
  000f6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fb	89 45 ec	 mov	 DWORD PTR _token$[ebp], eax

; 240  : 
; 241  : 	// Create the token text that shows it has been inserted
; 242  : 	//
; 243  : 	token->setText8			(token, (pANTLR3_UINT8)"<missing ");

  000fe	8b f4		 mov	 esi, esp
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_09MLMDPBIO@?$DMmissing?5@
  00105	8b 55 ec	 mov	 edx, DWORD PTR _token$[ebp]
  00108	52		 push	 edx
  00109	8b 45 ec	 mov	 eax, DWORD PTR _token$[ebp]
  0010c	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  0010f	ff d1		 call	 ecx
  00111	83 c4 08	 add	 esp, 8
  00114	3b f4		 cmp	 esi, esp
  00116	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 244  : 	text = token->getText	(token);

  0011b	8b f4		 mov	 esi, esp
  0011d	8b 55 ec	 mov	 edx, DWORD PTR _token$[ebp]
  00120	52		 push	 edx
  00121	8b 45 ec	 mov	 eax, DWORD PTR _token$[ebp]
  00124	8b 48 48	 mov	 ecx, DWORD PTR [eax+72]
  00127	ff d1		 call	 ecx
  00129	83 c4 04	 add	 esp, 4
  0012c	3b f4		 cmp	 esi, esp
  0012e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00133	89 45 e8	 mov	 DWORD PTR _text$[ebp], eax

; 245  : 	text->append8			(text, (const char *)recognizer->state->tokenNames[expectedTokenType]);

  00136	8b 55 08	 mov	 edx, DWORD PTR _recognizer$[ebp]
  00139	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0013c	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0013f	8b f4		 mov	 esi, esp
  00141	8b 55 14	 mov	 edx, DWORD PTR _expectedTokenType$[ebp]
  00144	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00147	50		 push	 eax
  00148	8b 4d e8	 mov	 ecx, DWORD PTR _text$[ebp]
  0014b	51		 push	 ecx
  0014c	8b 55 e8	 mov	 edx, DWORD PTR _text$[ebp]
  0014f	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00152	ff d0		 call	 eax
  00154	83 c4 08	 add	 esp, 8
  00157	3b f4		 cmp	 esi, esp
  00159	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 246  : 	text->append8			(text, (const char *)">");

  0015e	8b f4		 mov	 esi, esp
  00160	68 00 00 00 00	 push	 OFFSET ??_C@_01PPODPGHN@?$DO@
  00165	8b 4d e8	 mov	 ecx, DWORD PTR _text$[ebp]
  00168	51		 push	 ecx
  00169	8b 55 e8	 mov	 edx, DWORD PTR _text$[ebp]
  0016c	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0016f	ff d0		 call	 eax
  00171	83 c4 08	 add	 esp, 8
  00174	3b f4		 cmp	 esi, esp
  00176	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 247  : 	
; 248  : 	// Finally return the pointer to our new node
; 249  : 	//
; 250  : 	return	node;

  0017b	8b 45 f4	 mov	 eax, DWORD PTR _node$[ebp]

; 251  : }

  0017e	5e		 pop	 esi
  0017f	83 c4 20	 add	 esp, 32			; 00000020H
  00182	3b ec		 cmp	 ebp, esp
  00184	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00189	8b e5		 mov	 esp, ebp
  0018b	5d		 pop	 ebp
  0018c	c3		 ret	 0
_getMissingSymbol ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3treeparser.c
;	COMDAT _getCurrentInputSymbol
_TEXT	SEGMENT
_ctns$ = -8						; size = 4
_tns$ = -4						; size = 4
_recognizer$ = 8					; size = 4
_istream$ = 12						; size = 4
_getCurrentInputSymbol PROC				; COMDAT

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 191  : 	pANTLR3_TREE_NODE_STREAM		tns;
; 192  :     pANTLR3_COMMON_TREE_NODE_STREAM	ctns;
; 193  : 
; 194  :     tns	    = (pANTLR3_TREE_NODE_STREAM)(istream->super);

  00015	8b 45 0c	 mov	 eax, DWORD PTR _istream$[ebp]
  00018	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001b	89 4d fc	 mov	 DWORD PTR _tns$[ebp], ecx

; 195  :     ctns    = tns->ctns;

  0001e	8b 55 fc	 mov	 edx, DWORD PTR _tns$[ebp]
  00021	8b 02		 mov	 eax, DWORD PTR [edx]
  00023	89 45 f8	 mov	 DWORD PTR _ctns$[ebp], eax

; 196  : 	return tns->_LT(tns, 1);

  00026	8b f4		 mov	 esi, esp
  00028	6a 01		 push	 1
  0002a	8b 4d fc	 mov	 ecx, DWORD PTR _tns$[ebp]
  0002d	51		 push	 ecx
  0002e	8b 55 fc	 mov	 edx, DWORD PTR _tns$[ebp]
  00031	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00034	ff d0		 call	 eax
  00036	83 c4 08	 add	 esp, 8
  00039	3b f4		 cmp	 esi, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 197  : }

  00040	5e		 pop	 esi
  00041	83 c4 08	 add	 esp, 8
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
_getCurrentInputSymbol ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3treeparser.c
;	COMDAT _freeParser
_TEXT	SEGMENT
_parser$ = 8						; size = 4
_freeParser PROC					; COMDAT

; 128  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 129  : 	if	(parser->rec != NULL)

  00004	8b 45 08	 mov	 eax, DWORD PTR _parser$[ebp]
  00007	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000b	0f 84 80 00 00
	00		 je	 $LN2@freeParser

; 130  : 	{
; 131  : 		// This may have ben a delegate or delegator parser, in which case the
; 132  : 		// state may already have been freed (and set to NULL therefore)
; 133  : 		// so we ignore the state if we don't have it.
; 134  : 		//
; 135  : 		if	(parser->rec->state != NULL)

  00011	8b 4d 08	 mov	 ecx, DWORD PTR _parser$[ebp]
  00014	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00017	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  0001b	74 49		 je	 SHORT $LN4@freeParser

; 136  : 		{
; 137  : 			if	(parser->rec->state->following != NULL)

  0001d	8b 45 08	 mov	 eax, DWORD PTR _parser$[ebp]
  00020	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00023	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00026	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  0002a	74 3a		 je	 SHORT $LN4@freeParser

; 138  : 			{
; 139  : 				parser->rec->state->following->free(parser->rec->state->following);

  0002c	8b 45 08	 mov	 eax, DWORD PTR _parser$[ebp]
  0002f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00032	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00035	8b f4		 mov	 esi, esp
  00037	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _parser$[ebp]
  0003e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00041	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00044	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00047	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0004a	ff d2		 call	 edx
  0004c	83 c4 04	 add	 esp, 4
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 140  : 				parser->rec->state->following = NULL;

  00056	8b 45 08	 mov	 eax, DWORD PTR _parser$[ebp]
  00059	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0005f	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0
$LN4@freeParser:

; 141  : 			}
; 142  : 		}
; 143  : 	    parser->rec->free(parser->rec);

  00066	8b f4		 mov	 esi, esp
  00068	8b 45 08	 mov	 eax, DWORD PTR _parser$[ebp]
  0006b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006e	51		 push	 ecx
  0006f	8b 55 08	 mov	 edx, DWORD PTR _parser$[ebp]
  00072	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00075	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0007b	ff d1		 call	 ecx
  0007d	83 c4 04	 add	 esp, 4
  00080	3b f4		 cmp	 esi, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 144  : 	    parser->rec	= NULL;

  00087	8b 55 08	 mov	 edx, DWORD PTR _parser$[ebp]
  0008a	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
$LN2@freeParser:

; 145  :     }
; 146  : 
; 147  :     ANTLR3_FREE(parser);

  00091	8b f4		 mov	 esi, esp
  00093	8b 45 08	 mov	 eax, DWORD PTR _parser$[ebp]
  00096	50		 push	 eax
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0009d	83 c4 04	 add	 esp, 4
  000a0	3b f4		 cmp	 esi, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a7	90		 npad	 1

; 148  : }

  000a8	5e		 pop	 esi
  000a9	3b ec		 cmp	 ebp, esp
  000ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
_freeParser ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3treeparser.c
;	COMDAT _getTreeNodeStream
_TEXT	SEGMENT
_parser$ = 8						; size = 4
_getTreeNodeStream PROC					; COMDAT

; 164  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 165  :     return  parser->ctnstream;

  00003	8b 45 08	 mov	 eax, DWORD PTR _parser$[ebp]
  00006	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 166  : }

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
_getTreeNodeStream ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3treeparser.c
;	COMDAT _setTreeNodeStream
_TEXT	SEGMENT
_parser$ = 8						; size = 4
_input$ = 12						; size = 4
_setTreeNodeStream PROC					; COMDAT

; 154  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 155  :     parser->ctnstream = input;

  00004	8b 45 08	 mov	 eax, DWORD PTR _parser$[ebp]
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _input$[ebp]
  0000a	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 156  :     parser->rec->reset		(parser->rec);

  0000d	8b f4		 mov	 esi, esp
  0000f	8b 55 08	 mov	 edx, DWORD PTR _parser$[ebp]
  00012	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00015	50		 push	 eax
  00016	8b 4d 08	 mov	 ecx, DWORD PTR _parser$[ebp]
  00019	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001c	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00022	ff d0		 call	 eax
  00024	83 c4 04	 add	 esp, 4
  00027	3b f4		 cmp	 esi, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 157  :     parser->ctnstream->reset	(parser->ctnstream);

  0002e	8b f4		 mov	 esi, esp
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _parser$[ebp]
  00033	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00036	52		 push	 edx
  00037	8b 45 08	 mov	 eax, DWORD PTR _parser$[ebp]
  0003a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0003d	8b 91 f0 02 00
	00		 mov	 edx, DWORD PTR [ecx+752]
  00043	ff d2		 call	 edx
  00045	83 c4 04	 add	 esp, 4
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	90		 npad	 1

; 158  : }

  00050	5e		 pop	 esi
  00051	3b ec		 cmp	 ebp, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
_setTreeNodeStream ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3treeparser.c
;	COMDAT _mismatch
_TEXT	SEGMENT
_recognizer$ = 8					; size = 4
_ttype$ = 12						; size = 4
_follow$ = 16						; size = 4
_mismatch PROC						; COMDAT

; 175  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 176  :     recognizer->exConstruct(recognizer);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 08	 mov	 eax, DWORD PTR _recognizer$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _recognizer$[ebp]
  0000d	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  00013	ff d2		 call	 edx
  00015	83 c4 04	 add	 esp, 4
  00018	3b f4		 cmp	 esi, esp
  0001a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 177  :     recognizer->recoverFromMismatchedToken(recognizer, ttype, follow);

  0001f	8b f4		 mov	 esi, esp
  00021	8b 45 10	 mov	 eax, DWORD PTR _follow$[ebp]
  00024	50		 push	 eax
  00025	8b 4d 0c	 mov	 ecx, DWORD PTR _ttype$[ebp]
  00028	51		 push	 ecx
  00029	8b 55 08	 mov	 edx, DWORD PTR _recognizer$[ebp]
  0002c	52		 push	 edx
  0002d	8b 45 08	 mov	 eax, DWORD PTR _recognizer$[ebp]
  00030	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  00033	ff d1		 call	 ecx
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH
  00038	3b f4		 cmp	 esi, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	90		 npad	 1

; 178  : }

  00040	5e		 pop	 esi
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
_mismatch ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3treeparser.c
;	COMDAT _antlr3TreeParserNewStream
_TEXT	SEGMENT
_parser$ = -4						; size = 4
_sizeHint$ = 8						; size = 4
_ctnstream$ = 12					; size = 4
_state$ = 16						; size = 4
_antlr3TreeParserNewStream PROC				; COMDAT

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 54   : 	pANTLR3_TREE_PARSER	    parser;
; 55   : 
; 56   : 	/** Allocate tree parser memory
; 57   : 	*/
; 58   : 	parser  =(pANTLR3_TREE_PARSER) ANTLR3_MALLOC(sizeof(ANTLR3_TREE_PARSER));

  0000c	8b f4		 mov	 esi, esp
  0000e	6a 18		 push	 24			; 00000018H
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00016	83 c4 04	 add	 esp, 4
  00019	3b f4		 cmp	 esi, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	89 45 fc	 mov	 DWORD PTR _parser$[ebp], eax

; 59   : 
; 60   : 	if	(parser == NULL)

  00023	83 7d fc 00	 cmp	 DWORD PTR _parser$[ebp], 0
  00027	75 07		 jne	 SHORT $LN2@antlr3Tree

; 61   : 	{
; 62   : 		return	NULL;

  00029	33 c0		 xor	 eax, eax
  0002b	e9 cf 00 00 00	 jmp	 $LN1@antlr3Tree
$LN2@antlr3Tree:

; 63   : 	}
; 64   : 
; 65   : 	/* Create and install a base recognizer which does most of the work for us
; 66   : 	*/
; 67   : 	parser->rec =  antlr3BaseRecognizerNew(ANTLR3_TYPE_PARSER, sizeHint, state);

  00030	8b 45 10	 mov	 eax, DWORD PTR _state$[ebp]
  00033	50		 push	 eax
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _sizeHint$[ebp]
  00037	51		 push	 ecx
  00038	6a 02		 push	 2
  0003a	e8 00 00 00 00	 call	 _antlr3BaseRecognizerNew
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00042	8b 55 fc	 mov	 edx, DWORD PTR _parser$[ebp]
  00045	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 68   : 
; 69   : 	if	(parser->rec == NULL)

  00048	8b 45 fc	 mov	 eax, DWORD PTR _parser$[ebp]
  0004b	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0004f	75 1f		 jne	 SHORT $LN3@antlr3Tree

; 70   : 	{
; 71   : 		parser->free(parser);

  00051	8b f4		 mov	 esi, esp
  00053	8b 4d fc	 mov	 ecx, DWORD PTR _parser$[ebp]
  00056	51		 push	 ecx
  00057	8b 55 fc	 mov	 edx, DWORD PTR _parser$[ebp]
  0005a	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0005d	ff d0		 call	 eax
  0005f	83 c4 04	 add	 esp, 4
  00062	3b f4		 cmp	 esi, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 72   : 		return	NULL;

  00069	33 c0		 xor	 eax, eax
  0006b	e9 8f 00 00 00	 jmp	 $LN1@antlr3Tree
$LN3@antlr3Tree:

; 73   : 	}
; 74   : 
; 75   : 	/* Ensure we can track back to the tree parser super structure
; 76   : 	* from the base recognizer structure
; 77   : 	*/
; 78   : 	parser->rec->super	= parser;

  00070	8b 4d fc	 mov	 ecx, DWORD PTR _parser$[ebp]
  00073	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00076	8b 45 fc	 mov	 eax, DWORD PTR _parser$[ebp]
  00079	89 02		 mov	 DWORD PTR [edx], eax

; 79   : 	parser->rec->type	= ANTLR3_TYPE_TREE_PARSER;

  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _parser$[ebp]
  0007e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00081	c7 42 04 04 00
	00 00		 mov	 DWORD PTR [edx+4], 4

; 80   : 
; 81   : 	/* Install our base recognizer overrides
; 82   : 	*/
; 83   : 	parser->rec->mismatch				= mismatch;

  00088	8b 45 fc	 mov	 eax, DWORD PTR _parser$[ebp]
  0008b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0008e	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], OFFSET _mismatch

; 84   : 	parser->rec->exConstruct			= antlr3MTNExceptionNew;

  00095	8b 55 fc	 mov	 edx, DWORD PTR _parser$[ebp]
  00098	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0009b	c7 80 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+136], OFFSET _antlr3MTNExceptionNew

; 85   : 	parser->rec->getCurrentInputSymbol	= getCurrentInputSymbol;

  000a5	8b 4d fc	 mov	 ecx, DWORD PTR _parser$[ebp]
  000a8	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ab	c7 42 7c 00 00
	00 00		 mov	 DWORD PTR [edx+124], OFFSET _getCurrentInputSymbol

; 86   : 	parser->rec->getMissingSymbol		= getMissingSymbol;

  000b2	8b 45 fc	 mov	 eax, DWORD PTR _parser$[ebp]
  000b5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b8	c7 81 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+128], OFFSET _getMissingSymbol

; 87   : 
; 88   : 	/* Install tree parser API
; 89   : 	*/
; 90   : 	parser->getTreeNodeStream	=  getTreeNodeStream;

  000c2	8b 55 fc	 mov	 edx, DWORD PTR _parser$[ebp]
  000c5	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], OFFSET _getTreeNodeStream

; 91   : 	parser->setTreeNodeStream	=  setTreeNodeStream;

  000cc	8b 45 fc	 mov	 eax, DWORD PTR _parser$[ebp]
  000cf	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _setTreeNodeStream

; 92   : 	parser->free		=  freeParser;

  000d6	8b 4d fc	 mov	 ecx, DWORD PTR _parser$[ebp]
  000d9	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], OFFSET _freeParser

; 93   : 
; 94   : 	/* Install the tree node stream
; 95   : 	*/
; 96   : 	parser->setTreeNodeStream(parser, ctnstream);

  000e0	8b f4		 mov	 esi, esp
  000e2	8b 55 0c	 mov	 edx, DWORD PTR _ctnstream$[ebp]
  000e5	52		 push	 edx
  000e6	8b 45 fc	 mov	 eax, DWORD PTR _parser$[ebp]
  000e9	50		 push	 eax
  000ea	8b 4d fc	 mov	 ecx, DWORD PTR _parser$[ebp]
  000ed	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  000f0	ff d2		 call	 edx
  000f2	83 c4 08	 add	 esp, 8
  000f5	3b f4		 cmp	 esi, esp
  000f7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 97   : 
; 98   : 	return  parser;

  000fc	8b 45 fc	 mov	 eax, DWORD PTR _parser$[ebp]
$LN1@antlr3Tree:

; 99   : }

  000ff	5e		 pop	 esi
  00100	83 c4 04	 add	 esp, 4
  00103	3b ec		 cmp	 ebp, esp
  00105	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010a	8b e5		 mov	 esp, ebp
  0010c	5d		 pop	 ebp
  0010d	c3		 ret	 0
_antlr3TreeParserNewStream ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3treeparser.c
;	COMDAT _antlr3MTNExceptionNew
_TEXT	SEGMENT
_recognizer$ = 8					; size = 4
_antlr3MTNExceptionNew PROC				; COMDAT

; 112  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 113  :     /* Create a basic recognition exception structure
; 114  :      */
; 115  :     antlr3RecognitionExceptionNew(recognizer);

  00003	8b 45 08	 mov	 eax, DWORD PTR _recognizer$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _antlr3RecognitionExceptionNew
  0000c	83 c4 04	 add	 esp, 4

; 116  : 
; 117  :     /* Now update it to indicate this is a Mismatched token exception
; 118  :      */
; 119  :     recognizer->state->exception->name		= ANTLR3_MISMATCHED_TREE_NODE_NAME;

  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _recognizer$[ebp]
  00012	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00015	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00018	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ??_C@_0CO@BHFJHLHM@org?4antlr?4runtime?4MismatchedTre@

; 120  :     recognizer->state->exception->type		= ANTLR3_MISMATCHED_TREE_NODE_EXCEPTION;

  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _recognizer$[ebp]
  00022	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00025	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00028	c7 00 07 00 00
	00		 mov	 DWORD PTR [eax], 7

; 121  : 
; 122  :     return;
; 123  : }

  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
_antlr3MTNExceptionNew ENDP
_TEXT	ENDS
END
