; Listing generated by Microsoft (R) Optimizing Compiler Version 19.42.34436.0 

	TITLE	C:\SPO_labs\C\Debug\antlr3parser.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_antlr3ParserNewStreamDbg
PUBLIC	_antlr3ParserNewStream
PUBLIC	_antlr3ParserNew
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	_antlr3BaseRecognizerNew:PROC
EXTRN	_antlr3MTExceptionNew:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3parser.c
;	COMDAT _freeParser
_TEXT	SEGMENT
_parser$ = 8						; size = 4
_freeParser PROC					; COMDAT

; 123  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 124  :     if	(parser->rec != NULL)

  00004	8b 45 08	 mov	 eax, DWORD PTR _parser$[ebp]
  00007	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0000b	0f 84 80 00 00
	00		 je	 $LN2@freeParser

; 125  :     {
; 126  : 		// This may have ben a delegate or delegator parser, in which case the
; 127  : 		// state may already have been freed (and set to NULL therefore)
; 128  : 		// so we ignore the state if we don't have it.
; 129  : 		//
; 130  : 		if	(parser->rec->state != NULL)

  00011	8b 4d 08	 mov	 ecx, DWORD PTR _parser$[ebp]
  00014	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00017	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  0001b	74 49		 je	 SHORT $LN4@freeParser

; 131  : 		{
; 132  : 			if	(parser->rec->state->following != NULL)

  0001d	8b 45 08	 mov	 eax, DWORD PTR _parser$[ebp]
  00020	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00023	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00026	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  0002a	74 3a		 je	 SHORT $LN4@freeParser

; 133  : 			{
; 134  : 				parser->rec->state->following->free(parser->rec->state->following);

  0002c	8b 45 08	 mov	 eax, DWORD PTR _parser$[ebp]
  0002f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00032	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00035	8b f4		 mov	 esi, esp
  00037	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0003a	50		 push	 eax
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _parser$[ebp]
  0003e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00041	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00044	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00047	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0004a	ff d2		 call	 edx
  0004c	83 c4 04	 add	 esp, 4
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 135  : 				parser->rec->state->following = NULL;

  00056	8b 45 08	 mov	 eax, DWORD PTR _parser$[ebp]
  00059	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0005f	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0
$LN4@freeParser:

; 136  : 			}
; 137  : 		}
; 138  : 	    parser->rec->free(parser->rec);

  00066	8b f4		 mov	 esi, esp
  00068	8b 45 08	 mov	 eax, DWORD PTR _parser$[ebp]
  0006b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006e	51		 push	 ecx
  0006f	8b 55 08	 mov	 edx, DWORD PTR _parser$[ebp]
  00072	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00075	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0007b	ff d1		 call	 ecx
  0007d	83 c4 04	 add	 esp, 4
  00080	3b f4		 cmp	 esi, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 139  : 	    parser->rec	= NULL;

  00087	8b 55 08	 mov	 edx, DWORD PTR _parser$[ebp]
  0008a	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
$LN2@freeParser:

; 140  : 
; 141  :     }
; 142  :     ANTLR3_FREE(parser);

  00091	8b f4		 mov	 esi, esp
  00093	8b 45 08	 mov	 eax, DWORD PTR _parser$[ebp]
  00096	50		 push	 eax
  00097	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0009d	83 c4 04	 add	 esp, 4
  000a0	3b f4		 cmp	 esi, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a7	90		 npad	 1

; 143  : }

  000a8	5e		 pop	 esi
  000a9	3b ec		 cmp	 ebp, esp
  000ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b0	5d		 pop	 ebp
  000b1	c3		 ret	 0
_freeParser ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3parser.c
;	COMDAT _getTokenStream
_TEXT	SEGMENT
_parser$ = 8						; size = 4
_getTokenStream PROC					; COMDAT

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 178  :     return  parser->tstream;

  00003	8b 45 08	 mov	 eax, DWORD PTR _parser$[ebp]
  00006	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 179  : }

  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
_getTokenStream ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3parser.c
;	COMDAT _setTokenStream
_TEXT	SEGMENT
_parser$ = 8						; size = 4
_tstream$ = 12						; size = 4
_setTokenStream PROC					; COMDAT

; 170  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 171  :     parser->tstream = tstream;

  00004	8b 45 08	 mov	 eax, DWORD PTR _parser$[ebp]
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _tstream$[ebp]
  0000a	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 172  :     parser->rec->reset(parser->rec);

  0000d	8b f4		 mov	 esi, esp
  0000f	8b 55 08	 mov	 edx, DWORD PTR _parser$[ebp]
  00012	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00015	50		 push	 eax
  00016	8b 4d 08	 mov	 ecx, DWORD PTR _parser$[ebp]
  00019	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001c	8b 82 8c 00 00
	00		 mov	 eax, DWORD PTR [edx+140]
  00022	ff d0		 call	 eax
  00024	83 c4 04	 add	 esp, 4
  00027	3b f4		 cmp	 esi, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	90		 npad	 1

; 173  : }

  0002f	5e		 pop	 esi
  00030	3b ec		 cmp	 ebp, esp
  00032	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
_setTokenStream ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3parser.c
;	COMDAT _setDebugListener
_TEXT	SEGMENT
_parser$ = 8						; size = 4
_dbg$ = 12						; size = 4
_setDebugListener PROC					; COMDAT

; 147  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 148  : 	// Set the debug listener. There are no methods to override
; 149  : 	// because currently the only ones that notify the debugger
; 150  : 	// are error reporting and recovery. Hence we can afford to
; 151  : 	// check and see if the debugger interface is null or not
; 152  : 	// there. If there is ever an occasion for a performance
; 153  : 	// sensitive function to use the debugger interface, then
; 154  : 	// a replacement function for debug mode should be supplied
; 155  : 	// and installed here.
; 156  : 	//
; 157  : 	parser->rec->debugger	= dbg;

  00004	8b 45 08	 mov	 eax, DWORD PTR _parser$[ebp]
  00007	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0000a	8b 55 0c	 mov	 edx, DWORD PTR _dbg$[ebp]
  0000d	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 158  : 
; 159  : 	// If there was a tokenstream installed already
; 160  : 	// then we need to tell it about the debug interface
; 161  : 	//
; 162  : 	if	(parser->tstream != NULL)

  00010	8b 45 08	 mov	 eax, DWORD PTR _parser$[ebp]
  00013	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00017	74 23		 je	 SHORT $LN2@setDebugLi

; 163  : 	{
; 164  : 		parser->tstream->setDebugListener(parser->tstream, dbg);

  00019	8b f4		 mov	 esi, esp
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR _dbg$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR _parser$[ebp]
  00022	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _parser$[ebp]
  00029	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002c	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  0002f	ff d0		 call	 eax
  00031	83 c4 08	 add	 esp, 8
  00034	3b f4		 cmp	 esi, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	90		 npad	 1
$LN2@setDebugLi:

; 165  : 	}
; 166  : }

  0003c	5e		 pop	 esi
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
_setDebugListener ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3parser.c
;	COMDAT _antlr3ParserNew
_TEXT	SEGMENT
_parser$ = -4						; size = 4
_sizeHint$ = 8						; size = 4
_state$ = 12						; size = 4
_antlr3ParserNew PROC					; COMDAT

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 63   :     pANTLR3_PARSER	parser;
; 64   : 
; 65   :     /* Allocate memory
; 66   :      */
; 67   :     parser	= (pANTLR3_PARSER) ANTLR3_MALLOC(sizeof(ANTLR3_PARSER));

  0000c	8b f4		 mov	 esi, esp
  0000e	6a 1c		 push	 28			; 0000001cH
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00016	83 c4 04	 add	 esp, 4
  00019	3b f4		 cmp	 esi, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	89 45 fc	 mov	 DWORD PTR _parser$[ebp], eax

; 68   : 
; 69   :     if	(parser == NULL)

  00023	83 7d fc 00	 cmp	 DWORD PTR _parser$[ebp], 0
  00027	75 07		 jne	 SHORT $LN2@antlr3Pars

; 70   :     {
; 71   : 		return	NULL;

  00029	33 c0		 xor	 eax, eax
  0002b	e9 83 00 00 00	 jmp	 $LN1@antlr3Pars
$LN2@antlr3Pars:

; 72   :     }
; 73   : 
; 74   :     /* Install a base parser
; 75   :      */
; 76   :     parser->rec =  antlr3BaseRecognizerNew(ANTLR3_TYPE_PARSER, sizeHint, state);

  00030	8b 45 0c	 mov	 eax, DWORD PTR _state$[ebp]
  00033	50		 push	 eax
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _sizeHint$[ebp]
  00037	51		 push	 ecx
  00038	6a 02		 push	 2
  0003a	e8 00 00 00 00	 call	 _antlr3BaseRecognizerNew
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00042	8b 55 fc	 mov	 edx, DWORD PTR _parser$[ebp]
  00045	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 77   : 
; 78   :     if	(parser->rec == NULL)

  00048	8b 45 fc	 mov	 eax, DWORD PTR _parser$[ebp]
  0004b	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0004f	75 1c		 jne	 SHORT $LN3@antlr3Pars

; 79   :     {
; 80   : 		parser->free(parser);

  00051	8b f4		 mov	 esi, esp
  00053	8b 4d fc	 mov	 ecx, DWORD PTR _parser$[ebp]
  00056	51		 push	 ecx
  00057	8b 55 fc	 mov	 edx, DWORD PTR _parser$[ebp]
  0005a	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0005d	ff d0		 call	 eax
  0005f	83 c4 04	 add	 esp, 4
  00062	3b f4		 cmp	 esi, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 81   : 		return	NULL;

  00069	33 c0		 xor	 eax, eax
  0006b	eb 46		 jmp	 SHORT $LN1@antlr3Pars
$LN3@antlr3Pars:

; 82   :     }
; 83   : 
; 84   :     parser->rec->super	= parser;

  0006d	8b 4d fc	 mov	 ecx, DWORD PTR _parser$[ebp]
  00070	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00073	8b 45 fc	 mov	 eax, DWORD PTR _parser$[ebp]
  00076	89 02		 mov	 DWORD PTR [edx], eax

; 85   : 
; 86   :     /* Parser overrides
; 87   :      */
; 88   :     parser->rec->exConstruct	=  antlr3MTExceptionNew;

  00078	8b 4d fc	 mov	 ecx, DWORD PTR _parser$[ebp]
  0007b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007e	c7 82 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+136], OFFSET _antlr3MTExceptionNew

; 89   : 
; 90   :     /* Install the API
; 91   :      */
; 92   : 	parser->setDebugListener	=  setDebugListener;

  00088	8b 45 fc	 mov	 eax, DWORD PTR _parser$[ebp]
  0008b	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _setDebugListener

; 93   :     parser->setTokenStream		=  setTokenStream;

  00092	8b 4d fc	 mov	 ecx, DWORD PTR _parser$[ebp]
  00095	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], OFFSET _setTokenStream

; 94   :     parser->getTokenStream		=  getTokenStream;

  0009c	8b 55 fc	 mov	 edx, DWORD PTR _parser$[ebp]
  0009f	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], OFFSET _getTokenStream

; 95   : 
; 96   :     parser->free			=  freeParser;

  000a6	8b 45 fc	 mov	 eax, DWORD PTR _parser$[ebp]
  000a9	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _freeParser

; 97   : 
; 98   :     return parser;

  000b0	8b 45 fc	 mov	 eax, DWORD PTR _parser$[ebp]
$LN1@antlr3Pars:

; 99   : }

  000b3	5e		 pop	 esi
  000b4	83 c4 04	 add	 esp, 4
  000b7	3b ec		 cmp	 ebp, esp
  000b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000be	8b e5		 mov	 esp, ebp
  000c0	5d		 pop	 ebp
  000c1	c3		 ret	 0
_antlr3ParserNew ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3parser.c
;	COMDAT _antlr3ParserNewStream
_TEXT	SEGMENT
_parser$ = -4						; size = 4
_sizeHint$ = 8						; size = 4
_tstream$ = 12						; size = 4
_state$ = 16						; size = 4
_antlr3ParserNewStream PROC				; COMDAT

; 103  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 104  :     pANTLR3_PARSER	parser;
; 105  : 
; 106  :     parser  = antlr3ParserNew(sizeHint, state);

  0000c	8b 45 10	 mov	 eax, DWORD PTR _state$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _sizeHint$[ebp]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 _antlr3ParserNew
  00019	83 c4 08	 add	 esp, 8
  0001c	89 45 fc	 mov	 DWORD PTR _parser$[ebp], eax

; 107  : 
; 108  :     if	(parser == NULL)

  0001f	83 7d fc 00	 cmp	 DWORD PTR _parser$[ebp], 0
  00023	75 04		 jne	 SHORT $LN2@antlr3Pars

; 109  :     {
; 110  : 		return	NULL;

  00025	33 c0		 xor	 eax, eax
  00027	eb 1f		 jmp	 SHORT $LN1@antlr3Pars
$LN2@antlr3Pars:

; 111  :     }
; 112  : 
; 113  :     /* Everything seems to be hunky dory so we can install the 
; 114  :      * token stream.
; 115  :      */
; 116  :     parser->setTokenStream(parser, tstream);

  00029	8b f4		 mov	 esi, esp
  0002b	8b 55 0c	 mov	 edx, DWORD PTR _tstream$[ebp]
  0002e	52		 push	 edx
  0002f	8b 45 fc	 mov	 eax, DWORD PTR _parser$[ebp]
  00032	50		 push	 eax
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _parser$[ebp]
  00036	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00039	ff d2		 call	 edx
  0003b	83 c4 08	 add	 esp, 8
  0003e	3b f4		 cmp	 esi, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 117  : 
; 118  :     return parser;

  00045	8b 45 fc	 mov	 eax, DWORD PTR _parser$[ebp]
$LN1@antlr3Pars:

; 119  : }

  00048	5e		 pop	 esi
  00049	83 c4 04	 add	 esp, 4
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
_antlr3ParserNewStream ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\SPO_labs\C\src\antlr3parser.c
;	COMDAT _antlr3ParserNewStreamDbg
_TEXT	SEGMENT
_parser$ = -4						; size = 4
_sizeHint$ = 8						; size = 4
_tstream$ = 12						; size = 4
_dbg$ = 16						; size = 4
_state$ = 20						; size = 4
_antlr3ParserNewStreamDbg PROC				; COMDAT

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 46   : 	pANTLR3_PARSER	parser;
; 47   : 
; 48   : 	parser = antlr3ParserNewStream(sizeHint, tstream, state);

  0000c	8b 45 14	 mov	 eax, DWORD PTR _state$[ebp]
  0000f	50		 push	 eax
  00010	8b 4d 0c	 mov	 ecx, DWORD PTR _tstream$[ebp]
  00013	51		 push	 ecx
  00014	8b 55 08	 mov	 edx, DWORD PTR _sizeHint$[ebp]
  00017	52		 push	 edx
  00018	e8 00 00 00 00	 call	 _antlr3ParserNewStream
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00020	89 45 fc	 mov	 DWORD PTR _parser$[ebp], eax

; 49   : 
; 50   : 	if	(parser == NULL)

  00023	83 7d fc 00	 cmp	 DWORD PTR _parser$[ebp], 0
  00027	75 04		 jne	 SHORT $LN2@antlr3Pars

; 51   :     {
; 52   : 		return	NULL;

  00029	33 c0		 xor	 eax, eax
  0002b	eb 1f		 jmp	 SHORT $LN1@antlr3Pars
$LN2@antlr3Pars:

; 53   :     }
; 54   : 
; 55   : 	parser->setDebugListener(parser, dbg);

  0002d	8b f4		 mov	 esi, esp
  0002f	8b 45 10	 mov	 eax, DWORD PTR _dbg$[ebp]
  00032	50		 push	 eax
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _parser$[ebp]
  00036	51		 push	 ecx
  00037	8b 55 fc	 mov	 edx, DWORD PTR _parser$[ebp]
  0003a	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0003d	ff d0		 call	 eax
  0003f	83 c4 08	 add	 esp, 8
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 56   : 
; 57   : 	return parser;

  00049	8b 45 fc	 mov	 eax, DWORD PTR _parser$[ebp]
$LN1@antlr3Pars:

; 58   : }

  0004c	5e		 pop	 esi
  0004d	83 c4 04	 add	 esp, 4
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
_antlr3ParserNewStreamDbg ENDP
_TEXT	ENDS
END
